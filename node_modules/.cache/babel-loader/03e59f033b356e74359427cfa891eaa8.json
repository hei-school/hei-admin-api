{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { TranslatableContextProvider, useTranslatable } from 'ra-core';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </Translatable>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </Translatable>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to MUI tabs.\n */\nexport var TranslatableInputs = function (props) {\n  var className = props.className,\n    defaultLocale = props.defaultLocale,\n    locales = props.locales,\n    _a = props.groupKey,\n    groupKey = _a === void 0 ? '' : _a,\n    _b = props.selector,\n    selector = _b === void 0 ? React.createElement(TranslatableInputsTabs, {\n      groupKey: groupKey\n    }) : _b,\n    children = props.children,\n    variant = props.variant,\n    margin = props.margin;\n  var context = useTranslatable({\n    defaultLocale: defaultLocale,\n    locales: locales\n  });\n  return React.createElement(Root, {\n    className: className\n  }, React.createElement(TranslatableContextProvider, {\n    value: context\n  }, selector, locales.map(function (locale) {\n    return React.createElement(TranslatableInputsTabContent, {\n      key: locale,\n      locale: locale,\n      groupKey: groupKey,\n      variant: variant,\n      margin: margin\n    }, children);\n  })));\n};\nvar PREFIX = 'RaTranslatableInputs';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5)\n  };\n});","map":{"version":3,"sources":["../../../src/input/TranslatableInputs.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,MAAM,QAAQ,sBAAsB;AAE7C,SACI,2BAA2B,EAC3B,eAAe,QAEZ,SAAS;AAChB,SAAS,sBAAsB,QAAQ,0BAA0B;AACjE,SAAS,4BAA4B,QAAQ,gCAAgC;AAE7E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDG;AACH,OAAO,IAAM,kBAAkB,GAAG,UAC9B,KAA8B,EAAA;EAG1B,IAAA,SAAS,GAQT,KAAK,CAAA,SARI;IACT,aAAa,GAOb,KAAK,CAAA,aAPQ;IACb,OAAO,GAMP,KAAK,CAAA,OANE;IACP,EAAA,GAKA,KAAK,CAAA,QALQ;IAAb,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAA,EAAA;IACb,EAAA,GAIA,KAAK,CAAA,QAJoD;IAAzD,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAA,CAAA,aAAA,CAAC,sBAAsB,EAAA;MAAC,QAAQ,EAAE;IAAQ,CAAA,CAAI,GAAA,EAAA;IACzD,QAAQ,GAGR,KAAK,CAAA,QAHG;IACR,OAAO,GAEP,KAAK,CAAA,OAFE;IACP,MAAM,GACN,KAAK,CAAA,MADC;EAEV,IAAM,OAAO,GAAG,eAAe,CAAC;IAAE,aAAa,EAAA,aAAA;IAAE,OAAO,EAAA;EAAA,CAAE,CAAC;EAE3D,OACI,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;IAAC,SAAS,EAAE;EAAS,CAAA,EACtB,KAAA,CAAA,aAAA,CAAC,2BAA2B,EAAA;IAAC,KAAK,EAAE;EAAO,CAAA,EACtC,QAAQ,EACR,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,EAAA;IAAI,OACnB,KAAA,CAAA,aAAA,CAAC,4BAA4B,EAAA;MACzB,GAAG,EAAE,MAAM;MACX,MAAM,EAAE,MAAM;MACd,QAAQ,EAAE,QAAQ;MAClB,OAAO,EAAE,OAAO;MAChB,MAAM,EAAE;IAAM,CAAA,EAEb,QAAQ,CACkB;EATZ,CAUtB,CAAC,CACwB,CAC3B;AAEf,CAAC;AAWD,IAAM,MAAM,GAAG,sBAAsB;AAErC,IAAM,IAAI,GAAG,MAAM,CAAC,KAAK,EAAE;EACvB,IAAI,EAAE,MAAM;EACZ,iBAAiB,EAAE,UAAC,KAAK,EAAE,MAAM,EAAA;IAAK,OAAA,MAAM,CAAC,IAAI;EAAX;CACzC,CAAC,CAAC,UAAC,EAAS,EAAA;MAAP,KAAK,GAAA,EAAA,CAAA,KAAA;EAAO,OAAC;IACf,QAAQ,EAAE,CAAC;IACX,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3B,YAAY,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG;GAClC;AAJiB,CAIhB,CAAC","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { TranslatableContextProvider, useTranslatable, } from 'ra-core';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </Translatable>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </Translatable>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to MUI tabs.\n */\nexport var TranslatableInputs = function (props) {\n    var className = props.className, defaultLocale = props.defaultLocale, locales = props.locales, _a = props.groupKey, groupKey = _a === void 0 ? '' : _a, _b = props.selector, selector = _b === void 0 ? React.createElement(TranslatableInputsTabs, { groupKey: groupKey }) : _b, children = props.children, variant = props.variant, margin = props.margin;\n    var context = useTranslatable({ defaultLocale: defaultLocale, locales: locales });\n    return (React.createElement(Root, { className: className },\n        React.createElement(TranslatableContextProvider, { value: context },\n            selector,\n            locales.map(function (locale) { return (React.createElement(TranslatableInputsTabContent, { key: locale, locale: locale, groupKey: groupKey, variant: variant, margin: margin }, children)); }))));\n};\nvar PREFIX = 'RaTranslatableInputs';\nvar Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: function (props, styles) { return styles.root; },\n})(function (_a) {\n    var theme = _a.theme;\n    return ({\n        flexGrow: 1,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(0.5),\n    });\n});\n//# sourceMappingURL=TranslatableInputs.js.map"]},"metadata":{},"sourceType":"module"}