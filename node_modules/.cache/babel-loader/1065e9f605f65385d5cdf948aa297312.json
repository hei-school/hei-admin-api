{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useState, useEffect } from 'react';\nimport { usePreference } from './usePreference';\n/**\n * Get the props for a preference input that changes the value on blur\n *\n * Relies on `usePreference`, so it's using the PreferenceKeyContext\n *\n * @example\n * const FontSizePreferenceInput = () => {\n *     const field = usePreferenceInput('ui.font.size', 10);\n *     return (\n *         <div>\n *             <label for=\"font-size\">Font size</label>\n *             <input id=\"font-size\" {...field} />\n *         </div>\n *     );\n * }\n */\nexport var usePreferenceInput = function (key, defaultValue) {\n  var _a = usePreference(key, defaultValue),\n    valueFromStore = _a[0],\n    setValueFromStore = _a[1];\n  var _b = useState(valueFromStore),\n    value = _b[0],\n    setValue = _b[1];\n  useEffect(function () {\n    setValue(valueFromStore || defaultValue);\n  }, [valueFromStore, defaultValue]);\n  var onChange = function (event) {\n    setValue(event.target.value === '' ? defaultValue : event.target.value);\n  };\n  var onBlur = function () {\n    setValueFromStore(value);\n  };\n  var onKeyDown = function (event) {\n    var _a;\n    if (event.key === 'Enter') {\n      setValueFromStore(value);\n      var form = event.target.form;\n      if (form) {\n        var index = __spreadArray([], form, true).indexOf(event.target);\n        (_a = form.elements[index + 1]) === null || _a === void 0 ? void 0 : _a.focus();\n      }\n      event.preventDefault();\n    }\n  };\n  return {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown\n  };\n};","map":{"version":3,"sources":["../../../src/preferences/usePreferenceInput.ts"],"names":[],"mappings":";;;;;;;;;AAAA,SAAS,QAAQ,EAAE,SAAS,QAAQ,OAAO;AAE3C,SAAS,aAAa,QAAQ,iBAAiB;AAE/C;;;;;;;;;;;;;;;AAeG;AACH,OAAO,IAAM,kBAAkB,GAAG,UAAC,GAAY,EAAE,YAAkB,EAAA;EACzD,IAAA,EAAA,GAAsC,aAAa,CACrD,GAAG,EACH,YAAY,CACf;IAHM,cAAc,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,iBAAiB,GAAA,EAAA,CAAA,CAAA,CAGvC;EACK,IAAA,EAAA,GAAoB,QAAQ,CAAC,cAAc,CAAC;IAA3C,KAAK,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,CAAA,CAA4B;EAClD,SAAS,CAAC,YAAA;IACN,QAAQ,CAAC,cAAc,IAAI,YAAY,CAAC;EAC5C,CAAC,EAAE,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;EAElC,IAAM,QAAQ,GAAG,UAAA,KAAK,EAAA;IAClB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,KAAK,EAAE,GAAG,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;EAC3E,CAAC;EAED,IAAM,MAAM,GAAG,YAAA;IACX,iBAAiB,CAAC,KAAK,CAAC;EAC5B,CAAC;EAED,IAAM,SAAS,GAAG,UAAA,KAAK,EAAA;;IACnB,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE;MACvB,iBAAiB,CAAC,KAAK,CAAC;MACxB,IAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI;MAC9B,IAAI,IAAI,EAAE;QACN,IAAM,KAAK,GAAG,aAAA,CAAA,EAAA,EAAI,IAAI,EAAA,IAAA,CAAA,CAAE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC;QAC7C,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,EAAE;MACpC;MACD,KAAK,CAAC,cAAc,EAAE;IACzB;EACL,CAAC;EAED,OAAO;IAAE,KAAK,EAAA,KAAA;IAAE,QAAQ,EAAA,QAAA;IAAE,MAAM,EAAA,MAAA;IAAE,SAAS,EAAA;EAAA,CAAE;AACjD,CAAC","sourceRoot":"","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useState, useEffect } from 'react';\nimport { usePreference } from './usePreference';\n/**\n * Get the props for a preference input that changes the value on blur\n *\n * Relies on `usePreference`, so it's using the PreferenceKeyContext\n *\n * @example\n * const FontSizePreferenceInput = () => {\n *     const field = usePreferenceInput('ui.font.size', 10);\n *     return (\n *         <div>\n *             <label for=\"font-size\">Font size</label>\n *             <input id=\"font-size\" {...field} />\n *         </div>\n *     );\n * }\n */\nexport var usePreferenceInput = function (key, defaultValue) {\n    var _a = usePreference(key, defaultValue), valueFromStore = _a[0], setValueFromStore = _a[1];\n    var _b = useState(valueFromStore), value = _b[0], setValue = _b[1];\n    useEffect(function () {\n        setValue(valueFromStore || defaultValue);\n    }, [valueFromStore, defaultValue]);\n    var onChange = function (event) {\n        setValue(event.target.value === '' ? defaultValue : event.target.value);\n    };\n    var onBlur = function () {\n        setValueFromStore(value);\n    };\n    var onKeyDown = function (event) {\n        var _a;\n        if (event.key === 'Enter') {\n            setValueFromStore(value);\n            var form = event.target.form;\n            if (form) {\n                var index = __spreadArray([], form, true).indexOf(event.target);\n                (_a = form.elements[index + 1]) === null || _a === void 0 ? void 0 : _a.focus();\n            }\n            event.preventDefault();\n        }\n    };\n    return { value: value, onChange: onChange, onBlur: onBlur, onKeyDown: onKeyDown };\n};\n//# sourceMappingURL=usePreferenceInput.js.map"]},"metadata":{},"sourceType":"module"}