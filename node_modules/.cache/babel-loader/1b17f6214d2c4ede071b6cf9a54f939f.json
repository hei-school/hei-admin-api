{"ast":null,"code":"import * as React from 'react';\nimport { isValidElement, useCallback } from 'react';\nimport get from 'lodash/get';\nimport { useTranslate } from '../i18n';\nimport { RecordContextProvider } from '../controller';\n/*\n * Returns helper functions for choices handling.\n *\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n */\nexport var useChoices = function (_a) {\n  var _b = _a.optionText,\n    optionText = _b === void 0 ? 'name' : _b,\n    _c = _a.optionValue,\n    optionValue = _c === void 0 ? 'id' : _c,\n    _d = _a.disableValue,\n    disableValue = _d === void 0 ? 'disabled' : _d,\n    _e = _a.translateChoice,\n    translateChoice = _e === void 0 ? true : _e;\n  var translate = useTranslate();\n  var getChoiceText = useCallback(function (choice) {\n    if (isValidElement(optionText)) {\n      return React.createElement(RecordContextProvider, {\n        value: choice\n      }, optionText);\n    }\n    var choiceName = typeof optionText === 'function' ? optionText(choice) : get(choice, optionText);\n    return isValidElement(choiceName) ? choiceName : translateChoice ? translate(String(choiceName), {\n      _: choiceName\n    }) : String(choiceName);\n  }, [optionText, translate, translateChoice]);\n  var getChoiceValue = useCallback(function (choice) {\n    return get(choice, optionValue);\n  }, [optionValue]);\n  var getDisableValue = useCallback(function (choice) {\n    return get(choice, disableValue);\n  }, [disableValue]);\n  return {\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue,\n    getDisableValue: getDisableValue\n  };\n};","map":{"version":3,"sources":["../../../src/form/useChoices.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAuB,cAAc,EAAE,WAAW,QAAQ,OAAO;AACjE,OAAO,GAAG,MAAM,YAAY;AAE5B,SAAS,YAAY,QAAQ,SAAS;AAEtC,SAAS,qBAAqB,QAAQ,eAAe;AAwBrD;;;;;;;;;;AAUG;AACH,OAAO,IAAM,UAAU,GAAG,UAAC,EAKP,EAAA;MAJhB,EAAA,GAAA,EAAA,CAAA,UAAmB;IAAnB,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,MAAM,GAAA,EAAA;IACnB,EAAA,GAAA,EAAA,CAAA,WAAkB;IAAlB,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,EAAA;IAClB,EAAA,GAAA,EAAA,CAAA,YAAyB;IAAzB,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,UAAU,GAAA,EAAA;IACzB,EAAA,GAAA,EAAA,CAAA,eAAsB;IAAtB,eAAe,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,EAAA;EAEtB,IAAM,SAAS,GAAG,YAAY,EAAE;EAEhC,IAAM,aAAa,GAAG,WAAW,CAC7B,UAAA,MAAM,EAAA;IACF,IAAI,cAAc,CAAkB,UAAU,CAAC,EAAE;MAC7C,OACI,KAAA,CAAA,aAAA,CAAC,qBAAqB,EAAA;QAAC,KAAK,EAAE;MAAM,CAAA,EAC/B,UAAU,CACS;IAE/B;IACD,IAAM,UAAU,GACZ,OAAO,UAAU,KAAK,UAAU,GAC1B,UAAU,CAAC,MAAM,CAAC,GAClB,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC;IAEjC,OAAO,cAAc,CAAC,UAAU,CAAC,GAC3B,UAAU,GACV,eAAe,GACf,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;MAAE,CAAC,EAAE;IAAU,CAAE,CAAC,GAChD,MAAM,CAAC,UAAU,CAAC;EAC5B,CAAC,EACD,CAAC,UAAU,EAAE,SAAS,EAAE,eAAe,CAAC,CAC3C;EAED,IAAM,cAAc,GAAG,WAAW,CAAC,UAAA,MAAM,EAAA;IAAI,OAAA,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC;EAAxB,CAAwB,EAAE,CACnE,WAAW,CACd,CAAC;EAEF,IAAM,eAAe,GAAG,WAAW,CAAC,UAAA,MAAM,EAAA;IAAI,OAAA,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC;EAAzB,CAAyB,EAAE,CACrE,YAAY,CACf,CAAC;EAEF,OAAO;IACH,aAAa,EAAA,aAAA;IACb,cAAc,EAAA,cAAA;IACd,eAAe,EAAA;GAClB;AACL,CAAC","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { isValidElement, useCallback } from 'react';\nimport get from 'lodash/get';\nimport { useTranslate } from '../i18n';\nimport { RecordContextProvider } from '../controller';\n/*\n * Returns helper functions for choices handling.\n *\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n */\nexport var useChoices = function (_a) {\n    var _b = _a.optionText, optionText = _b === void 0 ? 'name' : _b, _c = _a.optionValue, optionValue = _c === void 0 ? 'id' : _c, _d = _a.disableValue, disableValue = _d === void 0 ? 'disabled' : _d, _e = _a.translateChoice, translateChoice = _e === void 0 ? true : _e;\n    var translate = useTranslate();\n    var getChoiceText = useCallback(function (choice) {\n        if (isValidElement(optionText)) {\n            return (React.createElement(RecordContextProvider, { value: choice }, optionText));\n        }\n        var choiceName = typeof optionText === 'function'\n            ? optionText(choice)\n            : get(choice, optionText);\n        return isValidElement(choiceName)\n            ? choiceName\n            : translateChoice\n                ? translate(String(choiceName), { _: choiceName })\n                : String(choiceName);\n    }, [optionText, translate, translateChoice]);\n    var getChoiceValue = useCallback(function (choice) { return get(choice, optionValue); }, [\n        optionValue,\n    ]);\n    var getDisableValue = useCallback(function (choice) { return get(choice, disableValue); }, [\n        disableValue,\n    ]);\n    return {\n        getChoiceText: getChoiceText,\n        getChoiceValue: getChoiceValue,\n        getDisableValue: getDisableValue,\n    };\n};\n//# sourceMappingURL=useChoices.js.map"]},"metadata":{},"sourceType":"module"}