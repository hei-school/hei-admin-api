{"ast":null,"code":"import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { I18nContext } from './I18nContext';\nimport { useStore } from '../store/useStore';\nimport { useNotify } from '../notification';\n/**\n * Store the i18nProvider in a context, and rerender children when the locale changes\n */\nexport var I18nContextProvider = function (_a) {\n  var _b = _a.value,\n    value = _b === void 0 ? defaulti18nContext : _b,\n    children = _a.children;\n  var locale = useStore('locale')[0];\n  var notify = useNotify();\n  var _c = useState(0),\n    key = _c[0],\n    setKey = _c[1];\n  // to avoid blinking effect, delay first render if the user has a non-default locale\n  var _d = useState(locale === value.getLocale()),\n    isInitialized = _d[0],\n    setInitialized = _d[1];\n  // watch store for locale changes\n  useEffect(function () {\n    if (locale && value.getLocale() !== locale) {\n      new Promise(function (resolve) {\n        // so we systematically return a Promise for the messages\n        // i18nProvider may return a Promise for language changes,\n        resolve(value.changeLocale(locale));\n      }).then(function () {\n        // Force full page re-render.\n        // This is slow on locale change, but it's a good way\n        // to avoid having one subscription to the locale\n        // for each call to translate()\n        setKey(function (key) {\n          return key + 1;\n        });\n        setInitialized(true);\n      }).catch(function (error) {\n        setInitialized(true);\n        notify('ra.notification.i18n_error', {\n          type: 'warning'\n        });\n        console.error(error);\n      });\n    } else {\n      setInitialized(true);\n    }\n  }, [value, locale, notify]);\n  return isInitialized ? React.createElement(I18nContext.Provider, {\n    value: value,\n    key: key\n  }, children) : null;\n};\nvar defaulti18nContext = {\n  translate: function (x) {\n    return x;\n  },\n  changeLocale: function () {\n    return Promise.resolve();\n  },\n  getLocale: function () {\n    return 'en';\n  }\n};","map":{"version":3,"sources":["../../../src/i18n/I18nContextProvider.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,SAAS,EAAE,QAAQ,QAAmB,OAAO;AAEtD,SAAS,WAAW,QAAQ,eAAe;AAC3C,SAAS,QAAQ,QAAQ,mBAAmB;AAC5C,SAAS,SAAS,QAAQ,iBAAiB;AAG3C;;AAEG;AACH,OAAO,IAAM,mBAAmB,GAAG,UAAC,EAGT,EAAA;MAFvB,EAAA,GAAA,EAAA,CAAA,KAA0B;IAA1B,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,kBAAkB,GAAA,EAAA;IAC1B,QAAQ,GAAA,EAAA,CAAA,QAAA;EAED,IAAA,MAAM,GAAI,QAAQ,CAAC,QAAQ,CAAC,CAAA,CAAA,CAAtB;EACb,IAAM,MAAM,GAAG,SAAS,EAAE;EACpB,IAAA,EAAA,GAAgB,QAAQ,CAAC,CAAC,CAAC;IAA1B,GAAG,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,MAAM,GAAA,EAAA,CAAA,CAAA,CAAe;EACjC;EACM,IAAA,EAAA,GAAkC,QAAQ,CAC5C,MAAM,KAAK,KAAK,CAAC,SAAS,EAAE,CAC/B;IAFM,aAAa,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,cAAc,GAAA,EAAA,CAAA,CAAA,CAEnC;EAED;EACA,SAAS,CAAC,YAAA;IACN,IAAI,MAAM,IAAI,KAAK,CAAC,SAAS,EAAE,KAAK,MAAM,EAAE;MACxC,IAAI,OAAO,CAAC,UAAA,OAAO,EAAA;QACf;QACA;QACA,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;MACvC,CAAC,CAAC,CACG,IAAI,CAAC,YAAA;QACF;QACA;QACA;QACA;QACA,MAAM,CAAC,UAAA,GAAG,EAAA;UAAI,OAAA,GAAG,GAAG,CAAC;QAAP,CAAO,CAAC;QACtB,cAAc,CAAC,IAAI,CAAC;MACxB,CAAC,CAAC,CACD,KAAK,CAAC,UAAA,KAAK,EAAA;QACR,cAAc,CAAC,IAAI,CAAC;QACpB,MAAM,CAAC,4BAA4B,EAAE;UAAE,IAAI,EAAE;QAAS,CAAE,CAAC;QACzD,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC;MACxB,CAAC,CAAC;KACT,MAAM;MACH,cAAc,CAAC,IAAI,CAAC;IACvB;EACL,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;EAE3B,OAAO,aAAa,GAChB,KAAA,CAAA,aAAA,CAAC,WAAW,CAAC,QAAQ,EAAA;IAAC,KAAK,EAAE,KAAK;IAAE,GAAG,EAAE;EAAG,CAAA,EACvC,QAAQ,CACU,GACvB,IAAI;AACZ,CAAC;AAOD,IAAM,kBAAkB,GAAG;EACvB,SAAS,EAAE,UAAA,CAAC,EAAA;IAAI,OAAA,CAAC;EAAD,CAAC;EACjB,YAAY,EAAE,YAAA;IAAM,OAAA,OAAO,CAAC,OAAO,EAAE;EAAjB,CAAiB;EACrC,SAAS,EAAE,YAAA;IAAM,OAAA,IAAI;EAAJ;CACpB","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { I18nContext } from './I18nContext';\nimport { useStore } from '../store/useStore';\nimport { useNotify } from '../notification';\n/**\n * Store the i18nProvider in a context, and rerender children when the locale changes\n */\nexport var I18nContextProvider = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? defaulti18nContext : _b, children = _a.children;\n    var locale = useStore('locale')[0];\n    var notify = useNotify();\n    var _c = useState(0), key = _c[0], setKey = _c[1];\n    // to avoid blinking effect, delay first render if the user has a non-default locale\n    var _d = useState(locale === value.getLocale()), isInitialized = _d[0], setInitialized = _d[1];\n    // watch store for locale changes\n    useEffect(function () {\n        if (locale && value.getLocale() !== locale) {\n            new Promise(function (resolve) {\n                // so we systematically return a Promise for the messages\n                // i18nProvider may return a Promise for language changes,\n                resolve(value.changeLocale(locale));\n            })\n                .then(function () {\n                // Force full page re-render.\n                // This is slow on locale change, but it's a good way\n                // to avoid having one subscription to the locale\n                // for each call to translate()\n                setKey(function (key) { return key + 1; });\n                setInitialized(true);\n            })\n                .catch(function (error) {\n                setInitialized(true);\n                notify('ra.notification.i18n_error', { type: 'warning' });\n                console.error(error);\n            });\n        }\n        else {\n            setInitialized(true);\n        }\n    }, [value, locale, notify]);\n    return isInitialized ? (React.createElement(I18nContext.Provider, { value: value, key: key }, children)) : null;\n};\nvar defaulti18nContext = {\n    translate: function (x) { return x; },\n    changeLocale: function () { return Promise.resolve(); },\n    getLocale: function () { return 'en'; },\n};\n//# sourceMappingURL=I18nContextProvider.js.map"]},"metadata":{},"sourceType":"module"}