{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar constants_1 = require(\"./constants\");\n/**\n * @internal\n */\nvar RawSha256 = /** @class */function () {\n  function RawSha256() {\n    this.state = Int32Array.from(constants_1.INIT);\n    this.temp = new Int32Array(64);\n    this.buffer = new Uint8Array(64);\n    this.bufferLength = 0;\n    this.bytesHashed = 0;\n    /**\n     * @internal\n     */\n    this.finished = false;\n  }\n  RawSha256.prototype.update = function (data) {\n    if (this.finished) {\n      throw new Error(\"Attempted to update an already finished hash.\");\n    }\n    var position = 0;\n    var byteLength = data.byteLength;\n    this.bytesHashed += byteLength;\n    if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {\n      throw new Error(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n    while (byteLength > 0) {\n      this.buffer[this.bufferLength++] = data[position++];\n      byteLength--;\n      if (this.bufferLength === constants_1.BLOCK_SIZE) {\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n    }\n  };\n  RawSha256.prototype.digest = function () {\n    if (!this.finished) {\n      var bitsHashed = this.bytesHashed * 8;\n      var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);\n      var undecoratedLength = this.bufferLength;\n      bufferView.setUint8(this.bufferLength++, 0x80);\n      // Ensure the final block has enough room for the hashed length\n      if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {\n        for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {\n          bufferView.setUint8(i, 0);\n        }\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n      for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {\n        bufferView.setUint8(i, 0);\n      }\n      bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);\n      bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);\n      this.hashBuffer();\n      this.finished = true;\n    }\n    // The value in state is little-endian rather than big-endian, so flip\n    // each word into a new Uint8Array\n    var out = new Uint8Array(constants_1.DIGEST_LENGTH);\n    for (var i = 0; i < 8; i++) {\n      out[i * 4] = this.state[i] >>> 24 & 0xff;\n      out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;\n      out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;\n      out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;\n    }\n    return out;\n  };\n  RawSha256.prototype.hashBuffer = function () {\n    var _a = this,\n      buffer = _a.buffer,\n      state = _a.state;\n    var state0 = state[0],\n      state1 = state[1],\n      state2 = state[2],\n      state3 = state[3],\n      state4 = state[4],\n      state5 = state[5],\n      state6 = state[6],\n      state7 = state[7];\n    for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n      if (i < 16) {\n        this.temp[i] = (buffer[i * 4] & 0xff) << 24 | (buffer[i * 4 + 1] & 0xff) << 16 | (buffer[i * 4 + 2] & 0xff) << 8 | buffer[i * 4 + 3] & 0xff;\n      } else {\n        var u = this.temp[i - 2];\n        var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;\n        u = this.temp[i - 15];\n        var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;\n        this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);\n      }\n      var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;\n      var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;\n      state7 = state6;\n      state6 = state5;\n      state5 = state4;\n      state4 = state3 + t1 | 0;\n      state3 = state2;\n      state2 = state1;\n      state1 = state0;\n      state0 = t1 + t2 | 0;\n    }\n    state[0] += state0;\n    state[1] += state1;\n    state[2] += state2;\n    state[3] += state3;\n    state[4] += state4;\n    state[5] += state5;\n    state[6] += state6;\n    state[7] += state7;\n  };\n  return RawSha256;\n}();\nexports.RawSha256 = RawSha256;","map":{"version":3,"sources":["../src/RawSha256.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"./constants\");\n/**\n * @internal\n */\nvar RawSha256 = /** @class */ (function () {\n    function RawSha256() {\n        this.state = Int32Array.from(constants_1.INIT);\n        this.temp = new Int32Array(64);\n        this.buffer = new Uint8Array(64);\n        this.bufferLength = 0;\n        this.bytesHashed = 0;\n        /**\n         * @internal\n         */\n        this.finished = false;\n    }\n    RawSha256.prototype.update = function (data) {\n        if (this.finished) {\n            throw new Error(\"Attempted to update an already finished hash.\");\n        }\n        var position = 0;\n        var byteLength = data.byteLength;\n        this.bytesHashed += byteLength;\n        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {\n            throw new Error(\"Cannot hash more than 2^53 - 1 bits\");\n        }\n        while (byteLength > 0) {\n            this.buffer[this.bufferLength++] = data[position++];\n            byteLength--;\n            if (this.bufferLength === constants_1.BLOCK_SIZE) {\n                this.hashBuffer();\n                this.bufferLength = 0;\n            }\n        }\n    };\n    RawSha256.prototype.digest = function () {\n        if (!this.finished) {\n            var bitsHashed = this.bytesHashed * 8;\n            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);\n            var undecoratedLength = this.bufferLength;\n            bufferView.setUint8(this.bufferLength++, 0x80);\n            // Ensure the final block has enough room for the hashed length\n            if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {\n                for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {\n                    bufferView.setUint8(i, 0);\n                }\n                this.hashBuffer();\n                this.bufferLength = 0;\n            }\n            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {\n                bufferView.setUint8(i, 0);\n            }\n            bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);\n            bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);\n            this.hashBuffer();\n            this.finished = true;\n        }\n        // The value in state is little-endian rather than big-endian, so flip\n        // each word into a new Uint8Array\n        var out = new Uint8Array(constants_1.DIGEST_LENGTH);\n        for (var i = 0; i < 8; i++) {\n            out[i * 4] = (this.state[i] >>> 24) & 0xff;\n            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n        }\n        return out;\n    };\n    RawSha256.prototype.hashBuffer = function () {\n        var _a = this, buffer = _a.buffer, state = _a.state;\n        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];\n        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n            if (i < 16) {\n                this.temp[i] =\n                    ((buffer[i * 4] & 0xff) << 24) |\n                        ((buffer[i * 4 + 1] & 0xff) << 16) |\n                        ((buffer[i * 4 + 2] & 0xff) << 8) |\n                        (buffer[i * 4 + 3] & 0xff);\n            }\n            else {\n                var u = this.temp[i - 2];\n                var t1_1 = ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);\n                u = this.temp[i - 15];\n                var t2_1 = ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);\n                this.temp[i] =\n                    ((t1_1 + this.temp[i - 7]) | 0) + ((t2_1 + this.temp[i - 16]) | 0);\n            }\n            var t1 = ((((((state4 >>> 6) | (state4 << 26)) ^\n                ((state4 >>> 11) | (state4 << 21)) ^\n                ((state4 >>> 25) | (state4 << 7))) +\n                ((state4 & state5) ^ (~state4 & state6))) |\n                0) +\n                ((state7 + ((constants_1.KEY[i] + this.temp[i]) | 0)) | 0)) |\n                0;\n            var t2 = ((((state0 >>> 2) | (state0 << 30)) ^\n                ((state0 >>> 13) | (state0 << 19)) ^\n                ((state0 >>> 22) | (state0 << 10))) +\n                ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |\n                0;\n            state7 = state6;\n            state6 = state5;\n            state5 = state4;\n            state4 = (state3 + t1) | 0;\n            state3 = state2;\n            state2 = state1;\n            state1 = state0;\n            state0 = (t1 + t2) | 0;\n        }\n        state[0] += state0;\n        state[1] += state1;\n        state[2] += state2;\n        state[3] += state3;\n        state[4] += state4;\n        state[5] += state5;\n        state[6] += state6;\n        state[7] += state7;\n    };\n    return RawSha256;\n}());\nexports.RawSha256 = RawSha256;\n//# sourceMappingURL=RawSha256.js.map"]},"metadata":{},"sourceType":"script"}