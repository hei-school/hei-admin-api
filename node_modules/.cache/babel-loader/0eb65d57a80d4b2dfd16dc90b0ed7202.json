{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { RecordContextProvider } from '../record/RecordContext';\nimport { CreateContext } from './CreateContext';\nimport { SaveContextProvider, usePickSaveContext } from '../saveContext';\n/**\n * Create a Create Context.\n *\n * @example\n *\n * const MyCreate = (props) => {\n *     const controllerProps = useCreateController(props);\n *     return (\n *         <CreateContextProvider value={controllerProps}>\n *             <MyCreateView>\n *         </CreateContextProvider>\n *     );\n * };\n *\n * const MyCreateView = () => {\n *     const record = useRecordContext();\n *     // or, to rerender only when the save operation change but not data\n *     const { saving } = useCreateContext();\n * }\n *\n * @see CreateContext\n * @see RecordContext\n */\nexport var CreateContextProvider = function (_a) {\n  var children = _a.children,\n    value = _a.value;\n  return React.createElement(CreateContext.Provider, {\n    value: value\n  }, React.createElement(SaveContextProvider, {\n    value: __assign(__assign({}, usePickSaveContext(value)), {\n      mutationMode: 'pessimistic'\n    })\n  }, React.createElement(RecordContextProvider, {\n    value: value && value.record\n  }, children)));\n};","map":{"version":3,"sources":["../../../../src/controller/create/CreateContextProvider.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAI9B,SAAS,qBAAqB,QAAQ,yBAAyB;AAC/D,SAAS,aAAa,QAAQ,iBAAiB;AAE/C,SAAS,mBAAmB,EAAE,kBAAkB,QAAQ,gBAAgB;AAExE;;;;;;;;;;;;;;;;;;;;;;AAsBG;AACH,OAAO,IAAM,qBAAqB,GAAG,UAAC,EAMrC,EAAA;MALG,QAAQ,GAAA,EAAA,CAAA,QAAA;IACR,KAAK,GAAA,EAAA,CAAA,KAAA;EAIH,OACF,KAAA,CAAA,aAAA,CAAC,aAAa,CAAC,QAAQ,EAAA;IAAC,KAAK,EAAE;EAAK,CAAA,EAChC,KAAA,CAAA,aAAA,CAAC,mBAAmB,EAAA;IAChB,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACE,kBAAkB,CAAC,KAAK,CAAC,CAAA,EAAA;MAC5B,YAAY,EAAE;IAAa,CAAA;EAAA,CAAA,EAG/B,KAAA,CAAA,aAAA,CAAC,qBAAqB,EAAA;IAClB,KAAK,EAAE,KAAK,IAAI,KAAK,CAAC;EAAM,CAAA,EAE3B,QAAQ,CACW,CACN,CACD;AAdvB,CAeL","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { RecordContextProvider } from '../record/RecordContext';\nimport { CreateContext } from './CreateContext';\nimport { SaveContextProvider, usePickSaveContext } from '../saveContext';\n/**\n * Create a Create Context.\n *\n * @example\n *\n * const MyCreate = (props) => {\n *     const controllerProps = useCreateController(props);\n *     return (\n *         <CreateContextProvider value={controllerProps}>\n *             <MyCreateView>\n *         </CreateContextProvider>\n *     );\n * };\n *\n * const MyCreateView = () => {\n *     const record = useRecordContext();\n *     // or, to rerender only when the save operation change but not data\n *     const { saving } = useCreateContext();\n * }\n *\n * @see CreateContext\n * @see RecordContext\n */\nexport var CreateContextProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(CreateContext.Provider, { value: value },\n        React.createElement(SaveContextProvider, { value: __assign(__assign({}, usePickSaveContext(value)), { mutationMode: 'pessimistic' }) },\n            React.createElement(RecordContextProvider, { value: value && value.record }, children))));\n};\n//# sourceMappingURL=CreateContextProvider.js.map"]},"metadata":{},"sourceType":"module"}