{"ast":null,"code":"import { __assign, __awaiter, __generator, __values } from \"tslib\";\nexport function ssecMiddleware(options) {\n  var _this = this;\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var input, properties, properties_1, properties_1_1, prop, value, valueView, encoded, hash, _a, _b, _c, _d, e_1_1;\n        var e_1, _e, _f;\n        return __generator(this, function (_g) {\n          switch (_g.label) {\n            case 0:\n              input = __assign({}, args.input);\n              properties = [{\n                target: \"SSECustomerKey\",\n                hash: \"SSECustomerKeyMD5\"\n              }, {\n                target: \"CopySourceSSECustomerKey\",\n                hash: \"CopySourceSSECustomerKeyMD5\"\n              }];\n              _g.label = 1;\n            case 1:\n              _g.trys.push([1, 6, 7, 8]);\n              properties_1 = __values(properties), properties_1_1 = properties_1.next();\n              _g.label = 2;\n            case 2:\n              if (!!properties_1_1.done) return [3 /*break*/, 5];\n              prop = properties_1_1.value;\n              value = input[prop.target];\n              if (!value) return [3 /*break*/, 4];\n              valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === \"string\" ? options.utf8Decoder(value) : new Uint8Array(value);\n              encoded = options.base64Encoder(valueView);\n              hash = new options.md5();\n              hash.update(valueView);\n              _a = [__assign({}, input)];\n              _f = {}, _f[prop.target] = encoded;\n              _b = prop.hash;\n              _d = (_c = options).base64Encoder;\n              return [4 /*yield*/, hash.digest()];\n            case 3:\n              input = __assign.apply(void 0, _a.concat([(_f[_b] = _d.apply(_c, [_g.sent()]), _f)]));\n              _g.label = 4;\n            case 4:\n              properties_1_1 = properties_1.next();\n              return [3 /*break*/, 2];\n            case 5:\n              return [3 /*break*/, 8];\n            case 6:\n              e_1_1 = _g.sent();\n              e_1 = {\n                error: e_1_1\n              };\n              return [3 /*break*/, 8];\n            case 7:\n              try {\n                if (properties_1_1 && !properties_1_1.done && (_e = properties_1.return)) _e.call(properties_1);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n              return [7 /*endfinally*/];\n            case 8:\n              return [2 /*return*/, next(__assign(__assign({}, args), {\n                input: input\n              }))];\n          }\n        });\n      });\n    };\n  };\n}\nexport var ssecMiddlewareOptions = {\n  name: \"ssecMiddleware\",\n  step: \"initialize\",\n  tags: [\"SSE\"],\n  override: true\n};\nexport var getSsecPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";AAaA,OAAM,SAAU,cAAc,CAAC,OAAqC,EAAA;EAApE,IAAA,KAAA,GAAA,IAAA;EACE,OAAO,UACL,IAAoC,EAAA;IACD,OAAA,UACnC,IAAqC,EAAA;MAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;cAEjC,KAAK,GAAA,QAAA,CAAA,CAAA,CAAA,EAAQ,IAAI,CAAC,KAAK,CAAE;cACvB,UAAU,GAAG,CACjB;gBACE,MAAM,EAAE,gBAAgB;gBACxB,IAAI,EAAE;eACP,EACD;gBACE,MAAM,EAAE,0BAA0B;gBAClC,IAAI,EAAE;eACP,CACF;;;;cAEkB,YAAA,GAAA,QAAA,CAAA,UAAU,CAAA,EAAA,cAAA,GAAA,YAAA,CAAA,IAAA,EAAA;;;;cAAlB,IAAI,GAAA,cAAA,CAAA,KAAA;cACP,KAAK,GAA4B,KAAa,CAAC,IAAI,CAAC,MAAM,CAAC;mBAC7D,KAAK,EAAL,OAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;cACI,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,GACvC,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,GAChE,OAAO,KAAK,KAAK,QAAQ,GACzB,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,GAC1B,IAAI,UAAU,CAAC,KAAK,CAAC;cACnB,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC;cAC1C,IAAI,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE;cAC9B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;iCAEhB,KAAa,CAAA,CAAA;0BAChB,IAAI,CAAC,MAAM,CAAA,GAAG,OAAO;cACrB,EAAA,GAAA,IAAI,CAAC,IAAI;cAAG,EAAA,GAAA,CAAA,EAAA,GAAA,OAAO,EAAC,aAAa;cAAC,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,MAAM,EAAE,CAAA;;cAHxD,KAAK,GAAA,QAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAGU,EAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CAAsB,EAAA,CAAA,IAAA,EAAmB,CAAA,CAAC,EAAA,EAAA,EAAA,CAAA,CACxD;;;;;;;;;;;;;;;;;;;;;cAIL,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACN,IAAI,CAAA,EAAA;gBACP,KAAK,EAAA;cAAA,CAAA,CAAA,CACL,CAAA;UAAC;;;KACJ;EAtCoC,CAsCpC;AACH;AAEA,OAAO,IAAM,qBAAqB,GAA6B;EAC7D,IAAI,EAAE,gBAAgB;EACtB,IAAI,EAAE,YAAY;EAClB,IAAI,EAAE,CAAC,KAAK,CAAC;EACb,QAAQ,EAAE;CACX;AAED,OAAO,IAAM,aAAa,GAAG,UAAC,MAAoC,EAAA;EAA0B,OAAC;IAC3F,YAAY,EAAE,UAAC,WAAW,EAAA;MACxB,WAAW,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,qBAAqB,CAAC;IAChE;GACD;AAJ2F,CAI1F","sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n  SourceData,\n} from \"@aws-sdk/types\";\n\nimport { ResolvedSsecMiddlewareConfig } from \"./configuration\";\n\nexport function ssecMiddleware(options: ResolvedSsecMiddlewareConfig): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    let input = { ...args.input };\n    const properties = [\n      {\n        target: \"SSECustomerKey\",\n        hash: \"SSECustomerKeyMD5\",\n      },\n      {\n        target: \"CopySourceSSECustomerKey\",\n        hash: \"CopySourceSSECustomerKeyMD5\",\n      },\n    ];\n\n    for (const prop of properties) {\n      const value: SourceData | undefined = (input as any)[prop.target];\n      if (value) {\n        const valueView = ArrayBuffer.isView(value)\n          ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength)\n          : typeof value === \"string\"\n          ? options.utf8Decoder(value)\n          : new Uint8Array(value);\n        const encoded = options.base64Encoder(valueView);\n        const hash = new options.md5();\n        hash.update(valueView);\n        input = {\n          ...(input as any),\n          [prop.target]: encoded,\n          [prop.hash]: options.base64Encoder(await hash.digest()),\n        };\n      }\n    }\n\n    return next({\n      ...args,\n      input,\n    });\n  };\n}\n\nexport const ssecMiddlewareOptions: InitializeHandlerOptions = {\n  name: \"ssecMiddleware\",\n  step: \"initialize\",\n  tags: [\"SSE\"],\n  override: true,\n};\n\nexport const getSsecPlugin = (config: ResolvedSsecMiddlewareConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}