{"ast":null,"code":"import { useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useNotificationContext } from '../notification';\nimport { useBasename } from '../routing';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\nvar useLogin = function () {\n  var authProvider = useAuthProvider();\n  var location = useLocation();\n  var locationState = location.state;\n  var navigate = useNavigate();\n  var basename = useBasename();\n  var resetNotifications = useNotificationContext().resetNotifications;\n  var nextPathName = locationState && locationState.nextPathname;\n  var nextSearch = locationState && locationState.nextSearch;\n  var afterLoginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.afterLoginUrl));\n  var login = useCallback(function (params, pathName) {\n    if (params === void 0) {\n      params = {};\n    }\n    return authProvider.login(params).then(function (ret) {\n      resetNotifications();\n      if (ret && ret.hasOwnProperty('redirectTo')) {\n        if (ret) {\n          navigate(ret.redirectTo);\n        }\n      } else {\n        var redirectUrl = pathName ? pathName : nextPathName + nextSearch || afterLoginUrl;\n        navigate(redirectUrl);\n      }\n      return ret;\n    });\n  }, [authProvider, navigate, nextPathName, nextSearch, resetNotifications, afterLoginUrl]);\n  var loginWithoutProvider = useCallback(function (_, __) {\n    resetNotifications();\n    navigate(afterLoginUrl);\n    return Promise.resolve();\n  }, [navigate, resetNotifications, afterLoginUrl]);\n  return authProvider ? login : loginWithoutProvider;\n};\nexport default useLogin;","map":{"version":3,"sources":["../../../src/auth/useLogin.ts"],"names":[],"mappings":"AAAA,SAAS,WAAW,QAAQ,OAAO;AACnC,SAAS,WAAW,EAAE,WAAW,QAAQ,kBAAkB;AAE3D,SAAS,sBAAsB,QAAQ,iBAAiB;AACxD,SAAS,WAAW,QAAQ,YAAY;AACxC,OAAO,eAAe,IAAI,iBAAiB,QAAQ,mBAAmB;AACtE,SAAS,mBAAmB,QAAQ,0BAA0B;AAE9D;;;;;;;;;;;;;;;;;;;;;;AAsBG;AACH,IAAM,QAAQ,GAAG,YAAA;EACb,IAAM,YAAY,GAAG,eAAe,EAAE;EACtC,IAAM,QAAQ,GAAG,WAAW,EAAE;EAC9B,IAAM,aAAa,GAAG,QAAQ,CAAC,KAAY;EAC3C,IAAM,QAAQ,GAAG,WAAW,EAAE;EAC9B,IAAM,QAAQ,GAAG,WAAW,EAAE;EACtB,IAAA,kBAAkB,GAAK,sBAAsB,EAAE,CAAA,kBAA7B;EAC1B,IAAM,YAAY,GAAG,aAAa,IAAI,aAAa,CAAC,YAAY;EAChE,IAAM,UAAU,GAAG,aAAa,IAAI,aAAa,CAAC,UAAU;EAC5D,IAAM,aAAa,GAAG,mBAAmB,CACrC,EAAA,CAAA,MAAA,CAAG,QAAQ,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,iBAAiB,CAAC,aAAa,CAAE,CACnD;EAED,IAAM,KAAK,GAAG,WAAW,CACrB,UAAC,MAAgB,EAAE,QAAQ,EAAA;IAA1B,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,CAAA,CAAgB;IAAA;IACb,OAAA,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG,EAAA;MAC/B,kBAAkB,EAAE;MACpB,IAAI,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;QACzC,IAAI,GAAG,EAAE;UACL,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC;QAC3B;OACJ,MAAM;QACH,IAAM,WAAW,GAAG,QAAQ,GACtB,QAAQ,GACR,YAAY,GAAG,UAAU,IAAI,aAAa;QAChD,QAAQ,CAAC,WAAW,CAAC;MACxB;MACD,OAAO,GAAG;IACd,CAAC,CAAC;EAbF,CAaE,EACN,CACI,YAAY,EACZ,QAAQ,EACR,YAAY,EACZ,UAAU,EACV,kBAAkB,EAClB,aAAa,CAChB,CACJ;EAED,IAAM,oBAAoB,GAAG,WAAW,CACpC,UAAC,CAAC,EAAE,EAAE,EAAA;IACF,kBAAkB,EAAE;IACpB,QAAQ,CAAC,aAAa,CAAC;IACvB,OAAO,OAAO,CAAC,OAAO,EAAE;EAC5B,CAAC,EACD,CAAC,QAAQ,EAAE,kBAAkB,EAAE,aAAa,CAAC,CAChD;EAED,OAAO,YAAY,GAAG,KAAK,GAAG,oBAAoB;AACtD,CAAC;AAYD,eAAe,QAAQ","sourceRoot":"","sourcesContent":["import { useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useNotificationContext } from '../notification';\nimport { useBasename } from '../routing';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\nvar useLogin = function () {\n    var authProvider = useAuthProvider();\n    var location = useLocation();\n    var locationState = location.state;\n    var navigate = useNavigate();\n    var basename = useBasename();\n    var resetNotifications = useNotificationContext().resetNotifications;\n    var nextPathName = locationState && locationState.nextPathname;\n    var nextSearch = locationState && locationState.nextSearch;\n    var afterLoginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.afterLoginUrl));\n    var login = useCallback(function (params, pathName) {\n        if (params === void 0) { params = {}; }\n        return authProvider.login(params).then(function (ret) {\n            resetNotifications();\n            if (ret && ret.hasOwnProperty('redirectTo')) {\n                if (ret) {\n                    navigate(ret.redirectTo);\n                }\n            }\n            else {\n                var redirectUrl = pathName\n                    ? pathName\n                    : nextPathName + nextSearch || afterLoginUrl;\n                navigate(redirectUrl);\n            }\n            return ret;\n        });\n    }, [\n        authProvider,\n        navigate,\n        nextPathName,\n        nextSearch,\n        resetNotifications,\n        afterLoginUrl,\n    ]);\n    var loginWithoutProvider = useCallback(function (_, __) {\n        resetNotifications();\n        navigate(afterLoginUrl);\n        return Promise.resolve();\n    }, [navigate, resetNotifications, afterLoginUrl]);\n    return authProvider ? login : loginWithoutProvider;\n};\nexport default useLogin;\n//# sourceMappingURL=useLogin.js.map"]},"metadata":{},"sourceType":"module"}