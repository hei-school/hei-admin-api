{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar constants_1 = require(\"./constants\");\nvar RawSha256_1 = require(\"./RawSha256\");\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\nvar Sha256 = /** @class */function () {\n  function Sha256(secret) {\n    this.hash = new RawSha256_1.RawSha256();\n    if (secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n      this.hash.update(inner);\n      this.outer.update(outer);\n      // overwrite the copied key in memory\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n  Sha256.prototype.update = function (toHash) {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n      return this.outer.digest();\n    }\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  Sha256.prototype.digest = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2 /*return*/, this.digestSync()];\n      });\n    });\n  };\n  return Sha256;\n}();\nexports.Sha256 = Sha256;\nfunction bufferFromSecret(secret) {\n  var input = convertToBuffer(secret);\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\nfunction isEmptyData(data) {\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n  return data.byteLength === 0;\n}\nfunction convertToBuffer(data) {\n  if (typeof data === \"string\") {\n    return util_utf8_browser_1.fromUtf8(data);\n  }\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n  return new Uint8Array(data);\n}","map":{"version":3,"sources":["../src/jsSha256.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar constants_1 = require(\"./constants\");\nvar RawSha256_1 = require(\"./RawSha256\");\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\nvar Sha256 = /** @class */ (function () {\n    function Sha256(secret) {\n        this.hash = new RawSha256_1.RawSha256();\n        if (secret) {\n            this.outer = new RawSha256_1.RawSha256();\n            var inner = bufferFromSecret(secret);\n            var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n            outer.set(inner);\n            for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n                inner[i] ^= 0x36;\n                outer[i] ^= 0x5c;\n            }\n            this.hash.update(inner);\n            this.outer.update(outer);\n            // overwrite the copied key in memory\n            for (var i = 0; i < inner.byteLength; i++) {\n                inner[i] = 0;\n            }\n        }\n    }\n    Sha256.prototype.update = function (toHash) {\n        if (isEmptyData(toHash) || this.error) {\n            return;\n        }\n        try {\n            this.hash.update(convertToBuffer(toHash));\n        }\n        catch (e) {\n            this.error = e;\n        }\n    };\n    /* This synchronous method keeps compatibility\n     * with the v2 aws-sdk.\n     */\n    Sha256.prototype.digestSync = function () {\n        if (this.error) {\n            throw this.error;\n        }\n        if (this.outer) {\n            if (!this.outer.finished) {\n                this.outer.update(this.hash.digest());\n            }\n            return this.outer.digest();\n        }\n        return this.hash.digest();\n    };\n    /* The underlying digest method here is synchronous.\n     * To keep the same interface with the other hash functions\n     * the default is to expose this as an async method.\n     * However, it can sometimes be useful to have a sync method.\n     */\n    Sha256.prototype.digest = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this.digestSync()];\n            });\n        });\n    };\n    return Sha256;\n}());\nexports.Sha256 = Sha256;\nfunction bufferFromSecret(secret) {\n    var input = convertToBuffer(secret);\n    if (input.byteLength > constants_1.BLOCK_SIZE) {\n        var bufferHash = new RawSha256_1.RawSha256();\n        bufferHash.update(input);\n        input = bufferHash.digest();\n    }\n    var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n    buffer.set(input);\n    return buffer;\n}\nfunction isEmptyData(data) {\n    if (typeof data === \"string\") {\n        return data.length === 0;\n    }\n    return data.byteLength === 0;\n}\nfunction convertToBuffer(data) {\n    if (typeof data === \"string\") {\n        return util_utf8_browser_1.fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\n//# sourceMappingURL=jsSha256.js.map"]},"metadata":{},"sourceType":"script"}