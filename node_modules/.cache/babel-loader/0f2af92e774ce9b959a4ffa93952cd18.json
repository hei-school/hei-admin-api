{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography } from '@mui/material';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nexport var DateField = memo(function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    locales = props.locales,\n    options = props.options,\n    _a = props.showTime,\n    showTime = _a === void 0 ? false : _a,\n    _b = props.showDate,\n    showDate = _b === void 0 ? true : _b,\n    source = props.source,\n    rest = __rest(props, [\"className\", \"emptyText\", \"locales\", \"options\", \"showTime\", \"showDate\", \"source\"]);\n  var translate = useTranslate();\n  if (!showTime && !showDate) {\n    throw new Error('<DateField> cannot have showTime and showDate false at the same time');\n  }\n  var record = useRecordContext(props);\n  if (!record) {\n    return null;\n  }\n  var value = get(record, source);\n  if (value == null || value === '') {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var date = value instanceof Date ? value : new Date(value);\n  var dateOptions = options;\n  if (typeof value === 'string' && value.length <= 10 && !showTime && !options) {\n    // Input is a date string (e.g. '2022-02-15') without time and time zone.\n    // Force timezone to UTC to fix issue with people in negative time zones\n    // who may see a different date when calling toLocaleDateString().\n    dateOptions = {\n      timeZone: 'UTC'\n    };\n  }\n  var dateString = '';\n  if (showTime && showDate) {\n    dateString = toLocaleStringSupportsLocales ? date.toLocaleString(locales, options) : date.toLocaleString();\n  } else if (showDate) {\n    dateString = toLocaleStringSupportsLocales ? date.toLocaleDateString(locales, dateOptions) : date.toLocaleDateString();\n  } else if (showTime) {\n    dateString = toLocaleStringSupportsLocales ? date.toLocaleTimeString(locales, options) : date.toLocaleTimeString();\n  }\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), dateString);\n});\nDateField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object,\n  showTime: PropTypes.bool,\n  showDate: PropTypes.bool\n});\nDateField.displayName = 'DateField';\nvar toLocaleStringSupportsLocales = function () {\n  // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n  try {\n    new Date().toLocaleString('i');\n  } catch (error) {\n    return error instanceof RangeError;\n  }\n  return false;\n}();","map":{"version":3,"sources":["../../../src/field/DateField.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography } from '@mui/material';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nexport var DateField = memo(function (props) {\n    var className = props.className, emptyText = props.emptyText, locales = props.locales, options = props.options, _a = props.showTime, showTime = _a === void 0 ? false : _a, _b = props.showDate, showDate = _b === void 0 ? true : _b, source = props.source, rest = __rest(props, [\"className\", \"emptyText\", \"locales\", \"options\", \"showTime\", \"showDate\", \"source\"]);\n    var translate = useTranslate();\n    if (!showTime && !showDate) {\n        throw new Error('<DateField> cannot have showTime and showDate false at the same time');\n    }\n    var record = useRecordContext(props);\n    if (!record) {\n        return null;\n    }\n    var value = get(record, source);\n    if (value == null || value === '') {\n        return emptyText ? (React.createElement(Typography, __assign({ component: \"span\", variant: \"body2\", className: className }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, { _: emptyText }))) : null;\n    }\n    var date = value instanceof Date ? value : new Date(value);\n    var dateOptions = options;\n    if (typeof value === 'string' &&\n        value.length <= 10 &&\n        !showTime &&\n        !options) {\n        // Input is a date string (e.g. '2022-02-15') without time and time zone.\n        // Force timezone to UTC to fix issue with people in negative time zones\n        // who may see a different date when calling toLocaleDateString().\n        dateOptions = { timeZone: 'UTC' };\n    }\n    var dateString = '';\n    if (showTime && showDate) {\n        dateString = toLocaleStringSupportsLocales\n            ? date.toLocaleString(locales, options)\n            : date.toLocaleString();\n    }\n    else if (showDate) {\n        dateString = toLocaleStringSupportsLocales\n            ? date.toLocaleDateString(locales, dateOptions)\n            : date.toLocaleDateString();\n    }\n    else if (showTime) {\n        dateString = toLocaleStringSupportsLocales\n            ? date.toLocaleTimeString(locales, options)\n            : date.toLocaleTimeString();\n    }\n    return (React.createElement(Typography, __assign({ component: \"span\", variant: \"body2\", className: className }, sanitizeFieldRestProps(rest)), dateString));\n});\nDateField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), { locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]), options: PropTypes.object, showTime: PropTypes.bool, showDate: PropTypes.bool });\nDateField.displayName = 'DateField';\nvar toLocaleStringSupportsLocales = (function () {\n    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n    try {\n        new Date().toLocaleString('i');\n    }\n    catch (error) {\n        return error instanceof RangeError;\n    }\n    return false;\n})();\n//# sourceMappingURL=DateField.js.map"]},"metadata":{},"sourceType":"module"}