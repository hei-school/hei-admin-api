{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport var useFormGroup = function (name) {\n  var _a = useFormState(),\n    dirtyFields = _a.dirtyFields,\n    touchedFields = _a.touchedFields,\n    errors = _a.errors;\n  var formGroups = useFormGroups();\n  var _b = useState({\n      errors: undefined,\n      isDirty: false,\n      isTouched: false,\n      isValid: true\n    }),\n    state = _b[0],\n    setState = _b[1];\n  var updateGroupState = useCallback(function () {\n    var fields = formGroups.getGroupFields(name);\n    var fieldStates = fields.map(function (field) {\n      return {\n        name: field,\n        error: get(errors, field, undefined),\n        isDirty: get(dirtyFields, field, false),\n        isValid: get(errors, field, undefined) == undefined,\n        isTouched: get(touchedFields, field, false)\n      };\n    }).filter(function (fieldState) {\n      return fieldState != undefined;\n    }); // eslint-disable-line\n    var newState = getFormGroupState(fieldStates);\n    setState(function (oldState) {\n      if (!isEqual(oldState, newState)) {\n        return newState;\n      }\n      return oldState;\n    });\n  }, [dirtyFields, errors, touchedFields, formGroups, name]);\n  useEffect(function () {\n    updateGroupState();\n  },\n  // eslint-disable-next-line\n  [\n  // eslint-disable-next-line\n  JSON.stringify({\n    dirtyFields: dirtyFields,\n    errors: errors,\n    touchedFields: touchedFields\n  }), updateGroupState]);\n  useEffect(function () {\n    // Whenever the group content changes (input are added or removed)\n    // we must update its state\n    return formGroups.subscribe(name, function () {\n      updateGroupState();\n    });\n  }, [formGroups, name, updateGroupState]);\n  return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport var getFormGroupState = function (fieldStates) {\n  return fieldStates.reduce(function (acc, fieldState) {\n    var errors = acc.errors || {};\n    if (fieldState.error) {\n      errors[fieldState.name] = fieldState.error;\n    }\n    var newState = {\n      isDirty: acc.isDirty || fieldState.isDirty,\n      errors: errors,\n      isTouched: acc.isTouched || fieldState.isTouched,\n      isValid: acc.isValid && fieldState.isValid\n    };\n    return newState;\n  }, {\n    isDirty: false,\n    errors: undefined,\n    isValid: true,\n    isTouched: false\n  });\n};","map":{"version":3,"sources":["../../../src/form/useFormGroup.ts"],"names":[],"mappings":"AAAA,SAAS,WAAW,EAAE,SAAS,EAAE,QAAQ,QAAQ,OAAO;AACxD,OAAO,GAAG,MAAM,YAAY;AAC5B,OAAO,OAAO,MAAM,gBAAgB;AACpC,SAAS,YAAY,QAAQ,iBAAiB;AAC9C,SAAS,aAAa,QAAQ,iBAAiB;AAiB/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CG;AACH,OAAO,IAAM,YAAY,GAAG,UAAC,IAAY,EAAA;EAC/B,IAAA,EAAA,GAAyC,YAAY,EAAE;IAArD,WAAW,GAAA,EAAA,CAAA,WAAA;IAAE,aAAa,GAAA,EAAA,CAAA,aAAA;IAAE,MAAM,GAAA,EAAA,CAAA,MAAmB;EAC7D,IAAM,UAAU,GAAG,aAAa,EAAE;EAC5B,IAAA,EAAA,GAAoB,QAAQ,CAAiB;MAC/C,MAAM,EAAE,SAAS;MACjB,OAAO,EAAE,KAAK;MACd,SAAS,EAAE,KAAK;MAChB,OAAO,EAAE;KACZ,CAAC;IALK,KAAK,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,CAAA,CAKpB;EAEF,IAAM,gBAAgB,GAAG,WAAW,CAAC,YAAA;IACjC,IAAM,MAAM,GAAG,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC;IAC9C,IAAM,WAAW,GAAG,MAAM,CACrB,GAAG,CAAa,UAAA,KAAK,EAAA;MAClB,OAAO;QACH,IAAI,EAAE,KAAK;QACX,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC;QACpC,OAAO,EAAE,GAAG,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,CAAC;QACvC,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,IAAI,SAAS;QACnD,SAAS,EAAE,GAAG,CAAC,aAAa,EAAE,KAAK,EAAE,KAAK;OAC7C;IACL,CAAC,CAAC,CACD,MAAM,CAAC,UAAA,UAAU,EAAA;MAAI,OAAA,UAAU,IAAI,SAAS;IAAvB,CAAuB,CAAC,CAAC,CAAC;IAEpD,IAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,CAAC;IAC/C,QAAQ,CAAC,UAAA,QAAQ,EAAA;MACb,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;QAC9B,OAAO,QAAQ;MAClB;MAED,OAAO,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,aAAa,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;EAE1D,SAAS,CACL,YAAA;IACI,gBAAgB,EAAE;EACtB,CAAC;EACD;EACA;EACI;EACA,IAAI,CAAC,SAAS,CAAC;IAAE,WAAW,EAAA,WAAA;IAAE,MAAM,EAAA,MAAA;IAAE,aAAa,EAAA;EAAA,CAAE,CAAC,EACtD,gBAAgB,CACnB,CACJ;EAED,SAAS,CAAC,YAAA;IACN;IACA;IACA,OAAO,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,YAAA;MAC9B,gBAAgB,EAAE;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,CAAC,UAAU,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;EAExC,OAAO,KAAK;AAChB,CAAC;AAED;;;;;AAKG;AACH,OAAO,IAAM,iBAAiB,GAAG,UAC7B,WAAyB,EAAA;EAEzB,OAAO,WAAW,CAAC,MAAM,CACrB,UAAC,GAAG,EAAE,UAAU,EAAA;IACZ,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,IAAI,CAAA,CAAE;IAE7B,IAAI,UAAU,CAAC,KAAK,EAAE;MAClB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK;IAC7C;IAED,IAAM,QAAQ,GAAG;MACb,OAAO,EAAE,GAAG,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO;MAC1C,MAAM,EAAA,MAAA;MACN,SAAS,EAAE,GAAG,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS;MAChD,OAAO,EAAE,GAAG,CAAC,OAAO,IAAI,UAAU,CAAC;KACtC;IAED,OAAO,QAAQ;EACnB,CAAC,EACD;IACI,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,SAAS;IACjB,OAAO,EAAE,IAAI;IACb,SAAS,EAAE;GACd,CACJ;AACL,CAAC","sourceRoot":"","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport var useFormGroup = function (name) {\n    var _a = useFormState(), dirtyFields = _a.dirtyFields, touchedFields = _a.touchedFields, errors = _a.errors;\n    var formGroups = useFormGroups();\n    var _b = useState({\n        errors: undefined,\n        isDirty: false,\n        isTouched: false,\n        isValid: true,\n    }), state = _b[0], setState = _b[1];\n    var updateGroupState = useCallback(function () {\n        var fields = formGroups.getGroupFields(name);\n        var fieldStates = fields\n            .map(function (field) {\n            return {\n                name: field,\n                error: get(errors, field, undefined),\n                isDirty: get(dirtyFields, field, false),\n                isValid: get(errors, field, undefined) == undefined,\n                isTouched: get(touchedFields, field, false),\n            };\n        })\n            .filter(function (fieldState) { return fieldState != undefined; }); // eslint-disable-line\n        var newState = getFormGroupState(fieldStates);\n        setState(function (oldState) {\n            if (!isEqual(oldState, newState)) {\n                return newState;\n            }\n            return oldState;\n        });\n    }, [dirtyFields, errors, touchedFields, formGroups, name]);\n    useEffect(function () {\n        updateGroupState();\n    }, \n    // eslint-disable-next-line\n    [\n        // eslint-disable-next-line\n        JSON.stringify({ dirtyFields: dirtyFields, errors: errors, touchedFields: touchedFields }),\n        updateGroupState,\n    ]);\n    useEffect(function () {\n        // Whenever the group content changes (input are added or removed)\n        // we must update its state\n        return formGroups.subscribe(name, function () {\n            updateGroupState();\n        });\n    }, [formGroups, name, updateGroupState]);\n    return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport var getFormGroupState = function (fieldStates) {\n    return fieldStates.reduce(function (acc, fieldState) {\n        var errors = acc.errors || {};\n        if (fieldState.error) {\n            errors[fieldState.name] = fieldState.error;\n        }\n        var newState = {\n            isDirty: acc.isDirty || fieldState.isDirty,\n            errors: errors,\n            isTouched: acc.isTouched || fieldState.isTouched,\n            isValid: acc.isValid && fieldState.isValid,\n        };\n        return newState;\n    }, {\n        isDirty: false,\n        errors: undefined,\n        isValid: true,\n        isTouched: false,\n    });\n};\n//# sourceMappingURL=useFormGroup.js.map"]},"metadata":{},"sourceType":"module"}