{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutBucketNotificationConfigurationRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketNotificationConfigurationCommand, serializeAws_restXmlPutBucketNotificationConfigurationCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Enables notifications of specified events for a bucket. For more information about event\n *          notifications, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Event\n *             Notifications</a>.</p>\n *\n *          <p>Using this API, you can replace an existing notification configuration. The\n *          configuration is an XML file that defines the event types that you want Amazon S3 to publish and\n *          the destination where you want Amazon S3 to publish an event notification when it detects an\n *          event of the specified type.</p>\n *\n *          <p>By default, your bucket has no event notifications configured. That is, the notification\n *          configuration will be an empty <code>NotificationConfiguration</code>.</p>\n *\n *          <p>\n *             <code><NotificationConfiguration></code>\n *          </p>\n *          <p>\n *             <code></NotificationConfiguration></code>\n *          </p>\n *          <p>This operation replaces the existing notification configuration with the configuration\n *          you include in the request body.</p>\n *\n *          <p>After Amazon S3 receives this request, it first verifies that any Amazon Simple Notification\n *          Service (Amazon SNS) or Amazon Simple Queue Service (Amazon SQS) destination exists, and\n *          that the bucket owner has permission to publish to it by sending a test notification. In\n *          the case of AWS Lambda destinations, Amazon S3 verifies that the Lambda function permissions\n *          grant Amazon S3 permission to invoke the function from the Amazon S3 bucket. For more information,\n *          see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Notifications for Amazon S3\n *             Events</a>.</p>\n *\n *          <p>You can disable notifications by adding the empty NotificationConfiguration\n *          element.</p>\n *\n *          <p>By default, only the bucket owner can configure notifications on a bucket. However,\n *          bucket owners can use a bucket policy to grant permission to other users to set this\n *          configuration with <code>s3:PutBucketNotification</code> permission.</p>\n *\n *          <note>\n *             <p>The PUT notification is an atomic operation. For example, suppose your notification\n *             configuration includes SNS topic, SQS queue, and Lambda function configurations. When\n *             you send a PUT request with this configuration, Amazon S3 sends test messages to your SNS\n *             topic. If the message fails, the entire PUT operation will fail, and Amazon S3 will not add\n *             the configuration to your bucket.</p>\n *          </note>\n *\n *          <p>\n *             <b>Responses</b>\n *          </p>\n *          <p>If the configuration in the request body includes only one\n *             <code>TopicConfiguration</code> specifying only the\n *             <code>s3:ReducedRedundancyLostObject</code> event type, the response will also include\n *          the <code>x-amz-sns-test-message-id</code> header containing the message ID of the test\n *          notification sent to the topic.</p>\n *\n *          <p>The following operation is related to\n *          <code>PutBucketNotificationConfiguration</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketNotificationConfiguration.html\">GetBucketNotificationConfiguration</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nvar PutBucketNotificationConfigurationCommand = /** @class */function (_super) {\n  __extends(PutBucketNotificationConfigurationCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function PutBucketNotificationConfigurationCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  PutBucketNotificationConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutBucketNotificationConfigurationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutBucketNotificationConfigurationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  PutBucketNotificationConfigurationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutBucketNotificationConfigurationCommand(input, context);\n  };\n  PutBucketNotificationConfigurationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutBucketNotificationConfigurationCommand(output, context);\n  };\n  return PutBucketNotificationConfigurationCommand;\n}($Command);\nexport { PutBucketNotificationConfigurationCommand };","map":{"version":3,"sources":["../../../commands/PutBucketNotificationConfigurationCommand.ts"],"names":[],"mappings":";AACA,SAAS,yCAAyC,QAAQ,oBAAoB;AAC9E,SACE,+DAA+D,EAC/D,6DAA6D,QACxD,0BAA0B;AACjC,SAAS,uBAAuB,QAAQ,qCAAqC;AAC7E,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DG;AACH,IAAA,yCAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+D,SAAA,CAAA,yCAAA,EAAA,MAAA,CAAA;EAK7D;EACA;EAEA,SAAA,yCAAA,CAAqB,KAAqD,EAAA;IAA1E,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,yCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAAqC,EACrC,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACzF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;IAEhE,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,UAAU;IAC7B,IAAM,WAAW,GAAG,2CAA2C;IAC/D,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,yCAAyC,CAAC,kBAAkB;MACrF,wBAAwB,EAAE,UAAC,MAAW,EAAA;QAAK,OAAA,MAAM;MAAN;KAC5C;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,yCAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UACE,KAAqD,EACrD,OAAuB,EAAA;IAEvB,OAAO,6DAA6D,CAAC,KAAK,EAAE,OAAO,CAAC;EACtF,CAAC;EAEO,yCAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UACE,MAAsB,EACtB,OAAuB,EAAA;IAEvB,OAAO,+DAA+D,CAAC,MAAM,EAAE,OAAO,CAAC;EACzF,CAAC;EAIH,OAAA,yCAAC;AAAD,CAAC,CA7D8D,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { PutBucketNotificationConfigurationRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketNotificationConfigurationCommand, serializeAws_restXmlPutBucketNotificationConfigurationCommand, } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Enables notifications of specified events for a bucket. For more information about event\n *          notifications, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Event\n *             Notifications</a>.</p>\n *\n *          <p>Using this API, you can replace an existing notification configuration. The\n *          configuration is an XML file that defines the event types that you want Amazon S3 to publish and\n *          the destination where you want Amazon S3 to publish an event notification when it detects an\n *          event of the specified type.</p>\n *\n *          <p>By default, your bucket has no event notifications configured. That is, the notification\n *          configuration will be an empty <code>NotificationConfiguration</code>.</p>\n *\n *          <p>\n *             <code><NotificationConfiguration></code>\n *          </p>\n *          <p>\n *             <code></NotificationConfiguration></code>\n *          </p>\n *          <p>This operation replaces the existing notification configuration with the configuration\n *          you include in the request body.</p>\n *\n *          <p>After Amazon S3 receives this request, it first verifies that any Amazon Simple Notification\n *          Service (Amazon SNS) or Amazon Simple Queue Service (Amazon SQS) destination exists, and\n *          that the bucket owner has permission to publish to it by sending a test notification. In\n *          the case of AWS Lambda destinations, Amazon S3 verifies that the Lambda function permissions\n *          grant Amazon S3 permission to invoke the function from the Amazon S3 bucket. For more information,\n *          see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Notifications for Amazon S3\n *             Events</a>.</p>\n *\n *          <p>You can disable notifications by adding the empty NotificationConfiguration\n *          element.</p>\n *\n *          <p>By default, only the bucket owner can configure notifications on a bucket. However,\n *          bucket owners can use a bucket policy to grant permission to other users to set this\n *          configuration with <code>s3:PutBucketNotification</code> permission.</p>\n *\n *          <note>\n *             <p>The PUT notification is an atomic operation. For example, suppose your notification\n *             configuration includes SNS topic, SQS queue, and Lambda function configurations. When\n *             you send a PUT request with this configuration, Amazon S3 sends test messages to your SNS\n *             topic. If the message fails, the entire PUT operation will fail, and Amazon S3 will not add\n *             the configuration to your bucket.</p>\n *          </note>\n *\n *          <p>\n *             <b>Responses</b>\n *          </p>\n *          <p>If the configuration in the request body includes only one\n *             <code>TopicConfiguration</code> specifying only the\n *             <code>s3:ReducedRedundancyLostObject</code> event type, the response will also include\n *          the <code>x-amz-sns-test-message-id</code> header containing the message ID of the test\n *          notification sent to the topic.</p>\n *\n *          <p>The following operation is related to\n *          <code>PutBucketNotificationConfiguration</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketNotificationConfiguration.html\">GetBucketNotificationConfiguration</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nvar PutBucketNotificationConfigurationCommand = /** @class */ (function (_super) {\n    __extends(PutBucketNotificationConfigurationCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function PutBucketNotificationConfigurationCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    PutBucketNotificationConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"S3Client\";\n        var commandName = \"PutBucketNotificationConfigurationCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: PutBucketNotificationConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: function (output) { return output; },\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    PutBucketNotificationConfigurationCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restXmlPutBucketNotificationConfigurationCommand(input, context);\n    };\n    PutBucketNotificationConfigurationCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restXmlPutBucketNotificationConfigurationCommand(output, context);\n    };\n    return PutBucketNotificationConfigurationCommand;\n}($Command));\nexport { PutBucketNotificationConfigurationCommand };\n//# sourceMappingURL=PutBucketNotificationConfigurationCommand.js.map"]},"metadata":{},"sourceType":"module"}