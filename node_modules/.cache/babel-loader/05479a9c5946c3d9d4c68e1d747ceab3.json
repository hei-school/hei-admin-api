{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetLexiconInput, GetLexiconOutput } from \"../models/models_0\";\nimport { deserializeAws_restJson1GetLexiconCommand, serializeAws_restJson1GetLexiconCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns the content of the specified pronunciation lexicon stored in an AWS Region. For\n *       more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\n *         Lexicons</a>.</p>\n */\nvar GetLexiconCommand = /** @class */function (_super) {\n  __extends(GetLexiconCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetLexiconCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetLexiconCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"PollyClient\";\n    var commandName = \"GetLexiconCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetLexiconInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetLexiconOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetLexiconCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1GetLexiconCommand(input, context);\n  };\n  GetLexiconCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1GetLexiconCommand(output, context);\n  };\n  return GetLexiconCommand;\n}($Command);\nexport { GetLexiconCommand };","map":{"version":3,"sources":["../../../commands/GetLexiconCommand.ts"],"names":[],"mappings":";AACA,SAAS,eAAe,EAAE,gBAAgB,QAAQ,oBAAoB;AACtE,SACE,yCAAyC,EACzC,uCAAuC,QAClC,4BAA4B;AACnC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;AAIG;AACH,IAAA,iBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAuC,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;EAKrC;EACA;EAEA,SAAA,iBAAA,CAAqB,KAA6B,EAAA;IAAlD,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,iBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAAwC,EACxC,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,aAAa;IAChC,IAAM,WAAW,GAAG,mBAAmB;IACvC,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,eAAe,CAAC,kBAAkB;MAC3D,wBAAwB,EAAE,gBAAgB,CAAC;KAC5C;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,iBAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAA6B,EAAE,OAAuB,EAAA;IACtE,OAAO,uCAAuC,CAAC,KAAK,EAAE,OAAO,CAAC;EAChE,CAAC;EAEO,iBAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,yCAAyC,CAAC,MAAM,EAAE,OAAO,CAAC;EACnE,CAAC;EAIH,OAAA,iBAAC;AAAD,CAAC,CAtDsC,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetLexiconInput, GetLexiconOutput } from \"../models/models_0\";\nimport { deserializeAws_restJson1GetLexiconCommand, serializeAws_restJson1GetLexiconCommand, } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns the content of the specified pronunciation lexicon stored in an AWS Region. For\n *       more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\n *         Lexicons</a>.</p>\n */\nvar GetLexiconCommand = /** @class */ (function (_super) {\n    __extends(GetLexiconCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetLexiconCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetLexiconCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"PollyClient\";\n        var commandName = \"GetLexiconCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetLexiconInput.filterSensitiveLog,\n            outputFilterSensitiveLog: GetLexiconOutput.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetLexiconCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restJson1GetLexiconCommand(input, context);\n    };\n    GetLexiconCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restJson1GetLexiconCommand(output, context);\n    };\n    return GetLexiconCommand;\n}($Command));\nexport { GetLexiconCommand };\n//# sourceMappingURL=GetLexiconCommand.js.map"]},"metadata":{},"sourceType":"module"}