{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nexport var TextField = memo(function (props) {\n  var className = props.className,\n    source = props.source,\n    emptyText = props.emptyText,\n    rest = __rest(props, [\"className\", \"source\", \"emptyText\"]);\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), value != null && typeof value !== 'string' ? JSON.stringify(value) : value || emptyText);\n});\n// what? TypeScript loses the displayName if we don't set it explicitly\nTextField.displayName = 'TextField';\nTextField.propTypes = __assign(__assign({}, Typography.propTypes), fieldPropTypes);","map":{"version":3,"sources":["../../../src/field/TextField.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,IAAI,QAAyB,OAAO;AAC7C,OAAO,GAAG,MAAM,YAAY;AAC5B,OAAO,UAA+B,MAAM,0BAA0B;AACtE,SAAS,gBAAgB,QAAQ,SAAS;AAE1C,SAAS,sBAAsB,QAAQ,0BAA0B;AACjE,SAA+C,cAAc,QAAQ,SAAS;AAE9E,OAAO,IAAM,SAAS,GAAuB,IAAI,CAAC,UAAA,KAAK,EAAA;EAC3C,IAAA,SAAS,GAAiC,KAAK,CAAA,SAAtC;IAAE,MAAM,GAAyB,KAAK,CAAA,MAA9B;IAAE,SAAS,GAAc,KAAK,CAAA,SAAnB;IAAK,IAAI,GAAA,MAAA,CAAK,KAAK,EAAjD,CAAA,WAAA,EAAA,QAAA,EAAA,WAAA,CAAyC,CAAF;EAC7C,IAAM,MAAM,GAAG,gBAAgB,CAAC,KAAK,CAAC;EACtC,IAAM,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC;EAEjC,OACI,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA,QAAA,CAAA;IACP,SAAS,EAAC,MAAM;IAChB,OAAO,EAAC,OAAO;IACf,SAAS,EAAE;EAAS,CAAA,EAChB,sBAAsB,CAAC,IAAI,CAAC,CAAA,EAE/B,KAAK,IAAI,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,GACrC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GACrB,KAAK,IAAI,SAAS,CACf;AAErB,CAAC,CAAC;AAEF;AACA,SAAS,CAAC,WAAW,GAAG,WAAW;AAEnC,SAAS,CAAC,SAAS,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAEZ,UAAU,CAAC,SAAS,CAAA,EACpB,cAAc,CACpB","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nexport var TextField = memo(function (props) {\n    var className = props.className, source = props.source, emptyText = props.emptyText, rest = __rest(props, [\"className\", \"source\", \"emptyText\"]);\n    var record = useRecordContext(props);\n    var value = get(record, source);\n    return (React.createElement(Typography, __assign({ component: \"span\", variant: \"body2\", className: className }, sanitizeFieldRestProps(rest)), value != null && typeof value !== 'string'\n        ? JSON.stringify(value)\n        : value || emptyText));\n});\n// what? TypeScript loses the displayName if we don't set it explicitly\nTextField.displayName = 'TextField';\nTextField.propTypes = __assign(__assign({}, Typography.propTypes), fieldPropTypes);\n//# sourceMappingURL=TextField.js.map"]},"metadata":{},"sourceType":"module"}