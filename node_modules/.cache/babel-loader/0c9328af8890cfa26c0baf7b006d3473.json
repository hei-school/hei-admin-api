{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { Logger, Mutex } from '@aws-amplify/core';\nimport PushStream from 'zen-push';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType, QueryOne, isTargetNameAssociation } from '../types';\nimport { isModelConstructor, STORAGE, validatePredicate, valuesEqual } from '../util';\nimport { getIdentifierValue } from '../sync/utils';\nimport getDefaultAdapter from './adapter/getDefaultAdapter';\nvar logger = new Logger('DataStore');\nvar StorageClass = /** @class */function () {\n  function StorageClass(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId) {\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.getModelConstructorByModelName = getModelConstructorByModelName;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.adapter = adapter;\n    this.sessionId = sessionId;\n    this.adapter = this.adapter || getDefaultAdapter();\n    this.pushStream = new PushStream();\n  }\n  StorageClass.getNamespace = function () {\n    var namespace = {\n      name: STORAGE,\n      relationships: {},\n      enums: {},\n      models: {},\n      nonModels: {}\n    };\n    return namespace;\n  };\n  StorageClass.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var resolve, reject;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.initialized !== undefined)) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.initialized];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n          case 2:\n            logger.debug('Starting Storage');\n            this.initialized = new Promise(function (res, rej) {\n              resolve = res;\n              reject = rej;\n            });\n            this.adapter.setUp(this.schema, this.namespaceResolver, this.modelInstanceCreator, this.getModelConstructorByModelName, this.sessionId).then(resolve, reject);\n            return [4 /*yield*/, this.initialized];\n          case 3:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.save = function (model, condition, mutator, patchesTuple) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.adapter.save(model, condition)];\n          case 2:\n            result = _a.sent();\n            result.forEach(function (r) {\n              var _a = __read(r, 2),\n                savedElement = _a[0],\n                opType = _a[1];\n              // truthy when save is called by the Merger\n              var syncResponse = !!mutator;\n              var updateMutationInput;\n              // don't attempt to calc mutation input when storage.save\n              // is called by Merger, i.e., when processing an AppSync response\n              if (opType === OpType.UPDATE && !syncResponse) {\n                //\n                // TODO: LOOK!!!\n                // the `model` used here is in effect regardless of what model\n                // comes back from adapter.save().\n                // Prior to fix, SQLite adapter had been returning two models\n                // of different types, resulting in invalid outbox entries.\n                //\n                // the bug is essentially fixed in SQLite adapter.\n                // leaving as-is, because it's currently unclear whether anything\n                // depends on this remaining as-is.\n                //\n                updateMutationInput = _this.getUpdateMutationInput(model, savedElement, patchesTuple);\n                // // an update without changed user fields\n                // => don't create mutationEvent\n                if (updateMutationInput === null) {\n                  return result;\n                }\n              }\n              var element = updateMutationInput || savedElement;\n              var modelConstructor = Object.getPrototypeOf(savedElement).constructor;\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: opType,\n                element: element,\n                mutator: mutator,\n                condition: ModelPredicateCreator.getPredicates(condition, false),\n                savedElement: savedElement\n              });\n            });\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  StorageClass.prototype.delete = function (modelOrModelConstructor, condition, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleted, models, modelConstructor, namespaceName, modelDefinition, modelIds;\n      var _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _b.sent();\n            return [4 /*yield*/, this.adapter.delete(modelOrModelConstructor, condition)];\n          case 2:\n            _a = __read.apply(void 0, [_b.sent(), 2]), models = _a[0], deleted = _a[1];\n            modelConstructor = isModelConstructor(modelOrModelConstructor) ? modelOrModelConstructor : Object.getPrototypeOf(modelOrModelConstructor || {}).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n            modelIds = new Set(models.map(function (model) {\n              var modelId = getIdentifierValue(modelDefinition, model);\n              return modelId;\n            }));\n            if (!isModelConstructor(modelOrModelConstructor) && !Array.isArray(deleted)) {\n              deleted = [deleted];\n            }\n            deleted.forEach(function (model) {\n              var modelConstructor = Object.getPrototypeOf(model).constructor;\n              var theCondition;\n              if (!isModelConstructor(modelOrModelConstructor)) {\n                var modelId = getIdentifierValue(modelDefinition, model);\n                theCondition = modelIds.has(modelId) ? ModelPredicateCreator.getPredicates(condition, false) : undefined;\n              }\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: OpType.DELETE,\n                element: model,\n                mutator: mutator,\n                condition: theCondition\n              });\n            });\n            return [2 /*return*/, [models, deleted]];\n        }\n      });\n    });\n  };\n  StorageClass.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.adapter.query(modelConstructor, predicate, pagination)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  StorageClass.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.adapter.queryOne(modelConstructor, firstOrLast)];\n          case 2:\n            record = _a.sent();\n            return [2 /*return*/, record];\n        }\n      });\n    });\n  };\n  StorageClass.prototype.observe = function (modelConstructor, predicate, skipOwn) {\n    var listenToAll = !modelConstructor;\n    var _a = ModelPredicateCreator.getPredicates(predicate, false) || {},\n      predicates = _a.predicates,\n      type = _a.type;\n    var hasPredicate = !!predicates;\n    var result = this.pushStream.observable.filter(function (_a) {\n      var mutator = _a.mutator;\n      return !skipOwn || mutator !== skipOwn;\n    }).map(function (_a) {\n      var _mutator = _a.mutator,\n        message = __rest(_a, [\"mutator\"]);\n      return message;\n    });\n    if (!listenToAll) {\n      result = result.filter(function (_a) {\n        var model = _a.model,\n          element = _a.element;\n        if (modelConstructor !== model) {\n          return false;\n        }\n        if (hasPredicate) {\n          return validatePredicate(element, type, predicates);\n        }\n        return true;\n      });\n    }\n    return result;\n  };\n  StorageClass.prototype.clear = function (completeObservable) {\n    if (completeObservable === void 0) {\n      completeObservable = true;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.initialized = undefined;\n            return [4 /*yield*/, this.adapter.clear()];\n          case 1:\n            _a.sent();\n            if (completeObservable) {\n              this.pushStream.complete();\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.batchSave = function (modelConstructor, items, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.adapter.batchSave(modelConstructor, items)];\n          case 2:\n            result = _a.sent();\n            result.forEach(function (_a) {\n              var _b = __read(_a, 2),\n                element = _b[0],\n                opType = _b[1];\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: opType,\n                element: element,\n                mutator: mutator,\n                condition: undefined\n              });\n            });\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  // returns null if no user fields were changed (determined by value comparison)\n  StorageClass.prototype.getUpdateMutationInput = function (model, originalElement, patchesTuple) {\n    var e_1, _a;\n    var containsPatches = patchesTuple && patchesTuple.length;\n    if (!containsPatches) {\n      return null;\n    }\n    var _b = __read(patchesTuple, 2),\n      patches = _b[0],\n      source = _b[1];\n    var updatedElement = {};\n    // extract array of updated fields from patches\n    var updatedFields = patches.map(function (patch) {\n      return patch.path && patch.path[0];\n    });\n    // check model def for association and replace with targetName if exists\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespace = this.namespaceResolver(modelConstructor);\n    var fields = this.schema.namespaces[namespace].models[modelConstructor.name].fields;\n    var _c = this.schema.namespaces[namespace].keys[modelConstructor.name],\n      primaryKey = _c.primaryKey,\n      _d = _c.compositeKeys,\n      compositeKeys = _d === void 0 ? [] : _d;\n    // set original values for these fields\n    updatedFields.forEach(function (field) {\n      var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e;\n      var _f;\n      var targetNames = isTargetNameAssociation((_f = fields[field]) === null || _f === void 0 ? void 0 : _f.association);\n      if (Array.isArray(targetNames)) {\n        try {\n          // if field refers to a belongsTo relation, use the target field instead\n          for (var targetNames_1 = __values(targetNames), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n            var targetName = targetNames_1_1.value;\n            // check field values by value. Ignore unchanged fields\n            if (!valuesEqual(source[targetName], originalElement[targetName])) {\n              // if the field was updated to 'undefined', replace with 'null' for compatibility with JSON and GraphQL\n              updatedElement[targetName] = originalElement[targetName] === undefined ? null : originalElement[targetName];\n              try {\n                for (var compositeKeys_1 = (e_3 = void 0, __values(compositeKeys)), compositeKeys_1_1 = compositeKeys_1.next(); !compositeKeys_1_1.done; compositeKeys_1_1 = compositeKeys_1.next()) {\n                  var fieldSet = compositeKeys_1_1.value;\n                  // include all of the fields that comprise the composite key\n                  if (fieldSet.has(targetName)) {\n                    try {\n                      for (var fieldSet_1 = (e_4 = void 0, __values(fieldSet)), fieldSet_1_1 = fieldSet_1.next(); !fieldSet_1_1.done; fieldSet_1_1 = fieldSet_1.next()) {\n                        var compositeField = fieldSet_1_1.value;\n                        updatedElement[compositeField] = originalElement[compositeField];\n                      }\n                    } catch (e_4_1) {\n                      e_4 = {\n                        error: e_4_1\n                      };\n                    } finally {\n                      try {\n                        if (fieldSet_1_1 && !fieldSet_1_1.done && (_c = fieldSet_1.return)) _c.call(fieldSet_1);\n                      } finally {\n                        if (e_4) throw e_4.error;\n                      }\n                    }\n                  }\n                }\n              } catch (e_3_1) {\n                e_3 = {\n                  error: e_3_1\n                };\n              } finally {\n                try {\n                  if (compositeKeys_1_1 && !compositeKeys_1_1.done && (_b = compositeKeys_1.return)) _b.call(compositeKeys_1);\n                } finally {\n                  if (e_3) throw e_3.error;\n                }\n              }\n            }\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (targetNames_1_1 && !targetNames_1_1.done && (_a = targetNames_1.return)) _a.call(targetNames_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      } else {\n        // Backwards compatibility pre-CPK\n        // if field refers to a belongsTo relation, use the target field instead\n        var key = targetNames || field;\n        // check field values by value. Ignore unchanged fields\n        if (!valuesEqual(source[key], originalElement[key])) {\n          // if the field was updated to 'undefined', replace with 'null' for compatibility with JSON and GraphQL\n          updatedElement[key] = originalElement[key] === undefined ? null : originalElement[key];\n          try {\n            for (var compositeKeys_2 = __values(compositeKeys), compositeKeys_2_1 = compositeKeys_2.next(); !compositeKeys_2_1.done; compositeKeys_2_1 = compositeKeys_2.next()) {\n              var fieldSet = compositeKeys_2_1.value;\n              // include all of the fields that comprise the composite key\n              if (fieldSet.has(key)) {\n                try {\n                  for (var fieldSet_2 = (e_6 = void 0, __values(fieldSet)), fieldSet_2_1 = fieldSet_2.next(); !fieldSet_2_1.done; fieldSet_2_1 = fieldSet_2.next()) {\n                    var compositeField = fieldSet_2_1.value;\n                    updatedElement[compositeField] = originalElement[compositeField];\n                  }\n                } catch (e_6_1) {\n                  e_6 = {\n                    error: e_6_1\n                  };\n                } finally {\n                  try {\n                    if (fieldSet_2_1 && !fieldSet_2_1.done && (_e = fieldSet_2.return)) _e.call(fieldSet_2);\n                  } finally {\n                    if (e_6) throw e_6.error;\n                  }\n                }\n              }\n            }\n          } catch (e_5_1) {\n            e_5 = {\n              error: e_5_1\n            };\n          } finally {\n            try {\n              if (compositeKeys_2_1 && !compositeKeys_2_1.done && (_d = compositeKeys_2.return)) _d.call(compositeKeys_2);\n            } finally {\n              if (e_5) throw e_5.error;\n            }\n          }\n        }\n      }\n    });\n    // Exit early when there are no changes introduced in the update mutation\n    if (Object.keys(updatedElement).length === 0) {\n      return null;\n    }\n    // include field(s) from custom PK if one is specified for the model\n    if (primaryKey && primaryKey.length) {\n      try {\n        for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n          var pkField = primaryKey_1_1.value;\n          updatedElement[pkField] = originalElement[pkField];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n    var id = originalElement.id,\n      _version = originalElement._version,\n      _lastChangedAt = originalElement._lastChangedAt,\n      _deleted = originalElement._deleted;\n    // For update mutations we only want to send fields with changes\n    // and the required internal fields\n    return __assign(__assign({}, updatedElement), {\n      id: id,\n      _version: _version,\n      _lastChangedAt: _lastChangedAt,\n      _deleted: _deleted\n    });\n  };\n  return StorageClass;\n}();\nvar ExclusiveStorage = /** @class */function () {\n  function ExclusiveStorage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId) {\n    this.mutex = new Mutex();\n    this.storage = new StorageClass(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId);\n  }\n  ExclusiveStorage.prototype.runExclusive = function (fn) {\n    return this.mutex.runExclusive(fn.bind(this, this.storage));\n  };\n  ExclusiveStorage.prototype.save = function (model, condition, mutator, patchesTuple) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.runExclusive(function (storage) {\n          return storage.save(model, condition, mutator, patchesTuple);\n        })];\n      });\n    });\n  };\n  ExclusiveStorage.prototype.delete = function (modelOrModelConstructor, condition, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.runExclusive(function (storage) {\n          if (isModelConstructor(modelOrModelConstructor)) {\n            var modelConstructor = modelOrModelConstructor;\n            return storage.delete(modelConstructor, condition, mutator);\n          } else {\n            var model = modelOrModelConstructor;\n            return storage.delete(model, condition, mutator);\n          }\n        })];\n      });\n    });\n  };\n  ExclusiveStorage.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.runExclusive(function (storage) {\n          return storage.query(modelConstructor, predicate, pagination);\n        })];\n      });\n    });\n  };\n  ExclusiveStorage.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.runExclusive(function (storage) {\n          return storage.queryOne(modelConstructor, firstOrLast);\n        })];\n      });\n    });\n  };\n  ExclusiveStorage.getNamespace = function () {\n    return StorageClass.getNamespace();\n  };\n  ExclusiveStorage.prototype.observe = function (modelConstructor, predicate, skipOwn) {\n    return this.storage.observe(modelConstructor, predicate, skipOwn);\n  };\n  ExclusiveStorage.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.runExclusive(function (storage) {\n              return storage.clear();\n            })];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  ExclusiveStorage.prototype.batchSave = function (modelConstructor, items) {\n    return this.storage.batchSave(modelConstructor, items);\n  };\n  ExclusiveStorage.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.storage.init()];\n      });\n    });\n  };\n  return ExclusiveStorage;\n}();\nexport { ExclusiveStorage };","map":{"version":3,"sources":["../../src/storage/storage.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { Logger, Mutex } from '@aws-amplify/core';\nimport PushStream from 'zen-push';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType, QueryOne, isTargetNameAssociation, } from '../types';\nimport { isModelConstructor, STORAGE, validatePredicate, valuesEqual, } from '../util';\nimport { getIdentifierValue } from '../sync/utils';\nimport getDefaultAdapter from './adapter/getDefaultAdapter';\nvar logger = new Logger('DataStore');\nvar StorageClass = /** @class */ (function () {\n    function StorageClass(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId) {\n        this.schema = schema;\n        this.namespaceResolver = namespaceResolver;\n        this.getModelConstructorByModelName = getModelConstructorByModelName;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.adapter = adapter;\n        this.sessionId = sessionId;\n        this.adapter = this.adapter || getDefaultAdapter();\n        this.pushStream = new PushStream();\n    }\n    StorageClass.getNamespace = function () {\n        var namespace = {\n            name: STORAGE,\n            relationships: {},\n            enums: {},\n            models: {},\n            nonModels: {},\n        };\n        return namespace;\n    };\n    StorageClass.prototype.init = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var resolve, reject;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.initialized !== undefined)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.initialized];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                    case 2:\n                        logger.debug('Starting Storage');\n                        this.initialized = new Promise(function (res, rej) {\n                            resolve = res;\n                            reject = rej;\n                        });\n                        this.adapter\n                            .setUp(this.schema, this.namespaceResolver, this.modelInstanceCreator, this.getModelConstructorByModelName, this.sessionId)\n                            .then(resolve, reject);\n                        return [4 /*yield*/, this.initialized];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StorageClass.prototype.save = function (model, condition, mutator, patchesTuple) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.init()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.adapter.save(model, condition)];\n                    case 2:\n                        result = _a.sent();\n                        result.forEach(function (r) {\n                            var _a = __read(r, 2), savedElement = _a[0], opType = _a[1];\n                            // truthy when save is called by the Merger\n                            var syncResponse = !!mutator;\n                            var updateMutationInput;\n                            // don't attempt to calc mutation input when storage.save\n                            // is called by Merger, i.e., when processing an AppSync response\n                            if (opType === OpType.UPDATE && !syncResponse) {\n                                //\n                                // TODO: LOOK!!!\n                                // the `model` used here is in effect regardless of what model\n                                // comes back from adapter.save().\n                                // Prior to fix, SQLite adapter had been returning two models\n                                // of different types, resulting in invalid outbox entries.\n                                //\n                                // the bug is essentially fixed in SQLite adapter.\n                                // leaving as-is, because it's currently unclear whether anything\n                                // depends on this remaining as-is.\n                                //\n                                updateMutationInput = _this.getUpdateMutationInput(model, savedElement, patchesTuple);\n                                // // an update without changed user fields\n                                // => don't create mutationEvent\n                                if (updateMutationInput === null) {\n                                    return result;\n                                }\n                            }\n                            var element = updateMutationInput || savedElement;\n                            var modelConstructor = Object.getPrototypeOf(savedElement)\n                                .constructor;\n                            _this.pushStream.next({\n                                model: modelConstructor,\n                                opType: opType,\n                                element: element,\n                                mutator: mutator,\n                                condition: ModelPredicateCreator.getPredicates(condition, false),\n                                savedElement: savedElement,\n                            });\n                        });\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    StorageClass.prototype.delete = function (modelOrModelConstructor, condition, mutator) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleted, models, modelConstructor, namespaceName, modelDefinition, modelIds;\n            var _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.init()];\n                    case 1:\n                        _b.sent();\n                        return [4 /*yield*/, this.adapter.delete(modelOrModelConstructor, condition)];\n                    case 2:\n                        _a = __read.apply(void 0, [_b.sent(), 2]), models = _a[0], deleted = _a[1];\n                        modelConstructor = isModelConstructor(modelOrModelConstructor)\n                            ? modelOrModelConstructor\n                            : Object.getPrototypeOf(modelOrModelConstructor || {})\n                                .constructor;\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n                        modelIds = new Set(models.map(function (model) {\n                            var modelId = getIdentifierValue(modelDefinition, model);\n                            return modelId;\n                        }));\n                        if (!isModelConstructor(modelOrModelConstructor) &&\n                            !Array.isArray(deleted)) {\n                            deleted = [deleted];\n                        }\n                        deleted.forEach(function (model) {\n                            var modelConstructor = Object.getPrototypeOf(model)\n                                .constructor;\n                            var theCondition;\n                            if (!isModelConstructor(modelOrModelConstructor)) {\n                                var modelId = getIdentifierValue(modelDefinition, model);\n                                theCondition = modelIds.has(modelId)\n                                    ? ModelPredicateCreator.getPredicates(condition, false)\n                                    : undefined;\n                            }\n                            _this.pushStream.next({\n                                model: modelConstructor,\n                                opType: OpType.DELETE,\n                                element: model,\n                                mutator: mutator,\n                                condition: theCondition,\n                            });\n                        });\n                        return [2 /*return*/, [models, deleted]];\n                }\n            });\n        });\n    };\n    StorageClass.prototype.query = function (modelConstructor, predicate, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.init()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.adapter.query(modelConstructor, predicate, pagination)];\n                    case 2: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    StorageClass.prototype.queryOne = function (modelConstructor, firstOrLast) {\n        if (firstOrLast === void 0) { firstOrLast = QueryOne.FIRST; }\n        return __awaiter(this, void 0, void 0, function () {\n            var record;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.init()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.adapter.queryOne(modelConstructor, firstOrLast)];\n                    case 2:\n                        record = _a.sent();\n                        return [2 /*return*/, record];\n                }\n            });\n        });\n    };\n    StorageClass.prototype.observe = function (modelConstructor, predicate, skipOwn) {\n        var listenToAll = !modelConstructor;\n        var _a = ModelPredicateCreator.getPredicates(predicate, false) || {}, predicates = _a.predicates, type = _a.type;\n        var hasPredicate = !!predicates;\n        var result = this.pushStream.observable\n            .filter(function (_a) {\n            var mutator = _a.mutator;\n            return !skipOwn || mutator !== skipOwn;\n        })\n            .map(function (_a) {\n            var _mutator = _a.mutator, message = __rest(_a, [\"mutator\"]);\n            return message;\n        });\n        if (!listenToAll) {\n            result = result.filter(function (_a) {\n                var model = _a.model, element = _a.element;\n                if (modelConstructor !== model) {\n                    return false;\n                }\n                if (hasPredicate) {\n                    return validatePredicate(element, type, predicates);\n                }\n                return true;\n            });\n        }\n        return result;\n    };\n    StorageClass.prototype.clear = function (completeObservable) {\n        if (completeObservable === void 0) { completeObservable = true; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.initialized = undefined;\n                        return [4 /*yield*/, this.adapter.clear()];\n                    case 1:\n                        _a.sent();\n                        if (completeObservable) {\n                            this.pushStream.complete();\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StorageClass.prototype.batchSave = function (modelConstructor, items, mutator) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.init()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.adapter.batchSave(modelConstructor, items)];\n                    case 2:\n                        result = _a.sent();\n                        result.forEach(function (_a) {\n                            var _b = __read(_a, 2), element = _b[0], opType = _b[1];\n                            _this.pushStream.next({\n                                model: modelConstructor,\n                                opType: opType,\n                                element: element,\n                                mutator: mutator,\n                                condition: undefined,\n                            });\n                        });\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    // returns null if no user fields were changed (determined by value comparison)\n    StorageClass.prototype.getUpdateMutationInput = function (model, originalElement, patchesTuple) {\n        var e_1, _a;\n        var containsPatches = patchesTuple && patchesTuple.length;\n        if (!containsPatches) {\n            return null;\n        }\n        var _b = __read(patchesTuple, 2), patches = _b[0], source = _b[1];\n        var updatedElement = {};\n        // extract array of updated fields from patches\n        var updatedFields = (patches.map(function (patch) { return patch.path && patch.path[0]; }));\n        // check model def for association and replace with targetName if exists\n        var modelConstructor = Object.getPrototypeOf(model)\n            .constructor;\n        var namespace = this.namespaceResolver(modelConstructor);\n        var fields = this.schema.namespaces[namespace].models[modelConstructor.name].fields;\n        var _c = this.schema.namespaces[namespace].keys[modelConstructor.name], primaryKey = _c.primaryKey, _d = _c.compositeKeys, compositeKeys = _d === void 0 ? [] : _d;\n        // set original values for these fields\n        updatedFields.forEach(function (field) {\n            var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e;\n            var _f;\n            var targetNames = isTargetNameAssociation((_f = fields[field]) === null || _f === void 0 ? void 0 : _f.association);\n            if (Array.isArray(targetNames)) {\n                try {\n                    // if field refers to a belongsTo relation, use the target field instead\n                    for (var targetNames_1 = __values(targetNames), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n                        var targetName = targetNames_1_1.value;\n                        // check field values by value. Ignore unchanged fields\n                        if (!valuesEqual(source[targetName], originalElement[targetName])) {\n                            // if the field was updated to 'undefined', replace with 'null' for compatibility with JSON and GraphQL\n                            updatedElement[targetName] =\n                                originalElement[targetName] === undefined\n                                    ? null\n                                    : originalElement[targetName];\n                            try {\n                                for (var compositeKeys_1 = (e_3 = void 0, __values(compositeKeys)), compositeKeys_1_1 = compositeKeys_1.next(); !compositeKeys_1_1.done; compositeKeys_1_1 = compositeKeys_1.next()) {\n                                    var fieldSet = compositeKeys_1_1.value;\n                                    // include all of the fields that comprise the composite key\n                                    if (fieldSet.has(targetName)) {\n                                        try {\n                                            for (var fieldSet_1 = (e_4 = void 0, __values(fieldSet)), fieldSet_1_1 = fieldSet_1.next(); !fieldSet_1_1.done; fieldSet_1_1 = fieldSet_1.next()) {\n                                                var compositeField = fieldSet_1_1.value;\n                                                updatedElement[compositeField] =\n                                                    originalElement[compositeField];\n                                            }\n                                        }\n                                        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                                        finally {\n                                            try {\n                                                if (fieldSet_1_1 && !fieldSet_1_1.done && (_c = fieldSet_1.return)) _c.call(fieldSet_1);\n                                            }\n                                            finally { if (e_4) throw e_4.error; }\n                                        }\n                                    }\n                                }\n                            }\n                            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                            finally {\n                                try {\n                                    if (compositeKeys_1_1 && !compositeKeys_1_1.done && (_b = compositeKeys_1.return)) _b.call(compositeKeys_1);\n                                }\n                                finally { if (e_3) throw e_3.error; }\n                            }\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (targetNames_1_1 && !targetNames_1_1.done && (_a = targetNames_1.return)) _a.call(targetNames_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n            else {\n                // Backwards compatibility pre-CPK\n                // if field refers to a belongsTo relation, use the target field instead\n                var key = targetNames || field;\n                // check field values by value. Ignore unchanged fields\n                if (!valuesEqual(source[key], originalElement[key])) {\n                    // if the field was updated to 'undefined', replace with 'null' for compatibility with JSON and GraphQL\n                    updatedElement[key] =\n                        originalElement[key] === undefined ? null : originalElement[key];\n                    try {\n                        for (var compositeKeys_2 = __values(compositeKeys), compositeKeys_2_1 = compositeKeys_2.next(); !compositeKeys_2_1.done; compositeKeys_2_1 = compositeKeys_2.next()) {\n                            var fieldSet = compositeKeys_2_1.value;\n                            // include all of the fields that comprise the composite key\n                            if (fieldSet.has(key)) {\n                                try {\n                                    for (var fieldSet_2 = (e_6 = void 0, __values(fieldSet)), fieldSet_2_1 = fieldSet_2.next(); !fieldSet_2_1.done; fieldSet_2_1 = fieldSet_2.next()) {\n                                        var compositeField = fieldSet_2_1.value;\n                                        updatedElement[compositeField] =\n                                            originalElement[compositeField];\n                                    }\n                                }\n                                catch (e_6_1) { e_6 = { error: e_6_1 }; }\n                                finally {\n                                    try {\n                                        if (fieldSet_2_1 && !fieldSet_2_1.done && (_e = fieldSet_2.return)) _e.call(fieldSet_2);\n                                    }\n                                    finally { if (e_6) throw e_6.error; }\n                                }\n                            }\n                        }\n                    }\n                    catch (e_5_1) { e_5 = { error: e_5_1 }; }\n                    finally {\n                        try {\n                            if (compositeKeys_2_1 && !compositeKeys_2_1.done && (_d = compositeKeys_2.return)) _d.call(compositeKeys_2);\n                        }\n                        finally { if (e_5) throw e_5.error; }\n                    }\n                }\n            }\n        });\n        // Exit early when there are no changes introduced in the update mutation\n        if (Object.keys(updatedElement).length === 0) {\n            return null;\n        }\n        // include field(s) from custom PK if one is specified for the model\n        if (primaryKey && primaryKey.length) {\n            try {\n                for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n                    var pkField = primaryKey_1_1.value;\n                    updatedElement[pkField] = originalElement[pkField];\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        var id = originalElement.id, _version = originalElement._version, _lastChangedAt = originalElement._lastChangedAt, _deleted = originalElement._deleted;\n        // For update mutations we only want to send fields with changes\n        // and the required internal fields\n        return __assign(__assign({}, updatedElement), { id: id,\n            _version: _version,\n            _lastChangedAt: _lastChangedAt,\n            _deleted: _deleted });\n    };\n    return StorageClass;\n}());\nvar ExclusiveStorage = /** @class */ (function () {\n    function ExclusiveStorage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId) {\n        this.mutex = new Mutex();\n        this.storage = new StorageClass(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId);\n    }\n    ExclusiveStorage.prototype.runExclusive = function (fn) {\n        return this.mutex.runExclusive(fn.bind(this, this.storage));\n    };\n    ExclusiveStorage.prototype.save = function (model, condition, mutator, patchesTuple) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runExclusive(function (storage) {\n                        return storage.save(model, condition, mutator, patchesTuple);\n                    })];\n            });\n        });\n    };\n    ExclusiveStorage.prototype.delete = function (modelOrModelConstructor, condition, mutator) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runExclusive(function (storage) {\n                        if (isModelConstructor(modelOrModelConstructor)) {\n                            var modelConstructor = modelOrModelConstructor;\n                            return storage.delete(modelConstructor, condition, mutator);\n                        }\n                        else {\n                            var model = modelOrModelConstructor;\n                            return storage.delete(model, condition, mutator);\n                        }\n                    })];\n            });\n        });\n    };\n    ExclusiveStorage.prototype.query = function (modelConstructor, predicate, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runExclusive(function (storage) {\n                        return storage.query(modelConstructor, predicate, pagination);\n                    })];\n            });\n        });\n    };\n    ExclusiveStorage.prototype.queryOne = function (modelConstructor, firstOrLast) {\n        if (firstOrLast === void 0) { firstOrLast = QueryOne.FIRST; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runExclusive(function (storage) {\n                        return storage.queryOne(modelConstructor, firstOrLast);\n                    })];\n            });\n        });\n    };\n    ExclusiveStorage.getNamespace = function () {\n        return StorageClass.getNamespace();\n    };\n    ExclusiveStorage.prototype.observe = function (modelConstructor, predicate, skipOwn) {\n        return this.storage.observe(modelConstructor, predicate, skipOwn);\n    };\n    ExclusiveStorage.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.runExclusive(function (storage) { return storage.clear(); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExclusiveStorage.prototype.batchSave = function (modelConstructor, items) {\n        return this.storage.batchSave(modelConstructor, items);\n    };\n    ExclusiveStorage.prototype.init = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.storage.init()];\n            });\n        });\n    };\n    return ExclusiveStorage;\n}());\nexport { ExclusiveStorage };\n//# sourceMappingURL=storage.js.map"]},"metadata":{},"sourceType":"module"}