{"ast":null,"code":"import * as React from 'react';\nimport { useResourceContext } from 'react-admin';\nimport { useCanAccess } from './useCanAccess';\n/**\n * Render the child only if the user has the specified permissions.\n *\n * It accepts the following props:\n *\n * - `action` (string, required): the action to check, e.g. 'read', 'list', 'export', 'delete', etc.\n * - `resource` (string, optional): the resource to check, e.g. 'users', 'comments', 'posts', etc. Falls back to the current resource context if absent.\n * - `record` (object, optional): the record to check. If passed, the child only renders if the user has permissions for that record, e.g. `{ id: 123, firstName: \"John\", lastName: \"Doe\" }`\n *\n * @example\n * import { IfCanAccess } from '@react-admin/ra-rbac';\n *\n * const RecordToolbar = () => (\n *     <Toolbar>\n *         <IfCanAccess action=\"edit\">\n *             <EditButton />\n *         </IfCanAccess>\n *         <IfCanAccess action=\"show\">\n *             <ShowButton />\n *         </IfCanAccess>\n *         <IfCanAccess action=\"delete\">\n *             <DeleteButton />\n *         </IfCanAccess>\n *     </Toolbar>\n * );\n */\nexport var IfCanAccess = function (props) {\n  var action = props.action,\n    record = props.record,\n    children = props.children;\n  var resource = useResourceContext(props);\n  var _a = useCanAccess({\n      action: action,\n      resource: resource,\n      record: record\n    }),\n    canAccess = _a.canAccess,\n    isLoading = _a.isLoading;\n  return isLoading || !canAccess ? null : React.createElement(React.Fragment, null, children);\n};","map":{"version":3,"names":["React","useResourceContext","useCanAccess","IfCanAccess","props","action","record","children","resource","_a","canAccess","isLoading","createElement","Fragment"],"sources":["F:/project/front-end/hei-admin-ui/node_modules/@react-admin/ra-rbac/esm/src/IfCanAccess.js"],"sourcesContent":["import * as React from 'react';\nimport { useResourceContext } from 'react-admin';\nimport { useCanAccess } from './useCanAccess';\n/**\n * Render the child only if the user has the specified permissions.\n *\n * It accepts the following props:\n *\n * - `action` (string, required): the action to check, e.g. 'read', 'list', 'export', 'delete', etc.\n * - `resource` (string, optional): the resource to check, e.g. 'users', 'comments', 'posts', etc. Falls back to the current resource context if absent.\n * - `record` (object, optional): the record to check. If passed, the child only renders if the user has permissions for that record, e.g. `{ id: 123, firstName: \"John\", lastName: \"Doe\" }`\n *\n * @example\n * import { IfCanAccess } from '@react-admin/ra-rbac';\n *\n * const RecordToolbar = () => (\n *     <Toolbar>\n *         <IfCanAccess action=\"edit\">\n *             <EditButton />\n *         </IfCanAccess>\n *         <IfCanAccess action=\"show\">\n *             <ShowButton />\n *         </IfCanAccess>\n *         <IfCanAccess action=\"delete\">\n *             <DeleteButton />\n *         </IfCanAccess>\n *     </Toolbar>\n * );\n */\nexport var IfCanAccess = function (props) {\n    var action = props.action, record = props.record, children = props.children;\n    var resource = useResourceContext(props);\n    var _a = useCanAccess({ action: action, resource: resource, record: record }), canAccess = _a.canAccess, isLoading = _a.isLoading;\n    return isLoading || !canAccess ? null : React.createElement(React.Fragment, null, children);\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,YAAY,QAAQ,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,WAAW,GAAG,UAAUC,KAAK,EAAE;EACtC,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;IAAEC,MAAM,GAAGF,KAAK,CAACE,MAAM;IAAEC,QAAQ,GAAGH,KAAK,CAACG,QAAQ;EAC3E,IAAIC,QAAQ,GAAGP,kBAAkB,CAACG,KAAK,CAAC;EACxC,IAAIK,EAAE,GAAGP,YAAY,CAAC;MAAEG,MAAM,EAAEA,MAAM;MAAEG,QAAQ,EAAEA,QAAQ;MAAEF,MAAM,EAAEA;IAAO,CAAC,CAAC;IAAEI,SAAS,GAAGD,EAAE,CAACC,SAAS;IAAEC,SAAS,GAAGF,EAAE,CAACE,SAAS;EACjI,OAAOA,SAAS,IAAI,CAACD,SAAS,GAAG,IAAI,GAAGV,KAAK,CAACY,aAAa,CAACZ,KAAK,CAACa,QAAQ,EAAE,IAAI,EAAEN,QAAQ,CAAC;AAC/F,CAAC"},"metadata":{},"sourceType":"module"}