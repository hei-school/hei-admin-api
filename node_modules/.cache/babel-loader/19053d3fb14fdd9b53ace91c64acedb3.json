{"ast":null,"code":"/**\n * Converts a JS string from its native UCS-2/UTF-16 representation into a\n * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.\n *\n * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google\n * Closure library, though updated to use typed arrays.\n */\nexport var fromUtf8 = function (input) {\n  var bytes = [];\n  for (var i = 0, len = input.length; i < len; i++) {\n    var value = input.charCodeAt(i);\n    if (value < 0x80) {\n      bytes.push(value);\n    } else if (value < 0x800) {\n      bytes.push(value >> 6 | 192, value & 63 | 128);\n    } else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n      var surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);\n      bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);\n    } else {\n      bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);\n    }\n  }\n  return Uint8Array.from(bytes);\n};\n/**\n * Converts a typed array of bytes containing UTF-8 data into a native JS\n * string.\n *\n * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the\n * Google Closure library, though updated to use typed arrays and to better\n * handle astral plane code points.\n */\nexport var toUtf8 = function (input) {\n  var decoded = \"\";\n  for (var i = 0, len = input.length; i < len; i++) {\n    var byte = input[i];\n    if (byte < 0x80) {\n      decoded += String.fromCharCode(byte);\n    } else if (192 <= byte && byte < 224) {\n      var nextByte = input[++i];\n      decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);\n    } else if (240 <= byte && byte < 365) {\n      var surrogatePair = [byte, input[++i], input[++i], input[++i]];\n      var encoded = \"%\" + surrogatePair.map(function (byteValue) {\n        return byteValue.toString(16);\n      }).join(\"%\");\n      decoded += decodeURIComponent(encoded);\n    } else {\n      decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);\n    }\n  }\n  return decoded;\n};","map":{"version":3,"sources":["../../src/pureJs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Converts a JS string from its native UCS-2/UTF-16 representation into a\n * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.\n *\n * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google\n * Closure library, though updated to use typed arrays.\n */\nexport const fromUtf8 = (input: string): Uint8Array => {\n  const bytes: Array<number> = [];\n  for (let i = 0, len = input.length; i < len; i++) {\n    const value = input.charCodeAt(i);\n    if (value < 0x80) {\n      bytes.push(value);\n    } else if (value < 0x800) {\n      bytes.push((value >> 6) | 0b11000000, (value & 0b111111) | 0b10000000);\n    } else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n      const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);\n      bytes.push(\n        (surrogatePair >> 18) | 0b11110000,\n        ((surrogatePair >> 12) & 0b111111) | 0b10000000,\n        ((surrogatePair >> 6) & 0b111111) | 0b10000000,\n        (surrogatePair & 0b111111) | 0b10000000\n      );\n    } else {\n      bytes.push((value >> 12) | 0b11100000, ((value >> 6) & 0b111111) | 0b10000000, (value & 0b111111) | 0b10000000);\n    }\n  }\n\n  return Uint8Array.from(bytes);\n};\n\n/**\n * Converts a typed array of bytes containing UTF-8 data into a native JS\n * string.\n *\n * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the\n * Google Closure library, though updated to use typed arrays and to better\n * handle astral plane code points.\n */\nexport const toUtf8 = (input: Uint8Array): string => {\n  let decoded = \"\";\n  for (let i = 0, len = input.length; i < len; i++) {\n    const byte = input[i];\n    if (byte < 0x80) {\n      decoded += String.fromCharCode(byte);\n    } else if (0b11000000 <= byte && byte < 0b11100000) {\n      const nextByte = input[++i];\n      decoded += String.fromCharCode(((byte & 0b11111) << 6) | (nextByte & 0b111111));\n    } else if (0b11110000 <= byte && byte < 0b101101101) {\n      const surrogatePair = [byte, input[++i], input[++i], input[++i]];\n      const encoded = \"%\" + surrogatePair.map((byteValue) => byteValue.toString(16)).join(\"%\");\n      decoded += decodeURIComponent(encoded);\n    } else {\n      decoded += String.fromCharCode(\n        ((byte & 0b1111) << 12) | ((input[++i] & 0b111111) << 6) | (input[++i] & 0b111111)\n      );\n    }\n  }\n\n  return decoded;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}