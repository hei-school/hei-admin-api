{"ast":null,"code":"/**\n * Gets a list of values indexed by field based on a list of records\n *\n * @example\n * const records = [\n *     {\n *         id: 1,\n *         title: \"Lorem Ipsum\",\n *         views: 254,\n *         user_id: 123,\n *     },\n *     {\n *         id: 2,\n *         title: \"Sic Dolor amet\",\n *         views: 65,\n *         user_id: 456,\n *     },\n * ];\n * getValuesFromRecords(records);\n * // {\n * //    id: [1, 2],\n * //    title: ['Lorem Ipsum', 'Sic Dolor amet'],\n * //    views: [254, 65],\n * //    user_id: [123, 456],\n * // }\n */\nexport default (function (records) {\n  return records.reduce(function (values, record) {\n    Object.keys(record).forEach(function (fieldName) {\n      if (!values[fieldName]) {\n        values[fieldName] = [];\n      }\n      if (record[fieldName] != null) {\n        var value = Array.isArray(record[fieldName]) ? [record[fieldName]] : record[fieldName];\n        values[fieldName] = values[fieldName].concat(value);\n      }\n    });\n    return values;\n  }, {});\n});","map":{"version":3,"sources":["../../../src/inference/getValuesFromRecords.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;AACH,gBAAe,UAAC,OAAc,EAAA;EAC1B,OAAA,OAAO,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,MAAM,EAAA;IAC1B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS,EAAA;MACjC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;QACpB,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE;MACzB;MACD,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE;QAC3B,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,GACxC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,GACnB,MAAM,CAAC,SAAS,CAAC;QACvB,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;MACtD;IACL,CAAC,CAAC;IACF,OAAO,MAAM;EACjB,CAAC,EAAE,CAAA,CAAE,CAAC;AAbN,CAaM","sourceRoot":"","sourcesContent":["/**\n * Gets a list of values indexed by field based on a list of records\n *\n * @example\n * const records = [\n *     {\n *         id: 1,\n *         title: \"Lorem Ipsum\",\n *         views: 254,\n *         user_id: 123,\n *     },\n *     {\n *         id: 2,\n *         title: \"Sic Dolor amet\",\n *         views: 65,\n *         user_id: 456,\n *     },\n * ];\n * getValuesFromRecords(records);\n * // {\n * //    id: [1, 2],\n * //    title: ['Lorem Ipsum', 'Sic Dolor amet'],\n * //    views: [254, 65],\n * //    user_id: [123, 456],\n * // }\n */\nexport default (function (records) {\n    return records.reduce(function (values, record) {\n        Object.keys(record).forEach(function (fieldName) {\n            if (!values[fieldName]) {\n                values[fieldName] = [];\n            }\n            if (record[fieldName] != null) {\n                var value = Array.isArray(record[fieldName])\n                    ? [record[fieldName]]\n                    : record[fieldName];\n                values[fieldName] = values[fieldName].concat(value);\n            }\n        });\n        return values;\n    }, {});\n});\n//# sourceMappingURL=getValuesFromRecords.js.map"]},"metadata":{},"sourceType":"module"}