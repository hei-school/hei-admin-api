{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\";\nvar PRELUDE_MEMBER_LENGTH = 4;\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\nvar CHECKSUM_LENGTH = 4;\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\nexport function splitMessage(_a) {\n  var byteLength = _a.byteLength,\n    byteOffset = _a.byteOffset,\n    buffer = _a.buffer;\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n  }\n  var view = new DataView(buffer, byteOffset, byteLength);\n  var messageLength = view.getUint32(0, false);\n  if (byteLength !== messageLength) {\n    throw new Error(\"Reported message length does not match received message length\");\n  }\n  var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n  var checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\"The prelude checksum specified in the message (\".concat(expectedPreludeChecksum, \") does not match the calculated CRC32 checksum (\").concat(checksummer.digest(), \")\"));\n  }\n  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\"The message checksum (\".concat(checksummer.digest(), \") did not match the expected value of \").concat(expectedMessageChecksum));\n  }\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))\n  };\n}","map":{"version":3,"names":["Crc32","PRELUDE_MEMBER_LENGTH","PRELUDE_LENGTH","CHECKSUM_LENGTH","MINIMUM_MESSAGE_LENGTH","splitMessage","_a","byteLength","byteOffset","buffer","Error","view","DataView","messageLength","getUint32","headerLength","expectedPreludeChecksum","expectedMessageChecksum","checksummer","update","Uint8Array","digest","concat","headers","body"],"sources":["F:/project/front-end/hei-admin-ui/node_modules/@aws-sdk/eventstream-codec/dist-es/splitMessage.js"],"sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\nvar PRELUDE_MEMBER_LENGTH = 4;\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\nvar CHECKSUM_LENGTH = 4;\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\nexport function splitMessage(_a) {\n    var byteLength = _a.byteLength, byteOffset = _a.byteOffset, buffer = _a.buffer;\n    if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n        throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n    }\n    var view = new DataView(buffer, byteOffset, byteLength);\n    var messageLength = view.getUint32(0, false);\n    if (byteLength !== messageLength) {\n        throw new Error(\"Reported message length does not match received message length\");\n    }\n    var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n    var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n    var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n    var checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n    if (expectedPreludeChecksum !== checksummer.digest()) {\n        throw new Error(\"The prelude checksum specified in the message (\".concat(expectedPreludeChecksum, \") does not match the calculated CRC32 checksum (\").concat(checksummer.digest(), \")\"));\n    }\n    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n    if (expectedMessageChecksum !== checksummer.digest()) {\n        throw new Error(\"The message checksum (\".concat(checksummer.digest(), \") did not match the expected value of \").concat(expectedMessageChecksum));\n    }\n    return {\n        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)),\n    };\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,mBAAmB;AACzC,IAAIC,qBAAqB,GAAG,CAAC;AAC7B,IAAIC,cAAc,GAAGD,qBAAqB,GAAG,CAAC;AAC9C,IAAIE,eAAe,GAAG,CAAC;AACvB,IAAIC,sBAAsB,GAAGF,cAAc,GAAGC,eAAe,GAAG,CAAC;AACjE,OAAO,SAASE,YAAY,CAACC,EAAE,EAAE;EAC7B,IAAIC,UAAU,GAAGD,EAAE,CAACC,UAAU;IAAEC,UAAU,GAAGF,EAAE,CAACE,UAAU;IAAEC,MAAM,GAAGH,EAAE,CAACG,MAAM;EAC9E,IAAIF,UAAU,GAAGH,sBAAsB,EAAE;IACrC,MAAM,IAAIM,KAAK,CAAC,yEAAyE,CAAC;EAC9F;EACA,IAAIC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,EAAED,UAAU,EAAED,UAAU,CAAC;EACvD,IAAIM,aAAa,GAAGF,IAAI,CAACG,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC;EAC5C,IAAIP,UAAU,KAAKM,aAAa,EAAE;IAC9B,MAAM,IAAIH,KAAK,CAAC,gEAAgE,CAAC;EACrF;EACA,IAAIK,YAAY,GAAGJ,IAAI,CAACG,SAAS,CAACb,qBAAqB,EAAE,KAAK,CAAC;EAC/D,IAAIe,uBAAuB,GAAGL,IAAI,CAACG,SAAS,CAACZ,cAAc,EAAE,KAAK,CAAC;EACnE,IAAIe,uBAAuB,GAAGN,IAAI,CAACG,SAAS,CAACP,UAAU,GAAGJ,eAAe,EAAE,KAAK,CAAC;EACjF,IAAIe,WAAW,GAAG,IAAIlB,KAAK,EAAE,CAACmB,MAAM,CAAC,IAAIC,UAAU,CAACX,MAAM,EAAED,UAAU,EAAEN,cAAc,CAAC,CAAC;EACxF,IAAIc,uBAAuB,KAAKE,WAAW,CAACG,MAAM,EAAE,EAAE;IAClD,MAAM,IAAIX,KAAK,CAAC,iDAAiD,CAACY,MAAM,CAACN,uBAAuB,EAAE,kDAAkD,CAAC,CAACM,MAAM,CAACJ,WAAW,CAACG,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;EAC5L;EACAH,WAAW,CAACC,MAAM,CAAC,IAAIC,UAAU,CAACX,MAAM,EAAED,UAAU,GAAGN,cAAc,EAAEK,UAAU,IAAIL,cAAc,GAAGC,eAAe,CAAC,CAAC,CAAC;EACxH,IAAIc,uBAAuB,KAAKC,WAAW,CAACG,MAAM,EAAE,EAAE;IAClD,MAAM,IAAIX,KAAK,CAAC,wBAAwB,CAACY,MAAM,CAACJ,WAAW,CAACG,MAAM,EAAE,EAAE,wCAAwC,CAAC,CAACC,MAAM,CAACL,uBAAuB,CAAC,CAAC;EACpJ;EACA,OAAO;IACHM,OAAO,EAAE,IAAIX,QAAQ,CAACH,MAAM,EAAED,UAAU,GAAGN,cAAc,GAAGC,eAAe,EAAEY,YAAY,CAAC;IAC1FS,IAAI,EAAE,IAAIJ,UAAU,CAACX,MAAM,EAAED,UAAU,GAAGN,cAAc,GAAGC,eAAe,GAAGY,YAAY,EAAEF,aAAa,GAAGE,YAAY,IAAIb,cAAc,GAAGC,eAAe,GAAGA,eAAe,CAAC;EAClL,CAAC;AACL"},"metadata":{},"sourceType":"module"}