{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\nimport { useResourceDefinition } from 'ra-core';\n/**\n * Action Toolbar for the Create view\n *\n * Internal component. If you want to add or remove actions for a Create view,\n * write your own CreateActions Component. Then, in the <Create> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\n *\n *     const PostCreateActions = () => (\n *         <TopToolbar>\n *             <ListButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostCreate = (props) => (\n *         <Create actions={<PostCreateActions />} {...props}>\n *             ...\n *         </Create>\n *     );\n */\nexport var CreateActions = function (_a) {\n  var className = _a.className,\n    rest = __rest(_a, [\"className\"]);\n  var hasList = useResourceDefinition(rest).hasList;\n  return React.createElement(TopToolbar, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), hasList && React.createElement(ListButton, null));\n};\nvar sanitizeRestProps = function (_a) {\n  var _b = _a.className,\n    className = _b === void 0 ? null : _b,\n    _c = _a.hasList,\n    hasList = _c === void 0 ? null : _c,\n    _d = _a.resource,\n    resource = _d === void 0 ? null : _d,\n    rest = __rest(_a, [\"className\", \"hasList\", \"resource\"]);\n  return rest;\n};\nCreateActions.propTypes = {\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  resource: PropTypes.string\n};","map":{"version":3,"sources":["../../../src/detail/CreateActions.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,SAAS,MAAM,YAAY;AAElC,OAAO,UAAU,MAAM,sBAAsB;AAC7C,SAAS,UAAU,QAAQ,WAAW;AACtC,SAAS,qBAAqB,QAAQ,SAAS;AAE/C;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;AACH,OAAO,IAAM,aAAa,GAAG,UAAC,EAA0C,EAAA;EAAxC,IAAA,SAAS,GAAA,EAAA,CAAA,SAAA;IAAK,IAAI,GAAA,MAAA,CAAA,EAAA,EAApB,CAAA,WAAA,CAAsB,CAAF;EACtC,IAAA,OAAO,GAAK,qBAAqB,CAAC,IAAI,CAAC,CAAA,OAAhC;EACf,OACI,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA,QAAA,CAAA;IAAC,SAAS,EAAE;EAAS,CAAA,EAAM,iBAAiB,CAAC,IAAI,CAAC,CAAA,EACxD,OAAO,IAAI,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA,IAAA,CAAG,CACjB;AAErB,CAAC;AAED,IAAM,iBAAiB,GAAG,UAAC,EAK1B,EAAA;EAJG,IAAA,EAAA,GAAA,EAAA,CAAA,SAAgB;IAAhB,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,EAAA;IAChB,EAAA,GAAA,EAAA,CAAA,OAAc;IAAd,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,EAAA;IACd,EAAA,GAAA,EAAA,CAAA,QAAe;IAAf,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,EAAA;IACZ,IAAI,GAAA,MAAA,CAAA,EAAA,EAJgB,CAAA,WAAA,EAAA,SAAA,EAAA,UAAA,CAK1B,CADU;EACL,OAAA,IAAI;CAAA;AAWV,aAAa,CAAC,SAAS,GAAG;EACtB,SAAS,EAAE,SAAS,CAAC,MAAM;EAC3B,SAAS,EAAE,SAAS,CAAC,IAAI;EACzB,OAAO,EAAE,SAAS,CAAC,IAAI;EACvB,OAAO,EAAE,SAAS,CAAC,IAAI;EACvB,OAAO,EAAE,SAAS,CAAC,IAAI;EACvB,QAAQ,EAAE,SAAS,CAAC;CACvB","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\nimport { useResourceDefinition } from 'ra-core';\n/**\n * Action Toolbar for the Create view\n *\n * Internal component. If you want to add or remove actions for a Create view,\n * write your own CreateActions Component. Then, in the <Create> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\n *\n *     const PostCreateActions = () => (\n *         <TopToolbar>\n *             <ListButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostCreate = (props) => (\n *         <Create actions={<PostCreateActions />} {...props}>\n *             ...\n *         </Create>\n *     );\n */\nexport var CreateActions = function (_a) {\n    var className = _a.className, rest = __rest(_a, [\"className\"]);\n    var hasList = useResourceDefinition(rest).hasList;\n    return (React.createElement(TopToolbar, __assign({ className: className }, sanitizeRestProps(rest)), hasList && React.createElement(ListButton, null)));\n};\nvar sanitizeRestProps = function (_a) {\n    var _b = _a.className, className = _b === void 0 ? null : _b, _c = _a.hasList, hasList = _c === void 0 ? null : _c, _d = _a.resource, resource = _d === void 0 ? null : _d, rest = __rest(_a, [\"className\", \"hasList\", \"resource\"]);\n    return rest;\n};\nCreateActions.propTypes = {\n    className: PropTypes.string,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    resource: PropTypes.string,\n};\n//# sourceMappingURL=CreateActions.js.map"]},"metadata":{},"sourceType":"module"}