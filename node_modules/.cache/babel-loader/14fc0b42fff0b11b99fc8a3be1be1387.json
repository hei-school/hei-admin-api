{"ast":null,"code":"import { __awaiter, __generator, __rest } from \"tslib\";\nexport var loggerMiddleware = function () {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;\n              return [4, next(args)];\n            case 1:\n              response = _b.sent();\n              if (!logger) {\n                return [2, response];\n              }\n              if (typeof logger.info === \"function\") {\n                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest(_a, [\"$metadata\"]);\n                logger.info({\n                  clientName: clientName,\n                  commandName: commandName,\n                  input: inputFilterSensitiveLog(args.input),\n                  output: outputFilterSensitiveLog(outputWithoutMetadata),\n                  metadata: $metadata\n                });\n              }\n              return [2, response];\n          }\n        });\n      });\n    };\n  };\n};\nexport var loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true\n};\nexport var getLoggerPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"names":["__awaiter","__generator","__rest","loggerMiddleware","next","context","args","clientName","commandName","inputFilterSensitiveLog","logger","outputFilterSensitiveLog","response","_a","$metadata","outputWithoutMetadata","_b","label","sent","info","output","input","metadata","loggerMiddlewareOptions","name","tags","step","override","getLoggerPlugin","options","applyToStack","clientStack","add"],"sources":["F:/project/front-end/hei-admin-ui/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js"],"sourcesContent":["import { __awaiter, __generator, __rest } from \"tslib\";\nexport var loggerMiddleware = function () {\n    return function (next, context) {\n        return function (args) { return __awaiter(void 0, void 0, void 0, function () {\n            var clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;\n                        return [4, next(args)];\n                    case 1:\n                        response = _b.sent();\n                        if (!logger) {\n                            return [2, response];\n                        }\n                        if (typeof logger.info === \"function\") {\n                            _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest(_a, [\"$metadata\"]);\n                            logger.info({\n                                clientName: clientName,\n                                commandName: commandName,\n                                input: inputFilterSensitiveLog(args.input),\n                                output: outputFilterSensitiveLog(outputWithoutMetadata),\n                                metadata: $metadata,\n                            });\n                        }\n                        return [2, response];\n                }\n            });\n        }); };\n    };\n};\nexport var loggerMiddlewareOptions = {\n    name: \"loggerMiddleware\",\n    tags: [\"LOGGER\"],\n    step: \"initialize\",\n    override: true,\n};\nexport var getLoggerPlugin = function (options) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    },\n}); };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AACtD,OAAO,IAAIC,gBAAgB,GAAG,YAAY;EACtC,OAAO,UAAUC,IAAI,EAAEC,OAAO,EAAE;IAC5B,OAAO,UAAUC,IAAI,EAAE;MAAE,OAAON,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;QAC1E,IAAIO,UAAU,EAAEC,WAAW,EAAEC,uBAAuB,EAAEC,MAAM,EAAEC,wBAAwB,EAAEC,QAAQ,EAAEC,EAAE,EAAEC,SAAS,EAAEC,qBAAqB;QACtI,OAAOd,WAAW,CAAC,IAAI,EAAE,UAAUe,EAAE,EAAE;UACnC,QAAQA,EAAE,CAACC,KAAK;YACZ,KAAK,CAAC;cACFV,UAAU,GAAGF,OAAO,CAACE,UAAU,EAAEC,WAAW,GAAGH,OAAO,CAACG,WAAW,EAAEC,uBAAuB,GAAGJ,OAAO,CAACI,uBAAuB,EAAEC,MAAM,GAAGL,OAAO,CAACK,MAAM,EAAEC,wBAAwB,GAAGN,OAAO,CAACM,wBAAwB;cACnN,OAAO,CAAC,CAAC,EAAEP,IAAI,CAACE,IAAI,CAAC,CAAC;YAC1B,KAAK,CAAC;cACFM,QAAQ,GAAGI,EAAE,CAACE,IAAI,EAAE;cACpB,IAAI,CAACR,MAAM,EAAE;gBACT,OAAO,CAAC,CAAC,EAAEE,QAAQ,CAAC;cACxB;cACA,IAAI,OAAOF,MAAM,CAACS,IAAI,KAAK,UAAU,EAAE;gBACnCN,EAAE,GAAGD,QAAQ,CAACQ,MAAM,EAAEN,SAAS,GAAGD,EAAE,CAACC,SAAS,EAAEC,qBAAqB,GAAGb,MAAM,CAACW,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;gBACjGH,MAAM,CAACS,IAAI,CAAC;kBACRZ,UAAU,EAAEA,UAAU;kBACtBC,WAAW,EAAEA,WAAW;kBACxBa,KAAK,EAAEZ,uBAAuB,CAACH,IAAI,CAACe,KAAK,CAAC;kBAC1CD,MAAM,EAAET,wBAAwB,CAACI,qBAAqB,CAAC;kBACvDO,QAAQ,EAAER;gBACd,CAAC,CAAC;cACN;cACA,OAAO,CAAC,CAAC,EAAEF,QAAQ,CAAC;UAAC;QAEjC,CAAC,CAAC;MACN,CAAC,CAAC;IAAE,CAAC;EACT,CAAC;AACL,CAAC;AACD,OAAO,IAAIW,uBAAuB,GAAG;EACjCC,IAAI,EAAE,kBAAkB;EACxBC,IAAI,EAAE,CAAC,QAAQ,CAAC;EAChBC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAE;AACd,CAAC;AACD,OAAO,IAAIC,eAAe,GAAG,UAAUC,OAAO,EAAE;EAAE,OAAQ;IACtDC,YAAY,EAAE,UAAUC,WAAW,EAAE;MACjCA,WAAW,CAACC,GAAG,CAAC7B,gBAAgB,EAAE,EAAEoB,uBAAuB,CAAC;IAChE;EACJ,CAAC;AAAG,CAAC"},"metadata":{},"sourceType":"module"}