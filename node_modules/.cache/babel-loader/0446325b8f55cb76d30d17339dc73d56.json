{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\nexport function fromCognitoIdentityPool(_a) {\n  var _this = this;\n  var accountId = _a.accountId,\n    _b = _a.cache,\n    cache = _b === void 0 ? localStorage() : _b,\n    client = _a.client,\n    customRoleArn = _a.customRoleArn,\n    identityPoolId = _a.identityPoolId,\n    logins = _a.logins,\n    _c = _a.userIdentifier,\n    userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined : _c;\n  var cacheKey = userIdentifier ? \"aws:cognito-identity-credentials:\" + identityPoolId + \":\" + userIdentifier : undefined;\n  var provider = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var identityId, _a, _b, IdentityId, _c, _d, _e, _f;\n      var _g;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _a = cacheKey;\n            if (!_a) return [3 /*break*/, 2];\n            return [4 /*yield*/, cache.getItem(cacheKey)];\n          case 1:\n            _a = _h.sent();\n            _h.label = 2;\n          case 2:\n            identityId = _a;\n            if (!!identityId) return [3 /*break*/, 7];\n            _d = (_c = client).send;\n            _e = GetIdCommand.bind;\n            _g = {\n              AccountId: accountId,\n              IdentityPoolId: identityPoolId\n            };\n            if (!logins) return [3 /*break*/, 4];\n            return [4 /*yield*/, resolveLogins(logins)];\n          case 3:\n            _f = _h.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            _f = undefined;\n            _h.label = 5;\n          case 5:\n            return [4 /*yield*/, _d.apply(_c, [new (_e.apply(GetIdCommand, [void 0, (_g.Logins = _f, _g)]))()])];\n          case 6:\n            _b = _h.sent().IdentityId, IdentityId = _b === void 0 ? throwOnMissingId() : _b;\n            identityId = IdentityId;\n            if (cacheKey) {\n              Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function () {});\n            }\n            _h.label = 7;\n          case 7:\n            provider = fromCognitoIdentity({\n              client: client,\n              customRoleArn: customRoleArn,\n              logins: logins,\n              identityId: identityId\n            });\n            return [2 /*return*/, provider()];\n        }\n      });\n    });\n  };\n  return function () {\n    return provider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(function () {});\n          }\n          throw err;\n        });\n      });\n    });\n  };\n}\nfunction throwOnMissingId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}","map":{"version":3,"sources":["../../src/fromCognitoIdentityPool.ts"],"names":[],"mappings":"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","sourcesContent":["import { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { CredentialProvider } from \"@aws-sdk/types\";\n\nimport { CognitoProviderParameters } from \"./CognitoProviderParameters\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nimport { Storage } from \"./Storage\";\n\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\nexport function fromCognitoIdentityPool({\n  accountId,\n  cache = localStorage(),\n  client,\n  customRoleArn,\n  identityPoolId,\n  logins,\n  userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined,\n}: FromCognitoIdentityPoolParameters): CredentialProvider {\n  const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;\n\n  let provider: CredentialProvider = async () => {\n    let identityId = cacheKey && (await cache.getItem(cacheKey));\n    if (!identityId) {\n      const { IdentityId = throwOnMissingId() } = await client.send(\n        new GetIdCommand({\n          AccountId: accountId,\n          IdentityPoolId: identityPoolId,\n          Logins: logins ? await resolveLogins(logins) : undefined,\n        })\n      );\n      identityId = IdentityId;\n      if (cacheKey) {\n        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => {});\n      }\n    }\n\n    provider = fromCognitoIdentity({\n      client,\n      customRoleArn,\n      logins,\n      identityId,\n    });\n\n    return provider();\n  };\n\n  return () =>\n    provider().catch(async (err) => {\n      if (cacheKey) {\n        Promise.resolve(cache.removeItem(cacheKey)).catch(() => {});\n      }\n\n      throw err;\n    });\n}\n\nexport interface FromCognitoIdentityPoolParameters extends CognitoProviderParameters {\n  /**\n   * A standard AWS account ID (9+ digits).\n   */\n  accountId?: string;\n\n  /**\n   * A cache in which to store resolved Cognito IdentityIds. If not supplied,\n   * the credential provider will attempt to store IdentityIds in one of the\n   * following (in order of preference):\n   *   1. IndexedDB\n   *   2. LocalStorage\n   *   3. An in-memory cache object that will not persist between pages.\n   *\n   * IndexedDB is preferred to maximize data sharing between top-level\n   * browsing contexts and web workers.\n   *\n   * The provider will not cache IdentityIds of authenticated users unless a\n   * separate `userIdentitifer` parameter is supplied.\n   */\n  cache?: Storage;\n\n  /**\n   * The unique identifier for the identity pool from which an identity should\n   * be retrieved or generated.\n   */\n  identityPoolId: string;\n\n  /**\n   * A unique identifier for the user. This is distinct from a Cognito\n   * IdentityId and should instead be an identifier meaningful to your\n   * application. Used to cache Cognito IdentityIds on a per-user basis.\n   */\n  userIdentifier?: string;\n}\n\nfunction throwOnMissingId(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}