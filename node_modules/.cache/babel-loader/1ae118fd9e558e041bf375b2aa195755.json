{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useDataProvider } from 'react-admin';\nimport { useQuery, useQueryClient } from 'react-query';\n/**\n * Call the dataProvider.getRootNodes() method and return the resolved value\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getTree parameters { meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, error, isLoading, isFetching }.\n *\n * @example // usage\n *\n * import { useGetRootNodes } from '@react-admin/ra-tree';\n *\n * const Categories = () => {\n *     const { data: tree, isLoading, error } = useGetRootNodes('categories');\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <Tree tree={data} />;\n * };\n */\nexport var useGetRootNodes = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var meta = params.meta;\n  var result = useQuery([resource, 'getRootNodes', params], function () {\n    return dataProvider.getRootNodes(resource, params).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign({\n    onSuccess: function (data) {\n      // optimistically populate the getParentNode cache\n      data.forEach(function (record) {\n        if (record.children) {\n          record.children.forEach(function (childId) {\n            queryClient.setQueryData([resource, 'getParentNode', {\n              childId: childId,\n              meta: meta\n            }], function (oldRecord) {\n              return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record;\n            });\n          });\n        }\n      });\n    }\n  }, options));\n  return result;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useDataProvider","useQuery","useQueryClient","useGetRootNodes","resource","params","options","dataProvider","queryClient","meta","result","getRootNodes","then","_a","data","onSuccess","forEach","record","children","childId","setQueryData","oldRecord"],"sources":["F:/project/front-end/hei-admin-ui/node_modules/@react-admin/ra-tree/esm/src/dataProvider/useGetRootNodes.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useDataProvider } from 'react-admin';\nimport { useQuery, useQueryClient, } from 'react-query';\n/**\n * Call the dataProvider.getRootNodes() method and return the resolved value\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getTree parameters { meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, error, isLoading, isFetching }.\n *\n * @example // usage\n *\n * import { useGetRootNodes } from '@react-admin/ra-tree';\n *\n * const Categories = () => {\n *     const { data: tree, isLoading, error } = useGetRootNodes('categories');\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <Tree tree={data} />;\n * };\n */\nexport var useGetRootNodes = function (resource, params, options) {\n    if (params === void 0) { params = {}; }\n    var dataProvider = useDataProvider();\n    var queryClient = useQueryClient();\n    var meta = params.meta;\n    var result = useQuery([resource, 'getRootNodes', params], function () {\n        return dataProvider\n            .getRootNodes(resource, params)\n            .then(function (_a) {\n            var data = _a.data;\n            return data;\n        });\n    }, __assign({ onSuccess: function (data) {\n            // optimistically populate the getParentNode cache\n            data.forEach(function (record) {\n                if (record.children) {\n                    record.children.forEach(function (childId) {\n                        queryClient.setQueryData([resource, 'getParentNode', { childId: childId, meta: meta }], function (oldRecord) { return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record; });\n                    });\n                }\n            });\n        } }, options));\n    return result;\n};\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,SAASO,eAAe,QAAQ,aAAa;AAC7C,SAASC,QAAQ,EAAEC,cAAc,QAAS,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,eAAe,GAAG,UAAUC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAC9D,IAAID,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAG,CAAC,CAAC;EAAE;EACtC,IAAIE,YAAY,GAAGP,eAAe,EAAE;EACpC,IAAIQ,WAAW,GAAGN,cAAc,EAAE;EAClC,IAAIO,IAAI,GAAGJ,MAAM,CAACI,IAAI;EACtB,IAAIC,MAAM,GAAGT,QAAQ,CAAC,CAACG,QAAQ,EAAE,cAAc,EAAEC,MAAM,CAAC,EAAE,YAAY;IAClE,OAAOE,YAAY,CACdI,YAAY,CAACP,QAAQ,EAAEC,MAAM,CAAC,CAC9BO,IAAI,CAAC,UAAUC,EAAE,EAAE;MACpB,IAAIC,IAAI,GAAGD,EAAE,CAACC,IAAI;MAClB,OAAOA,IAAI;IACf,CAAC,CAAC;EACN,CAAC,EAAE5B,QAAQ,CAAC;IAAE6B,SAAS,EAAE,UAAUD,IAAI,EAAE;MACjC;MACAA,IAAI,CAACE,OAAO,CAAC,UAAUC,MAAM,EAAE;QAC3B,IAAIA,MAAM,CAACC,QAAQ,EAAE;UACjBD,MAAM,CAACC,QAAQ,CAACF,OAAO,CAAC,UAAUG,OAAO,EAAE;YACvCX,WAAW,CAACY,YAAY,CAAC,CAAChB,QAAQ,EAAE,eAAe,EAAE;cAAEe,OAAO,EAAEA,OAAO;cAAEV,IAAI,EAAEA;YAAK,CAAC,CAAC,EAAE,UAAUY,SAAS,EAAE;cAAE,OAAOA,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,GAAGA,SAAS,GAAGJ,MAAM;YAAE,CAAC,CAAC;UAC7L,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;IACN;EAAE,CAAC,EAAEX,OAAO,CAAC,CAAC;EAClB,OAAOI,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module"}