{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nvar DefaultRateLimiter = function () {\n  function DefaultRateLimiter(options) {\n    var _a, _b, _c, _d, _e;\n    this.currentCapacity = 0;\n    this.enabled = false;\n    this.lastMaxRate = 0;\n    this.measuredTxRate = 0;\n    this.requestCount = 0;\n    this.lastTimestamp = 0;\n    this.timeWindow = 0;\n    this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;\n    this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;\n    this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;\n    this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;\n    this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;\n    var currentTimeInSeconds = this.getCurrentTimeInSeconds();\n    this.lastThrottleTime = currentTimeInSeconds;\n    this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n    this.fillRate = this.minFillRate;\n    this.maxCapacity = this.minCapacity;\n  }\n  DefaultRateLimiter.prototype.getCurrentTimeInSeconds = function () {\n    return Date.now() / 1000;\n  };\n  DefaultRateLimiter.prototype.getSendToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2, this.acquireTokenBucket(1)];\n      });\n    });\n  };\n  DefaultRateLimiter.prototype.acquireTokenBucket = function (amount) {\n    return __awaiter(this, void 0, void 0, function () {\n      var delay_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.enabled) {\n              return [2];\n            }\n            this.refillTokenBucket();\n            if (!(amount > this.currentCapacity)) return [3, 2];\n            delay_1 = (amount - this.currentCapacity) / this.fillRate * 1000;\n            return [4, new Promise(function (resolve) {\n              return setTimeout(resolve, delay_1);\n            })];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            this.currentCapacity = this.currentCapacity - amount;\n            return [2];\n        }\n      });\n    });\n  };\n  DefaultRateLimiter.prototype.refillTokenBucket = function () {\n    var timestamp = this.getCurrentTimeInSeconds();\n    if (!this.lastTimestamp) {\n      this.lastTimestamp = timestamp;\n      return;\n    }\n    var fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n    this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n    this.lastTimestamp = timestamp;\n  };\n  DefaultRateLimiter.prototype.updateClientSendingRate = function (response) {\n    var calculatedRate;\n    this.updateMeasuredRate();\n    if (isThrottlingError(response)) {\n      var rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n      this.lastMaxRate = rateToUse;\n      this.calculateTimeWindow();\n      this.lastThrottleTime = this.getCurrentTimeInSeconds();\n      calculatedRate = this.cubicThrottle(rateToUse);\n      this.enableTokenBucket();\n    } else {\n      this.calculateTimeWindow();\n      calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n    }\n    var newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n    this.updateTokenBucketRate(newRate);\n  };\n  DefaultRateLimiter.prototype.calculateTimeWindow = function () {\n    this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));\n  };\n  DefaultRateLimiter.prototype.cubicThrottle = function (rateToUse) {\n    return this.getPrecise(rateToUse * this.beta);\n  };\n  DefaultRateLimiter.prototype.cubicSuccess = function (timestamp) {\n    return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n  };\n  DefaultRateLimiter.prototype.enableTokenBucket = function () {\n    this.enabled = true;\n  };\n  DefaultRateLimiter.prototype.updateTokenBucketRate = function (newRate) {\n    this.refillTokenBucket();\n    this.fillRate = Math.max(newRate, this.minFillRate);\n    this.maxCapacity = Math.max(newRate, this.minCapacity);\n    this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n  };\n  DefaultRateLimiter.prototype.updateMeasuredRate = function () {\n    var t = this.getCurrentTimeInSeconds();\n    var timeBucket = Math.floor(t * 2) / 2;\n    this.requestCount++;\n    if (timeBucket > this.lastTxRateBucket) {\n      var currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n      this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n      this.requestCount = 0;\n      this.lastTxRateBucket = timeBucket;\n    }\n  };\n  DefaultRateLimiter.prototype.getPrecise = function (num) {\n    return parseFloat(num.toFixed(8));\n  };\n  return DefaultRateLimiter;\n}();\nexport { DefaultRateLimiter };","map":{"version":3,"names":["__awaiter","__generator","isThrottlingError","DefaultRateLimiter","options","_a","_b","_c","_d","_e","currentCapacity","enabled","lastMaxRate","measuredTxRate","requestCount","lastTimestamp","timeWindow","beta","minCapacity","minFillRate","scaleConstant","smooth","currentTimeInSeconds","getCurrentTimeInSeconds","lastThrottleTime","lastTxRateBucket","Math","floor","fillRate","maxCapacity","prototype","Date","now","getSendToken","acquireTokenBucket","amount","delay_1","label","refillTokenBucket","Promise","resolve","setTimeout","sent","timestamp","fillAmount","min","updateClientSendingRate","response","calculatedRate","updateMeasuredRate","rateToUse","calculateTimeWindow","cubicThrottle","enableTokenBucket","cubicSuccess","newRate","updateTokenBucketRate","getPrecise","pow","max","t","timeBucket","currentRate","num","parseFloat","toFixed"],"sources":["F:/project/front-end/hei-admin-ui/node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nvar DefaultRateLimiter = (function () {\n    function DefaultRateLimiter(options) {\n        var _a, _b, _c, _d, _e;\n        this.currentCapacity = 0;\n        this.enabled = false;\n        this.lastMaxRate = 0;\n        this.measuredTxRate = 0;\n        this.requestCount = 0;\n        this.lastTimestamp = 0;\n        this.timeWindow = 0;\n        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;\n        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;\n        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;\n        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;\n        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;\n        var currentTimeInSeconds = this.getCurrentTimeInSeconds();\n        this.lastThrottleTime = currentTimeInSeconds;\n        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n        this.fillRate = this.minFillRate;\n        this.maxCapacity = this.minCapacity;\n    }\n    DefaultRateLimiter.prototype.getCurrentTimeInSeconds = function () {\n        return Date.now() / 1000;\n    };\n    DefaultRateLimiter.prototype.getSendToken = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2, this.acquireTokenBucket(1)];\n            });\n        });\n    };\n    DefaultRateLimiter.prototype.acquireTokenBucket = function (amount) {\n        return __awaiter(this, void 0, void 0, function () {\n            var delay_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.enabled) {\n                            return [2];\n                        }\n                        this.refillTokenBucket();\n                        if (!(amount > this.currentCapacity)) return [3, 2];\n                        delay_1 = ((amount - this.currentCapacity) / this.fillRate) * 1000;\n                        return [4, new Promise(function (resolve) { return setTimeout(resolve, delay_1); })];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        this.currentCapacity = this.currentCapacity - amount;\n                        return [2];\n                }\n            });\n        });\n    };\n    DefaultRateLimiter.prototype.refillTokenBucket = function () {\n        var timestamp = this.getCurrentTimeInSeconds();\n        if (!this.lastTimestamp) {\n            this.lastTimestamp = timestamp;\n            return;\n        }\n        var fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n        this.lastTimestamp = timestamp;\n    };\n    DefaultRateLimiter.prototype.updateClientSendingRate = function (response) {\n        var calculatedRate;\n        this.updateMeasuredRate();\n        if (isThrottlingError(response)) {\n            var rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n            this.lastMaxRate = rateToUse;\n            this.calculateTimeWindow();\n            this.lastThrottleTime = this.getCurrentTimeInSeconds();\n            calculatedRate = this.cubicThrottle(rateToUse);\n            this.enableTokenBucket();\n        }\n        else {\n            this.calculateTimeWindow();\n            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n        }\n        var newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n        this.updateTokenBucketRate(newRate);\n    };\n    DefaultRateLimiter.prototype.calculateTimeWindow = function () {\n        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));\n    };\n    DefaultRateLimiter.prototype.cubicThrottle = function (rateToUse) {\n        return this.getPrecise(rateToUse * this.beta);\n    };\n    DefaultRateLimiter.prototype.cubicSuccess = function (timestamp) {\n        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n    };\n    DefaultRateLimiter.prototype.enableTokenBucket = function () {\n        this.enabled = true;\n    };\n    DefaultRateLimiter.prototype.updateTokenBucketRate = function (newRate) {\n        this.refillTokenBucket();\n        this.fillRate = Math.max(newRate, this.minFillRate);\n        this.maxCapacity = Math.max(newRate, this.minCapacity);\n        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n    };\n    DefaultRateLimiter.prototype.updateMeasuredRate = function () {\n        var t = this.getCurrentTimeInSeconds();\n        var timeBucket = Math.floor(t * 2) / 2;\n        this.requestCount++;\n        if (timeBucket > this.lastTxRateBucket) {\n            var currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n            this.requestCount = 0;\n            this.lastTxRateBucket = timeBucket;\n        }\n    };\n    DefaultRateLimiter.prototype.getPrecise = function (num) {\n        return parseFloat(num.toFixed(8));\n    };\n    return DefaultRateLimiter;\n}());\nexport { DefaultRateLimiter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}