{"ast":null,"code":"import { isMatch, isValid, parseISO } from 'date-fns';\nexport var isNumeric = function (value) {\n  return !isNaN(parseFloat(value)) && isFinite(value);\n};\nexport var valuesAreNumeric = function (values) {\n  return values.every(isNumeric);\n};\nexport var isInteger = function (value) {\n  return Number.isInteger(value) || !isNaN(parseInt(value));\n};\nexport var valuesAreInteger = function (values) {\n  return values.every(isInteger);\n};\nexport var isBoolean = function (value) {\n  return typeof value === 'boolean';\n};\nexport var valuesAreBoolean = function (values) {\n  return values.every(isBoolean);\n};\nexport var isBooleanString = function (value) {\n  return ['true', 'false'].includes(value.toString().toLowerCase());\n};\nexport var valuesAreBooleanString = function (values) {\n  return values.every(isBooleanString);\n};\nexport var isString = function (value) {\n  return typeof value === 'string';\n};\nexport var valuesAreString = function (values) {\n  return values.every(isString);\n};\nvar HtmlRegexp = /<([A-Z][A-Z0-9]*)\\b[^>]*>(.*?)<\\/\\1>/i;\nexport var isHtml = function (value) {\n  return !value || HtmlRegexp.test(value);\n};\nexport var valuesAreHtml = function (values) {\n  return values.every(isHtml);\n};\nvar UrlRegexp = /http(s*):\\/\\/.*/i;\nexport var isUrl = function (value) {\n  return !value || UrlRegexp.test(value);\n};\nexport var valuesAreUrl = function (values) {\n  return values.every(isUrl);\n};\nvar ImageUrlRegexp = /http(s*):\\/\\/.*\\.(jpeg|jpg|jfif|pjpeg|pjp|png|svg|gif|webp|apng|bmp|ico|cur|tif|tiff)/i;\nexport var isImageUrl = function (value) {\n  return !value || ImageUrlRegexp.test(value);\n};\nexport var valuesAreImageUrl = function (values) {\n  return values.every(isImageUrl);\n};\n// This is a very simple regex to find emails\n// It is NOT meant to validate emails as the spec is way more complicated but is\n// enough for our inference needs\nvar EmailRegexp = /@{1}/;\nexport var isEmail = function (value) {\n  return !value || EmailRegexp.test(value);\n};\nexport var valuesAreEmail = function (values) {\n  return values.every(isEmail);\n};\nexport var isArray = function (value) {\n  return Array.isArray(value);\n};\nexport var valuesAreArray = function (values) {\n  return values.every(isArray);\n};\nexport var isDate = function (value) {\n  return !value || value instanceof Date;\n};\nexport var valuesAreDate = function (values) {\n  return values.every(isDate);\n};\nexport var isDateString = function (value) {\n  return !value || typeof value === 'string' && (isMatch(value, 'MM/dd/yyyy') || isMatch(value, 'MM/dd/yy') || isValid(parseISO(value)));\n};\nexport var valuesAreDateString = function (values) {\n  return values.every(isDateString);\n};\nexport var isObject = function (value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n};\nexport var valuesAreObject = function (values) {\n  return values.every(isObject);\n};","map":{"version":3,"sources":["../../../src/inference/assertions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isMatch, isValid, parseISO } from 'date-fns';\nexport var isNumeric = function (value) {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};\nexport var valuesAreNumeric = function (values) { return values.every(isNumeric); };\nexport var isInteger = function (value) {\n    return Number.isInteger(value) || !isNaN(parseInt(value));\n};\nexport var valuesAreInteger = function (values) { return values.every(isInteger); };\nexport var isBoolean = function (value) { return typeof value === 'boolean'; };\nexport var valuesAreBoolean = function (values) { return values.every(isBoolean); };\nexport var isBooleanString = function (value) {\n    return ['true', 'false'].includes(value.toString().toLowerCase());\n};\nexport var valuesAreBooleanString = function (values) {\n    return values.every(isBooleanString);\n};\nexport var isString = function (value) { return typeof value === 'string'; };\nexport var valuesAreString = function (values) { return values.every(isString); };\nvar HtmlRegexp = /<([A-Z][A-Z0-9]*)\\b[^>]*>(.*?)<\\/\\1>/i;\nexport var isHtml = function (value) { return !value || HtmlRegexp.test(value); };\nexport var valuesAreHtml = function (values) { return values.every(isHtml); };\nvar UrlRegexp = /http(s*):\\/\\/.*/i;\nexport var isUrl = function (value) { return !value || UrlRegexp.test(value); };\nexport var valuesAreUrl = function (values) { return values.every(isUrl); };\nvar ImageUrlRegexp = /http(s*):\\/\\/.*\\.(jpeg|jpg|jfif|pjpeg|pjp|png|svg|gif|webp|apng|bmp|ico|cur|tif|tiff)/i;\nexport var isImageUrl = function (value) { return !value || ImageUrlRegexp.test(value); };\nexport var valuesAreImageUrl = function (values) { return values.every(isImageUrl); };\n// This is a very simple regex to find emails\n// It is NOT meant to validate emails as the spec is way more complicated but is\n// enough for our inference needs\nvar EmailRegexp = /@{1}/;\nexport var isEmail = function (value) { return !value || EmailRegexp.test(value); };\nexport var valuesAreEmail = function (values) { return values.every(isEmail); };\nexport var isArray = function (value) { return Array.isArray(value); };\nexport var valuesAreArray = function (values) { return values.every(isArray); };\nexport var isDate = function (value) { return !value || value instanceof Date; };\nexport var valuesAreDate = function (values) { return values.every(isDate); };\nexport var isDateString = function (value) {\n    return !value ||\n        (typeof value === 'string' &&\n            (isMatch(value, 'MM/dd/yyyy') ||\n                isMatch(value, 'MM/dd/yy') ||\n                isValid(parseISO(value))));\n};\nexport var valuesAreDateString = function (values) {\n    return values.every(isDateString);\n};\nexport var isObject = function (value) {\n    return Object.prototype.toString.call(value) === '[object Object]';\n};\nexport var valuesAreObject = function (values) { return values.every(isObject); };\n//# sourceMappingURL=assertions.js.map"]},"metadata":{},"sourceType":"module"}