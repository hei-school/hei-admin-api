{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { EditContext } from './EditContext';\n/**\n * Hook to read the edit controller props from the CreateContext.\n *\n * Mostly used within a <EditContext.Provider> (e.g. as a descendent of <Edit>).\n *\n * But you can also use it without a <EditContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} EditControllerProps\n *\n * @returns {EditControllerResult} edit controller props\n *\n * @see useEditController for how it is filled\n *\n */\nexport var useEditContext = function (props) {\n  // Can't find a way to specify the RecordType when EditContext is declared\n  // @ts-ignore\n  var context = useContext(EditContext);\n  // Props take precedence over the context\n  return useMemo(function () {\n    return defaults({}, props != null ? extractEditContextProps(props) : {}, context);\n  }, [context, props]);\n};\n/**\n * Extract only the edit controller props\n *\n * @param {Object} props props passed to the useEditContext hook\n *\n * @returns {EditControllerResult} edit controller props\n */\nvar extractEditContextProps = function (_a) {\n  var data = _a.data,\n    record = _a.record,\n    defaultTitle = _a.defaultTitle,\n    isFetching = _a.isFetching,\n    isLoading = _a.isLoading,\n    mutationMode = _a.mutationMode,\n    redirect = _a.redirect,\n    resource = _a.resource,\n    save = _a.save,\n    saving = _a.saving;\n  return {\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    data: record || data,\n    record: record || data,\n    defaultTitle: defaultTitle,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    mutationMode: mutationMode,\n    redirect: redirect,\n    resource: resource,\n    save: save,\n    saving: saving\n  };\n};","map":{"version":3,"sources":["../../../../src/controller/edit/useEditContext.tsx"],"names":[],"mappings":"AAAA,SAAS,UAAU,EAAE,OAAO,QAAQ,OAAO;AAC3C,OAAO,QAAQ,MAAM,iBAAiB;AAGtC,SAAS,WAAW,QAAQ,eAAe;AAG3C;;;;;;;;;;;;;;;;AAgBG;AACH,OAAO,IAAM,cAAc,GAAG,UAC1B,KAAiD,EAAA;EAEjD;EACA;EACA,IAAM,OAAO,GAAG,UAAU,CAAmC,WAAW,CAAC;EAEzE;EACA,OAAO,OAAO,CACV,YAAA;IACI,OAAA,QAAQ,CACJ,CAAA,CAAE,EACF,KAAK,IAAI,IAAI,GAAG,uBAAuB,CAAC,KAAK,CAAC,GAAG,CAAA,CAAE,EACnD,OAAO,CACV;EAJD,CAIC,EACL,CAAC,OAAO,EAAE,KAAK,CAAC,CACnB;AACL,CAAC;AAED;;;;;;AAMG;AACH,IAAM,uBAAuB,GAAG,UAAC,EAW3B,EAAA;MAVF,IAAI,GAAA,EAAA,CAAA,IAAA;IACJ,MAAM,GAAA,EAAA,CAAA,MAAA;IACN,YAAY,GAAA,EAAA,CAAA,YAAA;IACZ,UAAU,GAAA,EAAA,CAAA,UAAA;IACV,SAAS,GAAA,EAAA,CAAA,SAAA;IACT,YAAY,GAAA,EAAA,CAAA,YAAA;IACZ,QAAQ,GAAA,EAAA,CAAA,QAAA;IACR,QAAQ,GAAA,EAAA,CAAA,QAAA;IACR,IAAI,GAAA,EAAA,CAAA,IAAA;IACJ,MAAM,GAAA,EAAA,CAAA,MAAA;EACC,OAAC;IACR;IACA;IACA,IAAI,EAAE,MAAM,IAAI,IAAI;IACpB,MAAM,EAAE,MAAM,IAAI,IAAI;IACtB,YAAY,EAAA,YAAA;IACZ,UAAU,EAAA,UAAA;IACV,SAAS,EAAA,SAAA;IACT,YAAY,EAAA,YAAA;IACZ,QAAQ,EAAA,QAAA;IACR,QAAQ,EAAA,QAAA;IACR,IAAI,EAAA,IAAA;IACJ,MAAM,EAAA;GACT;AAbU,CAaT","sourceRoot":"","sourcesContent":["import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { EditContext } from './EditContext';\n/**\n * Hook to read the edit controller props from the CreateContext.\n *\n * Mostly used within a <EditContext.Provider> (e.g. as a descendent of <Edit>).\n *\n * But you can also use it without a <EditContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} EditControllerProps\n *\n * @returns {EditControllerResult} edit controller props\n *\n * @see useEditController for how it is filled\n *\n */\nexport var useEditContext = function (props) {\n    // Can't find a way to specify the RecordType when EditContext is declared\n    // @ts-ignore\n    var context = useContext(EditContext);\n    // Props take precedence over the context\n    return useMemo(function () {\n        return defaults({}, props != null ? extractEditContextProps(props) : {}, context);\n    }, [context, props]);\n};\n/**\n * Extract only the edit controller props\n *\n * @param {Object} props props passed to the useEditContext hook\n *\n * @returns {EditControllerResult} edit controller props\n */\nvar extractEditContextProps = function (_a) {\n    var data = _a.data, record = _a.record, defaultTitle = _a.defaultTitle, isFetching = _a.isFetching, isLoading = _a.isLoading, mutationMode = _a.mutationMode, redirect = _a.redirect, resource = _a.resource, save = _a.save, saving = _a.saving;\n    return ({\n        // Necessary for actions (EditActions) which expect a data prop containing the record\n        // @deprecated - to be removed in 4.0d\n        data: record || data,\n        record: record || data,\n        defaultTitle: defaultTitle,\n        isFetching: isFetching,\n        isLoading: isLoading,\n        mutationMode: mutationMode,\n        redirect: redirect,\n        resource: resource,\n        save: save,\n        saving: saving,\n    });\n};\n//# sourceMappingURL=useEditContext.js.map"]},"metadata":{},"sourceType":"module"}