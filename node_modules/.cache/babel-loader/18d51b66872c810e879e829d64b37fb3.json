{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetContentModerationRequest, GetContentModerationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetContentModerationCommand, serializeAws_json1_1GetContentModerationCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the unsafe content analysis results for a Amazon Rekognition Video analysis started by\n *        <a>StartContentModeration</a>.</p>\n *\n *          <p>Unsafe content analysis of a video is an asynchronous operation. You start analysis by calling\n *        <a>StartContentModeration</a> which returns a job identifier (<code>JobId</code>).\n *        When analysis finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *        topic registered in the initial call to <code>StartContentModeration</code>.\n *        To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *        topic is <code>SUCCEEDED</code>. If so, call  <code>GetContentModeration</code> and pass the job identifier\n *        (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Working with Stored Videos in the\n *      Amazon Rekognition Devlopers Guide.</p>\n *          <p>\n *             <code>GetContentModeration</code> returns detected unsafe content labels,\n *       and the time they are detected, in an array, <code>ModerationLabels</code>, of\n *       <a>ContentModerationDetection</a> objects.\n *      </p>\n *          <p>By default, the moderated labels are returned sorted by time, in milliseconds from the start of the\n *        video. You can also sort them by moderated label by specifying <code>NAME</code> for the <code>SortBy</code>\n *        input parameter. </p>\n *          <p>Since video analysis can return a large number of results, use the <code>MaxResults</code> parameter to limit\n *       the number of labels returned in a single call to <code>GetContentModeration</code>. If there are more results than\n *        specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *        pagination token for getting the next set of results. To get the next page of results, call <code>GetContentModeration</code>\n *        and populate the <code>NextToken</code> request parameter with the value of <code>NextToken</code>\n *        returned from the previous call to <code>GetContentModeration</code>.</p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\nvar GetContentModerationCommand = /** @class */function (_super) {\n  __extends(GetContentModerationCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetContentModerationCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetContentModerationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetContentModerationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetContentModerationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetContentModerationResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetContentModerationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetContentModerationCommand(input, context);\n  };\n  GetContentModerationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetContentModerationCommand(output, context);\n  };\n  return GetContentModerationCommand;\n}($Command);\nexport { GetContentModerationCommand };","map":{"version":3,"sources":["../../../commands/GetContentModerationCommand.ts"],"names":[],"mappings":";AACA,SAAS,2BAA2B,EAAE,4BAA4B,QAAQ,oBAAoB;AAC9F,SACE,iDAAiD,EACjD,+CAA+C,QAC1C,0BAA0B;AACjC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,OAAO,IAAI,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BG;AACH,IAAA,2BAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiD,SAAA,CAAA,2BAAA,EAAA,MAAA,CAAA;EAK/C;EACA;EAEA,SAAA,2BAAA,CAAqB,KAAuC,EAAA;IAA5D,IAAA,KAAA;IACE;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAFY,KAAA,CAAA,KAAK,GAAL,KAAK;;IAGxB;EACF;EAEA;;AAEG;EACH,2BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UACE,WAAmE,EACnE,aAA8C,EAC9C,OAA8B,EAAA;IAE9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzF,IAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAE9C,IAAA,MAAM,GAAK,aAAa,CAAA,MAAlB;IACd,IAAM,UAAU,GAAG,mBAAmB;IACtC,IAAM,WAAW,GAAG,6BAA6B;IACjD,IAAM,uBAAuB,GAA4B;MACvD,MAAM,EAAA,MAAA;MACN,UAAU,EAAA,UAAA;MACV,WAAW,EAAA,WAAA;MACX,uBAAuB,EAAE,2BAA2B,CAAC,kBAAkB;MACvE,wBAAwB,EAAE,4BAA4B,CAAC;KACxD;IACO,IAAA,cAAc,GAAK,aAAa,CAAA,cAAlB;IACtB,OAAO,KAAK,CAAC,OAAO,CAClB,UAAC,OAAsC,EAAA;MACrC,OAAA,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAwB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;IAAtE,CAAsE,EACxE,uBAAuB,CACxB;EACH,CAAC;EAEO,2BAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAuC,EAAE,OAAuB,EAAA;IAChF,OAAO,+CAA+C,CAAC,KAAK,EAAE,OAAO,CAAC;EACxE,CAAC;EAEO,2BAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,MAAsB,EAAE,OAAuB,EAAA;IACjE,OAAO,iDAAiD,CAAC,MAAM,EAAE,OAAO,CAAC;EAC3E,CAAC;EAIH,OAAA,2BAAC;AAAD,CAAC,CAtDgD,QAAQ,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetContentModerationRequest, GetContentModerationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetContentModerationCommand, serializeAws_json1_1GetContentModerationCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the unsafe content analysis results for a Amazon Rekognition Video analysis started by\n *        <a>StartContentModeration</a>.</p>\n *\n *          <p>Unsafe content analysis of a video is an asynchronous operation. You start analysis by calling\n *        <a>StartContentModeration</a> which returns a job identifier (<code>JobId</code>).\n *        When analysis finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *        topic registered in the initial call to <code>StartContentModeration</code>.\n *        To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *        topic is <code>SUCCEEDED</code>. If so, call  <code>GetContentModeration</code> and pass the job identifier\n *        (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Working with Stored Videos in the\n *      Amazon Rekognition Devlopers Guide.</p>\n *          <p>\n *             <code>GetContentModeration</code> returns detected unsafe content labels,\n *       and the time they are detected, in an array, <code>ModerationLabels</code>, of\n *       <a>ContentModerationDetection</a> objects.\n *      </p>\n *          <p>By default, the moderated labels are returned sorted by time, in milliseconds from the start of the\n *        video. You can also sort them by moderated label by specifying <code>NAME</code> for the <code>SortBy</code>\n *        input parameter. </p>\n *          <p>Since video analysis can return a large number of results, use the <code>MaxResults</code> parameter to limit\n *       the number of labels returned in a single call to <code>GetContentModeration</code>. If there are more results than\n *        specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *        pagination token for getting the next set of results. To get the next page of results, call <code>GetContentModeration</code>\n *        and populate the <code>NextToken</code> request parameter with the value of <code>NextToken</code>\n *        returned from the previous call to <code>GetContentModeration</code>.</p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\nvar GetContentModerationCommand = /** @class */ (function (_super) {\n    __extends(GetContentModerationCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetContentModerationCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetContentModerationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"GetContentModerationCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetContentModerationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: GetContentModerationResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetContentModerationCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetContentModerationCommand(input, context);\n    };\n    GetContentModerationCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetContentModerationCommand(output, context);\n    };\n    return GetContentModerationCommand;\n}($Command));\nexport { GetContentModerationCommand };\n//# sourceMappingURL=GetContentModerationCommand.js.map"]},"metadata":{},"sourceType":"module"}