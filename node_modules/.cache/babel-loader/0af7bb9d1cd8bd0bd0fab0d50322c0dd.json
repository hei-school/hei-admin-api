{"ast":null,"code":"import * as React from 'react';\nimport { useLocaleState } from 'react-admin';\nimport { groupByDay } from './groupByDay';\nimport { TimelineGroup as DefaultTimelineGroup } from './TimelineGroup';\nimport { TimelineGroupContextProvider } from './TimelineGroupContextProvider';\nimport { TimelineSkeleton } from './TimelineSkeleton';\n/**\n * Displays a list of events, the most recent first, grouped by day. It's the ideal component for checking the recent activity of an admin.\n *\n * @param props The component props\n * @param props.children Optional. A component which will be rendered for each group of audit logs.\n * @param props.isLoading Optional. A boolean indicating whether the data has never been fetched yet.\n * @param props.records An array of the audit log records\n * @param props.skeletonItems Optional. The number of items to display in the skeleton used when data is being fetched.\n *\n * @example <caption>Basic usage</caption>\n * import { useGetList } from 'react-admin';\n * import { Timeline } from '@react-admin/ra-audit-log';\n *\n * const Dashboard = () => {\n *     const { data, ids, isLoading } = useGetList(\n *         'audit-logs',\n *         { page: 1, perPage: 25 },\n *         { field: 'date', order: 'desc' },\n *     });\n *\n *     return (\n *         <Timeline isLoading={isLoading} records={data} />\n *     );\n * }\n *\n * @example <caption>With custom group component</caption>\n * import { useGetList } from 'react-admin';\n * import { Timeline, useTimelineGroup } from '@react-admin/ra-audit-log';\n *\n * const MyTimelineGroup = () => {\n *     const { label, records } = useTimelineGroup();\n *\n *     return (\n *         <article>\n *             <h1>{label}</h1>\n *             <ul>\n *                 {records.map(record => (\n *                     <li>{JSON.stringify(record)}</li>\n *                 ))}\n *             </ul>\n *         </article>\n *     );\n * };\n *\n * const Dashboard = () => {\n *     const { data, ids, isLoading } = useGetList(\n *         'audit-logs',\n *         { page: 1, perPage: 25 },\n *         { field: 'date', order: 'desc' },\n *     });\n *\n *     return (\n *         <Timeline isLoading={isLoading} records={data}>\n *             <MyTimelineGroup />\n *         </Timeline>\n *     );\n * }\n */\nexport var Timeline = function (props) {\n  var _a = props.children,\n    children = _a === void 0 ? React.createElement(DefaultTimelineGroup, null) : _a,\n    _b = props.groupLogs,\n    groupLogs = _b === void 0 ? groupByDay : _b,\n    isLoading = props.isLoading,\n    _c = props.records,\n    records = _c === void 0 ? [] : _c,\n    skeletonItems = props.skeletonItems,\n    _d = props.skeleton,\n    skeleton = _d === void 0 ? React.createElement(TimelineSkeleton, {\n      length: skeletonItems || 10\n    }) : _d;\n  if (skeletonItems != null && process.env.NODE_ENV === 'development') {\n    console.warn(\"The skeletonItems prop is deprecated. You should provide the skeleton prop instead to customize the number of items displayed.\\n            \\n            <Timeline skeleton={<TimelineSkeleton length={20} />} />\\n            \");\n  }\n  var locale = useLocaleState()[0];\n  if (isLoading) {\n    return skeleton;\n  }\n  var groups = groupLogs(records, locale);\n  return React.createElement(React.Fragment, null, groups.map(function (group) {\n    return React.createElement(TimelineGroupContextProvider, {\n      key: group.label,\n      value: group\n    }, children);\n  }));\n};","map":{"version":3,"names":["React","useLocaleState","groupByDay","TimelineGroup","DefaultTimelineGroup","TimelineGroupContextProvider","TimelineSkeleton","Timeline","props","_a","children","createElement","_b","groupLogs","isLoading","_c","records","skeletonItems","_d","skeleton","length","process","env","NODE_ENV","console","warn","locale","groups","Fragment","map","group","key","label","value"],"sources":["F:/project/front-end/hei-admin-ui/node_modules/@react-admin/ra-audit-log/esm/src/Timeline/Timeline.js"],"sourcesContent":["import * as React from 'react';\nimport { useLocaleState } from 'react-admin';\nimport { groupByDay } from './groupByDay';\nimport { TimelineGroup as DefaultTimelineGroup } from './TimelineGroup';\nimport { TimelineGroupContextProvider } from './TimelineGroupContextProvider';\nimport { TimelineSkeleton } from './TimelineSkeleton';\n/**\n * Displays a list of events, the most recent first, grouped by day. It's the ideal component for checking the recent activity of an admin.\n *\n * @param props The component props\n * @param props.children Optional. A component which will be rendered for each group of audit logs.\n * @param props.isLoading Optional. A boolean indicating whether the data has never been fetched yet.\n * @param props.records An array of the audit log records\n * @param props.skeletonItems Optional. The number of items to display in the skeleton used when data is being fetched.\n *\n * @example <caption>Basic usage</caption>\n * import { useGetList } from 'react-admin';\n * import { Timeline } from '@react-admin/ra-audit-log';\n *\n * const Dashboard = () => {\n *     const { data, ids, isLoading } = useGetList(\n *         'audit-logs',\n *         { page: 1, perPage: 25 },\n *         { field: 'date', order: 'desc' },\n *     });\n *\n *     return (\n *         <Timeline isLoading={isLoading} records={data} />\n *     );\n * }\n *\n * @example <caption>With custom group component</caption>\n * import { useGetList } from 'react-admin';\n * import { Timeline, useTimelineGroup } from '@react-admin/ra-audit-log';\n *\n * const MyTimelineGroup = () => {\n *     const { label, records } = useTimelineGroup();\n *\n *     return (\n *         <article>\n *             <h1>{label}</h1>\n *             <ul>\n *                 {records.map(record => (\n *                     <li>{JSON.stringify(record)}</li>\n *                 ))}\n *             </ul>\n *         </article>\n *     );\n * };\n *\n * const Dashboard = () => {\n *     const { data, ids, isLoading } = useGetList(\n *         'audit-logs',\n *         { page: 1, perPage: 25 },\n *         { field: 'date', order: 'desc' },\n *     });\n *\n *     return (\n *         <Timeline isLoading={isLoading} records={data}>\n *             <MyTimelineGroup />\n *         </Timeline>\n *     );\n * }\n */\nexport var Timeline = function (props) {\n    var _a = props.children, children = _a === void 0 ? React.createElement(DefaultTimelineGroup, null) : _a, _b = props.groupLogs, groupLogs = _b === void 0 ? groupByDay : _b, isLoading = props.isLoading, _c = props.records, records = _c === void 0 ? [] : _c, skeletonItems = props.skeletonItems, _d = props.skeleton, skeleton = _d === void 0 ? React.createElement(TimelineSkeleton, { length: skeletonItems || 10 }) : _d;\n    if (skeletonItems != null && process.env.NODE_ENV === 'development') {\n        console.warn(\"The skeletonItems prop is deprecated. You should provide the skeleton prop instead to customize the number of items displayed.\\n            \\n            <Timeline skeleton={<TimelineSkeleton length={20} />} />\\n            \");\n    }\n    var locale = useLocaleState()[0];\n    if (isLoading) {\n        return skeleton;\n    }\n    var groups = groupLogs(records, locale);\n    return (React.createElement(React.Fragment, null, groups.map(function (group) { return (React.createElement(TimelineGroupContextProvider, { key: group.label, value: group }, children)); })));\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,QAAQ,aAAa;AAC5C,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,aAAa,IAAIC,oBAAoB,QAAQ,iBAAiB;AACvE,SAASC,4BAA4B,QAAQ,gCAAgC;AAC7E,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,QAAQ,GAAG,UAAUC,KAAK,EAAE;EACnC,IAAIC,EAAE,GAAGD,KAAK,CAACE,QAAQ;IAAEA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGT,KAAK,CAACW,aAAa,CAACP,oBAAoB,EAAE,IAAI,CAAC,GAAGK,EAAE;IAAEG,EAAE,GAAGJ,KAAK,CAACK,SAAS;IAAEA,SAAS,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGV,UAAU,GAAGU,EAAE;IAAEE,SAAS,GAAGN,KAAK,CAACM,SAAS;IAAEC,EAAE,GAAGP,KAAK,CAACQ,OAAO;IAAEA,OAAO,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,EAAE;IAAEE,aAAa,GAAGT,KAAK,CAACS,aAAa;IAAEC,EAAE,GAAGV,KAAK,CAACW,QAAQ;IAAEA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGlB,KAAK,CAACW,aAAa,CAACL,gBAAgB,EAAE;MAAEc,MAAM,EAAEH,aAAa,IAAI;IAAG,CAAC,CAAC,GAAGC,EAAE;EACja,IAAID,aAAa,IAAI,IAAI,IAAII,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IACjEC,OAAO,CAACC,IAAI,CAAC,kOAAkO,CAAC;EACpP;EACA,IAAIC,MAAM,GAAGzB,cAAc,EAAE,CAAC,CAAC,CAAC;EAChC,IAAIa,SAAS,EAAE;IACX,OAAOK,QAAQ;EACnB;EACA,IAAIQ,MAAM,GAAGd,SAAS,CAACG,OAAO,EAAEU,MAAM,CAAC;EACvC,OAAQ1B,KAAK,CAACW,aAAa,CAACX,KAAK,CAAC4B,QAAQ,EAAE,IAAI,EAAED,MAAM,CAACE,GAAG,CAAC,UAAUC,KAAK,EAAE;IAAE,OAAQ9B,KAAK,CAACW,aAAa,CAACN,4BAA4B,EAAE;MAAE0B,GAAG,EAAED,KAAK,CAACE,KAAK;MAAEC,KAAK,EAAEH;IAAM,CAAC,EAAEpB,QAAQ,CAAC;EAAG,CAAC,CAAC,CAAC;AACjM,CAAC"},"metadata":{},"sourceType":"module"}