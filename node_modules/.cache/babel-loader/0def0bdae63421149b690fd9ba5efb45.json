{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { useCallback } from 'react';\n// allow the hook to work in SSR\nvar useLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Alternative to useCallback that doesn't update the callback when dependencies change\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n * @see https://github.com/facebook/react/issues/14099#issuecomment-440013892\n */\nexport var useEventCallback = function (fn, dependencies) {\n  var ref = React.useRef(function () {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n  useLayoutEffect(function () {\n    ref.current = fn;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, __spreadArray([fn], dependencies, true));\n  return useCallback(function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return ref.current.apply(ref, args);\n  }, []);\n};","map":{"version":3,"sources":["../../../src/util/useEventCallback.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,WAAW,QAAQ,OAAO;AAEnC;AACA,IAAM,eAAe,GACjB,OAAO,MAAM,KAAK,WAAW,GAAG,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,SAAS;AAE3E;;;;;AAKG;AACH,OAAO,IAAM,gBAAgB,GAAG,UAC5B,EAA6B,EAC7B,YAAmB,EAAA;EAEnB,IAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAA4B,YAAA;IAChD,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC;EACpE,CAAC,CAAC;EAEF,eAAe,CAAC,YAAA;IACZ,GAAG,CAAC,OAAO,GAAG,EAAE;IAChB;EACJ,CAAC,EAAA,aAAA,CAAA,CAAG,EAAE,CAAA,EAAK,YAAY,EAAA,IAAA,CAAA,CAAE;EAEzB,OAAO,WAAW,CAAC,YAAA;IAAC,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAa,EAAb,EAAA,GAAA,SAAA,CAAA,MAAa,EAAb,EAAA,EAAa,EAAA;MAAb,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IAAkB,OAAA,GAAG,CAAC,OAAO,CAAA,KAAA,CAAX,GAAG,EAAY,IAAI,CAAA;EAAnB,CAAoB,EAAE,EAAE,CAAC;AACnE,CAAC","sourceRoot":"","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { useCallback } from 'react';\n// allow the hook to work in SSR\nvar useLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Alternative to useCallback that doesn't update the callback when dependencies change\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n * @see https://github.com/facebook/react/issues/14099#issuecomment-440013892\n */\nexport var useEventCallback = function (fn, dependencies) {\n    var ref = React.useRef(function () {\n        throw new Error('Cannot call an event handler while rendering.');\n    });\n    useLayoutEffect(function () {\n        ref.current = fn;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, __spreadArray([fn], dependencies, true));\n    return useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return ref.current.apply(ref, args);\n    }, []);\n};\n//# sourceMappingURL=useEventCallback.js.map"]},"metadata":{},"sourceType":"module"}