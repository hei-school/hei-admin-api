{"ast":null,"code":"/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport Observable from 'zen-observable-ts';\nimport { ConnectionState } from '../types/PubSub';\nimport { ReachabilityMonitor } from './ReachabilityMonitor';\nexport var CONNECTION_CHANGE = {\n  KEEP_ALIVE_MISSED: {\n    keepAliveState: 'unhealthy'\n  },\n  KEEP_ALIVE: {\n    keepAliveState: 'healthy'\n  },\n  CONNECTION_ESTABLISHED: {\n    connectionState: 'connected'\n  },\n  CONNECTION_FAILED: {\n    intendedConnectionState: 'disconnected',\n    connectionState: 'disconnected'\n  },\n  CLOSING_CONNECTION: {\n    intendedConnectionState: 'disconnected'\n  },\n  OPENING_CONNECTION: {\n    intendedConnectionState: 'connected',\n    connectionState: 'connecting'\n  },\n  CLOSED: {\n    connectionState: 'disconnected'\n  },\n  ONLINE: {\n    networkState: 'connected'\n  },\n  OFFLINE: {\n    networkState: 'disconnected'\n  }\n};\nvar ConnectionStateMonitor = /** @class */function () {\n  function ConnectionStateMonitor() {\n    var _this = this;\n    this._networkMonitoringSubscription = undefined;\n    this._linkedConnectionState = {\n      networkState: 'connected',\n      connectionState: 'disconnected',\n      intendedConnectionState: 'disconnected',\n      keepAliveState: 'healthy'\n    };\n    this._linkedConnectionStateObservable = new Observable(function (connectionStateObserver) {\n      connectionStateObserver.next(_this._linkedConnectionState);\n      _this._linkedConnectionStateObserver = connectionStateObserver;\n    });\n  }\n  /**\n   * Turn network state monitoring on if it isn't on already\n   */\n  ConnectionStateMonitor.prototype.enableNetworkMonitoring = function () {\n    var _this = this;\n    // Maintain the network state based on the reachability monitor\n    if (this._networkMonitoringSubscription === undefined) {\n      this._networkMonitoringSubscription = ReachabilityMonitor().subscribe(function (_a) {\n        var online = _a.online;\n        _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);\n      });\n    }\n  };\n  /**\n   * Turn network state monitoring off if it isn't off already\n   */\n  ConnectionStateMonitor.prototype.disableNetworkMonitoring = function () {\n    var _a;\n    (_a = this._networkMonitoringSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    this._networkMonitoringSubscription = undefined;\n  };\n  Object.defineProperty(ConnectionStateMonitor.prototype, \"connectionStateObservable\", {\n    /**\n     * Get the observable that allows us to monitor the connection state\n     *\n     * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates\n     */\n    get: function () {\n      var _this = this;\n      var previous;\n      // The linked state aggregates state changes to any of the network, connection,\n      // intendedConnection and keepAliveHealth. Some states will change these independent\n      // states without changing the overall connection state.\n      // After translating from linked states to ConnectionState, then remove any duplicates\n      return this._linkedConnectionStateObservable.map(function (value) {\n        return _this.connectionStatesTranslator(value);\n      }).filter(function (current) {\n        var toInclude = current !== previous;\n        previous = current;\n        return toInclude;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /*\n   * Updates local connection state and emits the full state to the observer.\n   */\n  ConnectionStateMonitor.prototype.record = function (statusUpdates) {\n    // Maintain the network monitor\n    if (statusUpdates.intendedConnectionState === 'connected') {\n      this.enableNetworkMonitoring();\n    } else if (statusUpdates.intendedConnectionState === 'disconnected') {\n      this.disableNetworkMonitoring();\n    }\n    // Maintain the socket state\n    var newSocketStatus = __assign(__assign({}, this._linkedConnectionState), statusUpdates);\n    this._linkedConnectionState = __assign({}, newSocketStatus);\n    this._linkedConnectionStateObserver.next(this._linkedConnectionState);\n  };\n  /*\n   * Translate the ConnectionState structure into a specific ConnectionState string literal union\n   */\n  ConnectionStateMonitor.prototype.connectionStatesTranslator = function (_a) {\n    var connectionState = _a.connectionState,\n      networkState = _a.networkState,\n      intendedConnectionState = _a.intendedConnectionState,\n      keepAliveState = _a.keepAliveState;\n    if (connectionState === 'connected' && networkState === 'disconnected') return ConnectionState.ConnectedPendingNetwork;\n    if (connectionState === 'connected' && intendedConnectionState === 'disconnected') return ConnectionState.ConnectedPendingDisconnect;\n    if (connectionState === 'disconnected' && intendedConnectionState === 'connected' && networkState === 'disconnected') return ConnectionState.ConnectionDisruptedPendingNetwork;\n    if (connectionState === 'disconnected' && intendedConnectionState === 'connected') return ConnectionState.ConnectionDisrupted;\n    if (connectionState === 'connected' && keepAliveState === 'unhealthy') return ConnectionState.ConnectedPendingKeepAlive;\n    // All remaining states directly correspond to the connection state\n    if (connectionState === 'connecting') return ConnectionState.Connecting;\n    if (connectionState === 'disconnected') return ConnectionState.Disconnected;\n    return ConnectionState.Connected;\n  };\n  return ConnectionStateMonitor;\n}();\nexport { ConnectionStateMonitor };","map":{"version":3,"sources":["../../src/utils/ConnectionStateMonitor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport Observable from 'zen-observable-ts';\nimport { ConnectionState } from '../types/PubSub';\nimport { ReachabilityMonitor } from './ReachabilityMonitor';\nexport var CONNECTION_CHANGE = {\n    KEEP_ALIVE_MISSED: { keepAliveState: 'unhealthy' },\n    KEEP_ALIVE: { keepAliveState: 'healthy' },\n    CONNECTION_ESTABLISHED: { connectionState: 'connected' },\n    CONNECTION_FAILED: {\n        intendedConnectionState: 'disconnected',\n        connectionState: 'disconnected',\n    },\n    CLOSING_CONNECTION: { intendedConnectionState: 'disconnected' },\n    OPENING_CONNECTION: {\n        intendedConnectionState: 'connected',\n        connectionState: 'connecting',\n    },\n    CLOSED: { connectionState: 'disconnected' },\n    ONLINE: { networkState: 'connected' },\n    OFFLINE: { networkState: 'disconnected' },\n};\nvar ConnectionStateMonitor = /** @class */ (function () {\n    function ConnectionStateMonitor() {\n        var _this = this;\n        this._networkMonitoringSubscription = undefined;\n        this._linkedConnectionState = {\n            networkState: 'connected',\n            connectionState: 'disconnected',\n            intendedConnectionState: 'disconnected',\n            keepAliveState: 'healthy',\n        };\n        this._linkedConnectionStateObservable =\n            new Observable(function (connectionStateObserver) {\n                connectionStateObserver.next(_this._linkedConnectionState);\n                _this._linkedConnectionStateObserver = connectionStateObserver;\n            });\n    }\n    /**\n     * Turn network state monitoring on if it isn't on already\n     */\n    ConnectionStateMonitor.prototype.enableNetworkMonitoring = function () {\n        var _this = this;\n        // Maintain the network state based on the reachability monitor\n        if (this._networkMonitoringSubscription === undefined) {\n            this._networkMonitoringSubscription = ReachabilityMonitor().subscribe(function (_a) {\n                var online = _a.online;\n                _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);\n            });\n        }\n    };\n    /**\n     * Turn network state monitoring off if it isn't off already\n     */\n    ConnectionStateMonitor.prototype.disableNetworkMonitoring = function () {\n        var _a;\n        (_a = this._networkMonitoringSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._networkMonitoringSubscription = undefined;\n    };\n    Object.defineProperty(ConnectionStateMonitor.prototype, \"connectionStateObservable\", {\n        /**\n         * Get the observable that allows us to monitor the connection state\n         *\n         * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates\n         */\n        get: function () {\n            var _this = this;\n            var previous;\n            // The linked state aggregates state changes to any of the network, connection,\n            // intendedConnection and keepAliveHealth. Some states will change these independent\n            // states without changing the overall connection state.\n            // After translating from linked states to ConnectionState, then remove any duplicates\n            return this._linkedConnectionStateObservable\n                .map(function (value) {\n                return _this.connectionStatesTranslator(value);\n            })\n                .filter(function (current) {\n                var toInclude = current !== previous;\n                previous = current;\n                return toInclude;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /*\n     * Updates local connection state and emits the full state to the observer.\n     */\n    ConnectionStateMonitor.prototype.record = function (statusUpdates) {\n        // Maintain the network monitor\n        if (statusUpdates.intendedConnectionState === 'connected') {\n            this.enableNetworkMonitoring();\n        }\n        else if (statusUpdates.intendedConnectionState === 'disconnected') {\n            this.disableNetworkMonitoring();\n        }\n        // Maintain the socket state\n        var newSocketStatus = __assign(__assign({}, this._linkedConnectionState), statusUpdates);\n        this._linkedConnectionState = __assign({}, newSocketStatus);\n        this._linkedConnectionStateObserver.next(this._linkedConnectionState);\n    };\n    /*\n     * Translate the ConnectionState structure into a specific ConnectionState string literal union\n     */\n    ConnectionStateMonitor.prototype.connectionStatesTranslator = function (_a) {\n        var connectionState = _a.connectionState, networkState = _a.networkState, intendedConnectionState = _a.intendedConnectionState, keepAliveState = _a.keepAliveState;\n        if (connectionState === 'connected' && networkState === 'disconnected')\n            return ConnectionState.ConnectedPendingNetwork;\n        if (connectionState === 'connected' &&\n            intendedConnectionState === 'disconnected')\n            return ConnectionState.ConnectedPendingDisconnect;\n        if (connectionState === 'disconnected' &&\n            intendedConnectionState === 'connected' &&\n            networkState === 'disconnected')\n            return ConnectionState.ConnectionDisruptedPendingNetwork;\n        if (connectionState === 'disconnected' &&\n            intendedConnectionState === 'connected')\n            return ConnectionState.ConnectionDisrupted;\n        if (connectionState === 'connected' && keepAliveState === 'unhealthy')\n            return ConnectionState.ConnectedPendingKeepAlive;\n        // All remaining states directly correspond to the connection state\n        if (connectionState === 'connecting')\n            return ConnectionState.Connecting;\n        if (connectionState === 'disconnected')\n            return ConnectionState.Disconnected;\n        return ConnectionState.Connected;\n    };\n    return ConnectionStateMonitor;\n}());\nexport { ConnectionStateMonitor };\n//# sourceMappingURL=ConnectionStateMonitor.js.map"]},"metadata":{},"sourceType":"module"}