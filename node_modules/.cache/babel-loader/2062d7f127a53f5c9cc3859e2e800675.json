{"ast":null,"code":"import { __values } from \"tslib\";\nimport { cloneRequest } from \"./cloneRequest\";\nimport { GENERATED_HEADERS } from \"./constants\";\n/**\n * @internal\n */\nexport function prepareRequest(request) {\n  var e_1, _a;\n  // Create a clone of the request object that does not clone the body\n  request = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request);\n  try {\n    for (var _b = __values(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var headerName = _c.value;\n      if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n        delete request.headers[headerName];\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return request;\n}","map":{"version":3,"sources":["../../src/prepareRequest.ts"],"names":[],"mappings":";AAEA,SAAS,YAAY,QAAQ,gBAAgB;AAC7C,SAAS,iBAAiB,QAAQ,aAAa;AAE/C;;AAEG;AACH,OAAM,SAAU,cAAc,CAAC,OAAoB,EAAA;;EACjD;EACA,OAAO,GAAG,OAAQ,OAAe,CAAC,KAAK,KAAK,UAAU,GAAI,OAAe,CAAC,KAAK,EAAE,GAAG,YAAY,CAAC,OAAO,CAAC;;IAEzG,KAAyB,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;MAAlD,IAAM,UAAU,GAAA,EAAA,CAAA,KAAA;MACnB,IAAI,iBAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;QAC5D,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;MACnC;IACF;;;;;;;;;;;;EAED,OAAO,OAAO;AAChB","sourcesContent":["import { HttpRequest } from \"@aws-sdk/types\";\n\nimport { cloneRequest } from \"./cloneRequest\";\nimport { GENERATED_HEADERS } from \"./constants\";\n\n/**\n * @internal\n */\nexport function prepareRequest(request: HttpRequest): HttpRequest {\n  // Create a clone of the request object that does not clone the body\n  request = typeof (request as any).clone === \"function\" ? (request as any).clone() : cloneRequest(request);\n\n  for (const headerName of Object.keys(request.headers)) {\n    if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n      delete request.headers[headerName];\n    }\n  }\n\n  return request;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}