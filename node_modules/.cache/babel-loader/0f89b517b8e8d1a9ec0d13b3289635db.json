{"ast":null,"code":"import * as React from 'react';\nimport { CoreAdminContext } from './CoreAdminContext';\nimport { CoreAdminUI } from './CoreAdminUI';\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </CoreAdmin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </CoreAdmin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <CoreAdmin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\n * import { useEffect, useState } from 'react';\n * import {\n *     CoreAdminContext,\n *     CoreAdminUI,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdminContext dataProvider={myDataProvider}>\n *         <UI />\n *     </CoreAdminContext>\n * );\n *\n * const UI = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <CoreAdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </CoreAdminUI>\n *     );\n * };\n */\nexport var CoreAdmin = function (props) {\n  var authProvider = props.authProvider,\n    basename = props.basename,\n    catchAll = props.catchAll,\n    children = props.children,\n    dashboard = props.dashboard,\n    dataProvider = props.dataProvider,\n    disableTelemetry = props.disableTelemetry,\n    history = props.history,\n    i18nProvider = props.i18nProvider,\n    queryClient = props.queryClient,\n    layout = props.layout,\n    loading = props.loading,\n    loginPage = props.loginPage,\n    menu = props.menu,\n    // deprecated, use a custom layout instead\n    ready = props.ready,\n    requireAuth = props.requireAuth,\n    store = props.store,\n    _a = props.title,\n    title = _a === void 0 ? 'React Admin' : _a;\n  return React.createElement(CoreAdminContext, {\n    authProvider: authProvider,\n    basename: basename,\n    dataProvider: dataProvider,\n    i18nProvider: i18nProvider,\n    queryClient: queryClient,\n    history: history,\n    store: store\n  }, React.createElement(CoreAdminUI, {\n    layout: layout,\n    dashboard: dashboard,\n    disableTelemetry: disableTelemetry,\n    menu: menu,\n    catchAll: catchAll,\n    title: title,\n    loading: loading,\n    loginPage: loginPage,\n    requireAuth: requireAuth,\n    ready: ready\n  }, children));\n};","map":{"version":3,"sources":["../../../src/core/CoreAdmin.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAE9B,SAAS,gBAAgB,QAA+B,oBAAoB;AAC5E,SAAS,WAAW,QAA0B,eAAe;AAE7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EG;AACH,OAAO,IAAM,SAAS,GAAG,UAAC,KAAqB,EAAA;EAEvC,IAAA,YAAY,GAkBZ,KAAK,CAAA,YAlBO;IACZ,QAAQ,GAiBR,KAAK,CAAA,QAjBG;IACR,QAAQ,GAgBR,KAAK,CAAA,QAhBG;IACR,QAAQ,GAeR,KAAK,CAAA,QAfG;IACR,SAAS,GAcT,KAAK,CAAA,SAdI;IACT,YAAY,GAaZ,KAAK,CAAA,YAbO;IACZ,gBAAgB,GAYhB,KAAK,CAAA,gBAZW;IAChB,OAAO,GAWP,KAAK,CAAA,OAXE;IACP,YAAY,GAUZ,KAAK,CAAA,YAVO;IACZ,WAAW,GASX,KAAK,CAAA,WATM;IACX,MAAM,GAQN,KAAK,CAAA,MARC;IACN,OAAO,GAOP,KAAK,CAAA,OAPE;IACP,SAAS,GAMT,KAAK,CAAA,SANI;IACT,IAAI,GAKJ,KAAK,CAAA,IALD;IAAE;IACN,KAAK,GAIL,KAAK,CAAA,KAJA;IACL,WAAW,GAGX,KAAK,CAAA,WAHM;IACX,KAAK,GAEL,KAAK,CAAA,KAFA;IACL,EAAA,GACA,KAAK,CAAA,KADgB;IAArB,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,aAAa,GAAA,EAAA;EAEzB,OACI,KAAA,CAAA,aAAA,CAAC,gBAAgB,EAAA;IACb,YAAY,EAAE,YAAY;IAC1B,QAAQ,EAAE,QAAQ;IAClB,YAAY,EAAE,YAAY;IAC1B,YAAY,EAAE,YAAY;IAC1B,WAAW,EAAE,WAAW;IACxB,OAAO,EAAE,OAAO;IAChB,KAAK,EAAE;EAAK,CAAA,EAEZ,KAAA,CAAA,aAAA,CAAC,WAAW,EAAA;IACR,MAAM,EAAE,MAAM;IACd,SAAS,EAAE,SAAS;IACpB,gBAAgB,EAAE,gBAAgB;IAClC,IAAI,EAAE,IAAI;IACV,QAAQ,EAAE,QAAQ;IAClB,KAAK,EAAE,KAAK;IACZ,OAAO,EAAE,OAAO;IAChB,SAAS,EAAE,SAAS;IACpB,WAAW,EAAE,WAAW;IACxB,KAAK,EAAE;EAAK,CAAA,EAEX,QAAQ,CACC,CACC;AAE3B,CAAC","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { CoreAdminContext } from './CoreAdminContext';\nimport { CoreAdminUI } from './CoreAdminUI';\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </CoreAdmin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </CoreAdmin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <CoreAdmin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\n * import { useEffect, useState } from 'react';\n * import {\n *     CoreAdminContext,\n *     CoreAdminUI,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdminContext dataProvider={myDataProvider}>\n *         <UI />\n *     </CoreAdminContext>\n * );\n *\n * const UI = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <CoreAdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </CoreAdminUI>\n *     );\n * };\n */\nexport var CoreAdmin = function (props) {\n    var authProvider = props.authProvider, basename = props.basename, catchAll = props.catchAll, children = props.children, dashboard = props.dashboard, dataProvider = props.dataProvider, disableTelemetry = props.disableTelemetry, history = props.history, i18nProvider = props.i18nProvider, queryClient = props.queryClient, layout = props.layout, loading = props.loading, loginPage = props.loginPage, menu = props.menu, // deprecated, use a custom layout instead\n    ready = props.ready, requireAuth = props.requireAuth, store = props.store, _a = props.title, title = _a === void 0 ? 'React Admin' : _a;\n    return (React.createElement(CoreAdminContext, { authProvider: authProvider, basename: basename, dataProvider: dataProvider, i18nProvider: i18nProvider, queryClient: queryClient, history: history, store: store },\n        React.createElement(CoreAdminUI, { layout: layout, dashboard: dashboard, disableTelemetry: disableTelemetry, menu: menu, catchAll: catchAll, title: title, loading: loading, loginPage: loginPage, requireAuth: requireAuth, ready: ready }, children)));\n};\n//# sourceMappingURL=CoreAdmin.js.map"]},"metadata":{},"sourceType":"module"}