{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The create parameters { data }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.data The record to create, e.g. { title: 'hello, world' }\n *\n * @returns The current mutation state. Destructure as [create, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [create, { isLoading: false, isIdle: true }]\n * - start:   [create, { isLoading: true }]\n * - success: [create, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [create, { error: [error from response], isLoading: false, isError: true }]\n *\n * The create() function must be called with a resource and a parameter object: create(resource, { data, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the create callback\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate();\n *     const handleClick = () => {\n *         create('likes', { data: like })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate('likes', { data: like });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => create()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [create, { data }] = useCreate<Product>('products', { data: product });\n *                    \\-- data is Product\n */\nexport var useCreate = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var paramsRef = useRef(params);\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.resource,\n      callTimeResource = _c === void 0 ? resource : _c,\n      _d = _b.data,\n      callTimeData = _d === void 0 ? paramsRef.current.data : _d,\n      _e = _b.meta,\n      callTimeMeta = _e === void 0 ? paramsRef.current.meta : _e;\n    return dataProvider.create(callTimeResource, {\n      data: callTimeData,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, options), {\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      var _a = variables.resource,\n        callTimeResource = _a === void 0 ? resource : _a;\n      queryClient.setQueryData([callTimeResource, 'getOne', {\n        id: String(data.id)\n      }], data);\n      if (options.onSuccess) {\n        options.onSuccess(data, variables, context);\n      }\n      // call-time success callback is executed by react-query\n    }\n  }));\n\n  var create = function (callTimeResource, callTimeParams, createOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n    if (createOptions === void 0) {\n      createOptions = {};\n    }\n    var returnPromise = createOptions.returnPromise,\n      reactCreateOptions = __rest(createOptions, [\"returnPromise\"]);\n    if (returnPromise) {\n      return mutation.mutateAsync(__assign({\n        resource: callTimeResource\n      }, callTimeParams), createOptions);\n    }\n    mutation.mutate(__assign({\n      resource: callTimeResource\n    }, callTimeParams), reactCreateOptions);\n  };\n  return [create, mutation];\n};","map":{"version":3,"sources":["../../../src/dataProvider/useCreate.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient, } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The create parameters { data }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.data The record to create, e.g. { title: 'hello, world' }\n *\n * @returns The current mutation state. Destructure as [create, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [create, { isLoading: false, isIdle: true }]\n * - start:   [create, { isLoading: true }]\n * - success: [create, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [create, { error: [error from response], isLoading: false, isError: true }]\n *\n * The create() function must be called with a resource and a parameter object: create(resource, { data, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the create callback\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate();\n *     const handleClick = () => {\n *         create('likes', { data: like })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate('likes', { data: like });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => create()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [create, { data }] = useCreate<Product>('products', { data: product });\n *                    \\-- data is Product\n */\nexport var useCreate = function (resource, params, options) {\n    if (params === void 0) { params = {}; }\n    if (options === void 0) { options = {}; }\n    var dataProvider = useDataProvider();\n    var queryClient = useQueryClient();\n    var paramsRef = useRef(params);\n    var mutation = useMutation(function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.resource, callTimeResource = _c === void 0 ? resource : _c, _d = _b.data, callTimeData = _d === void 0 ? paramsRef.current.data : _d, _e = _b.meta, callTimeMeta = _e === void 0 ? paramsRef.current.meta : _e;\n        return dataProvider\n            .create(callTimeResource, {\n            data: callTimeData,\n            meta: callTimeMeta,\n        })\n            .then(function (_a) {\n            var data = _a.data;\n            return data;\n        });\n    }, __assign(__assign({}, options), { onSuccess: function (data, variables, context) {\n            if (variables === void 0) { variables = {}; }\n            var _a = variables.resource, callTimeResource = _a === void 0 ? resource : _a;\n            queryClient.setQueryData([callTimeResource, 'getOne', { id: String(data.id) }], data);\n            if (options.onSuccess) {\n                options.onSuccess(data, variables, context);\n            }\n            // call-time success callback is executed by react-query\n        } }));\n    var create = function (callTimeResource, callTimeParams, createOptions) {\n        if (callTimeResource === void 0) { callTimeResource = resource; }\n        if (callTimeParams === void 0) { callTimeParams = {}; }\n        if (createOptions === void 0) { createOptions = {}; }\n        var returnPromise = createOptions.returnPromise, reactCreateOptions = __rest(createOptions, [\"returnPromise\"]);\n        if (returnPromise) {\n            return mutation.mutateAsync(__assign({ resource: callTimeResource }, callTimeParams), createOptions);\n        }\n        mutation.mutate(__assign({ resource: callTimeResource }, callTimeParams), reactCreateOptions);\n    };\n    return [create, mutation];\n};\n//# sourceMappingURL=useCreate.js.map"]},"metadata":{},"sourceType":"module"}