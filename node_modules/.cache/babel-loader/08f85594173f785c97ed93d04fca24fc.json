{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { v1 as uuid } from 'uuid';\nimport { ConsoleLogger as Logger, JS } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nvar PERSONALIZE_CACHE = '_awsct';\nvar PERSONALIZE_CACHE_USERID = '_awsct_uid';\nvar PERSONALIZE_CACHE_SESSIONID = '_awsct_sid';\nvar DEFAULT_CACHE_PREFIX = 'peronslize';\nvar TIMER_INTERVAL = 30 * 1000;\nvar DELIMITER = '.';\nvar CACHE_EXPIRY_IN_DAYS = 7;\nvar logger = new Logger('AmazonPersonalizeProvider');\nvar SessionInfoManager = /** @class */function () {\n  function SessionInfoManager(prefixKey) {\n    if (prefixKey === void 0) {\n      prefixKey = '';\n    }\n    this._isBrowser = JS.browserOrNode().isBrowser;\n    this._timerKey = uuid().substr(0, 15);\n    this._refreshTimer();\n  }\n  SessionInfoManager.prototype._refreshTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n    var that = this;\n    this._timer = setInterval(function () {\n      that._timerKey = uuid().substr(0, 15);\n    }, TIMER_INTERVAL);\n  };\n  SessionInfoManager.prototype.storeValue = function (key, value) {\n    var today = new Date();\n    var expire = new Date();\n    expire.setTime(today.getTime() + 3600000 * 24 * CACHE_EXPIRY_IN_DAYS);\n    Cache.setItem(this._getCachePrefix(key), value, {\n      expires: expire.getTime()\n    });\n  };\n  SessionInfoManager.prototype.retrieveValue = function (key) {\n    return Cache.getItem(this._getCachePrefix(key));\n  };\n  SessionInfoManager.prototype._getCachePrefix = function (key) {\n    if (this._isBrowser) {\n      return key + DELIMITER + window.location.host;\n    }\n    return DEFAULT_CACHE_PREFIX;\n  };\n  SessionInfoManager.prototype.getTimerKey = function () {\n    return this._timerKey;\n  };\n  SessionInfoManager.prototype.updateSessionInfo = function (userId, sessionInfo) {\n    var existUserId = sessionInfo.userId;\n    var existSessionId = sessionInfo.sessionId;\n    if (this._isRequireNewSession(userId, existUserId, existSessionId)) {\n      var newSessionId = uuid();\n      this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n      this.storeValue(PERSONALIZE_CACHE_SESSIONID, newSessionId);\n      sessionInfo.sessionId = newSessionId;\n    } else if (this._isRequireUpdateSessionInfo(userId, existUserId, existSessionId)) {\n      this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n    }\n    sessionInfo.userId = userId;\n  };\n  SessionInfoManager.prototype._isRequireUpdateSessionInfo = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n    // anonymouse => sign in : hasSession && s_userId == null && curr_userId !=null\n    var isNoCachedSession = isEmpty(cachedSessionSessionId);\n    return !isNoCachedSession && isEmpty(cachedSessionUserId) && !isEmpty(userId);\n  };\n  SessionInfoManager.prototype.retrieveSessionInfo = function (trackingId) {\n    var sessionInfo = {};\n    sessionInfo.trackingId = trackingId;\n    sessionInfo.sessionId = this.retrieveValue(PERSONALIZE_CACHE_SESSIONID);\n    sessionInfo.userId = this.retrieveValue(PERSONALIZE_CACHE_USERID);\n    if (isEmpty(sessionInfo.sessionId)) {\n      sessionInfo.sessionId = uuid();\n      this.storeValue(PERSONALIZE_CACHE_SESSIONID, sessionInfo.sessionId);\n    }\n    this.storeValue(PERSONALIZE_CACHE, trackingId);\n    return sessionInfo;\n  };\n  SessionInfoManager.prototype._isRequireNewSession = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n    // new session => 1. no cached session info 2. signOut: s_userId !=null && curr_userId ==null\n    // 3. switch account: s_userId !=null && curr_userId !=null && s_userId != curr_userId\n    var isNoCachedSession = isEmpty(cachedSessionSessionId);\n    var isSignoutCase = isEmpty(userId) && !isEmpty(cachedSessionUserId);\n    var isSwitchUserCase = !isEmpty(userId) && !isEmpty(cachedSessionUserId) && !isEqual(userId, cachedSessionUserId);\n    return isNoCachedSession || isSignoutCase || isSwitchUserCase;\n  };\n  return SessionInfoManager;\n}();\nexport { SessionInfoManager };","map":{"version":3,"sources":["../../../src/Providers/AmazonPersonalizeHelper/SessionInfoManager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { v1 as uuid } from 'uuid';\nimport { ConsoleLogger as Logger, JS } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nvar PERSONALIZE_CACHE = '_awsct';\nvar PERSONALIZE_CACHE_USERID = '_awsct_uid';\nvar PERSONALIZE_CACHE_SESSIONID = '_awsct_sid';\nvar DEFAULT_CACHE_PREFIX = 'peronslize';\nvar TIMER_INTERVAL = 30 * 1000;\nvar DELIMITER = '.';\nvar CACHE_EXPIRY_IN_DAYS = 7;\nvar logger = new Logger('AmazonPersonalizeProvider');\nvar SessionInfoManager = /** @class */ (function () {\n    function SessionInfoManager(prefixKey) {\n        if (prefixKey === void 0) { prefixKey = ''; }\n        this._isBrowser = JS.browserOrNode().isBrowser;\n        this._timerKey = uuid().substr(0, 15);\n        this._refreshTimer();\n    }\n    SessionInfoManager.prototype._refreshTimer = function () {\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n        var that = this;\n        this._timer = setInterval(function () {\n            that._timerKey = uuid().substr(0, 15);\n        }, TIMER_INTERVAL);\n    };\n    SessionInfoManager.prototype.storeValue = function (key, value) {\n        var today = new Date();\n        var expire = new Date();\n        expire.setTime(today.getTime() + 3600000 * 24 * CACHE_EXPIRY_IN_DAYS);\n        Cache.setItem(this._getCachePrefix(key), value, {\n            expires: expire.getTime(),\n        });\n    };\n    SessionInfoManager.prototype.retrieveValue = function (key) {\n        return Cache.getItem(this._getCachePrefix(key));\n    };\n    SessionInfoManager.prototype._getCachePrefix = function (key) {\n        if (this._isBrowser) {\n            return key + DELIMITER + window.location.host;\n        }\n        return DEFAULT_CACHE_PREFIX;\n    };\n    SessionInfoManager.prototype.getTimerKey = function () {\n        return this._timerKey;\n    };\n    SessionInfoManager.prototype.updateSessionInfo = function (userId, sessionInfo) {\n        var existUserId = sessionInfo.userId;\n        var existSessionId = sessionInfo.sessionId;\n        if (this._isRequireNewSession(userId, existUserId, existSessionId)) {\n            var newSessionId = uuid();\n            this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n            this.storeValue(PERSONALIZE_CACHE_SESSIONID, newSessionId);\n            sessionInfo.sessionId = newSessionId;\n        }\n        else if (this._isRequireUpdateSessionInfo(userId, existUserId, existSessionId)) {\n            this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n        }\n        sessionInfo.userId = userId;\n    };\n    SessionInfoManager.prototype._isRequireUpdateSessionInfo = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n        // anonymouse => sign in : hasSession && s_userId == null && curr_userId !=null\n        var isNoCachedSession = isEmpty(cachedSessionSessionId);\n        return (!isNoCachedSession && isEmpty(cachedSessionUserId) && !isEmpty(userId));\n    };\n    SessionInfoManager.prototype.retrieveSessionInfo = function (trackingId) {\n        var sessionInfo = {};\n        sessionInfo.trackingId = trackingId;\n        sessionInfo.sessionId = this.retrieveValue(PERSONALIZE_CACHE_SESSIONID);\n        sessionInfo.userId = this.retrieveValue(PERSONALIZE_CACHE_USERID);\n        if (isEmpty(sessionInfo.sessionId)) {\n            sessionInfo.sessionId = uuid();\n            this.storeValue(PERSONALIZE_CACHE_SESSIONID, sessionInfo.sessionId);\n        }\n        this.storeValue(PERSONALIZE_CACHE, trackingId);\n        return sessionInfo;\n    };\n    SessionInfoManager.prototype._isRequireNewSession = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n        // new session => 1. no cached session info 2. signOut: s_userId !=null && curr_userId ==null\n        // 3. switch account: s_userId !=null && curr_userId !=null && s_userId != curr_userId\n        var isNoCachedSession = isEmpty(cachedSessionSessionId);\n        var isSignoutCase = isEmpty(userId) && !isEmpty(cachedSessionUserId);\n        var isSwitchUserCase = !isEmpty(userId) &&\n            !isEmpty(cachedSessionUserId) &&\n            !isEqual(userId, cachedSessionUserId);\n        return isNoCachedSession || isSignoutCase || isSwitchUserCase;\n    };\n    return SessionInfoManager;\n}());\nexport { SessionInfoManager };\n//# sourceMappingURL=SessionInfoManager.js.map"]},"metadata":{},"sourceType":"module"}