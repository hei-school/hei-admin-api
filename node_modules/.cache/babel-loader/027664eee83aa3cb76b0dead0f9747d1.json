{"ast":null,"code":"import { __assign } from \"tslib\";\n// Partition default templates\nvar AWS_TEMPLATE = \"kinesis.{region}.amazonaws.com\";\nvar AWS_CN_TEMPLATE = \"kinesis.{region}.amazonaws.com.cn\";\nvar AWS_ISO_TEMPLATE = \"kinesis.{region}.c2s.ic.gov\";\nvar AWS_ISO_B_TEMPLATE = \"kinesis.{region}.sc2s.sgov.gov\";\nvar AWS_US_GOV_TEMPLATE = \"kinesis.{region}.amazonaws.com\";\n// Partition regions\nvar AWS_REGIONS = new Set([\"af-south-1\", \"ap-east-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-south-1\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"me-south-1\", \"sa-east-1\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\"]);\nvar AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nvar AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nvar AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nvar AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\nexport var defaultRegionInfoProvider = function (region, options) {\n  var regionInfo = undefined;\n  switch (region) {\n    // First, try to match exact region names.\n    case \"af-south-1\":\n      regionInfo = {\n        hostname: \"kinesis.af-south-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"ap-east-1\":\n      regionInfo = {\n        hostname: \"kinesis.ap-east-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"ap-northeast-1\":\n      regionInfo = {\n        hostname: \"kinesis.ap-northeast-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"ap-northeast-2\":\n      regionInfo = {\n        hostname: \"kinesis.ap-northeast-2.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"ap-south-1\":\n      regionInfo = {\n        hostname: \"kinesis.ap-south-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"ap-southeast-1\":\n      regionInfo = {\n        hostname: \"kinesis.ap-southeast-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"ap-southeast-2\":\n      regionInfo = {\n        hostname: \"kinesis.ap-southeast-2.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"ca-central-1\":\n      regionInfo = {\n        hostname: \"kinesis.ca-central-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"cn-north-1\":\n      regionInfo = {\n        hostname: \"kinesis.cn-north-1.amazonaws.com.cn\",\n        partition: \"aws-cn\"\n      };\n      break;\n    case \"cn-northwest-1\":\n      regionInfo = {\n        hostname: \"kinesis.cn-northwest-1.amazonaws.com.cn\",\n        partition: \"aws-cn\"\n      };\n      break;\n    case \"eu-central-1\":\n      regionInfo = {\n        hostname: \"kinesis.eu-central-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"eu-north-1\":\n      regionInfo = {\n        hostname: \"kinesis.eu-north-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"eu-south-1\":\n      regionInfo = {\n        hostname: \"kinesis.eu-south-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"eu-west-1\":\n      regionInfo = {\n        hostname: \"kinesis.eu-west-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"eu-west-2\":\n      regionInfo = {\n        hostname: \"kinesis.eu-west-2.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"eu-west-3\":\n      regionInfo = {\n        hostname: \"kinesis.eu-west-3.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"fips-us-east-1\":\n      regionInfo = {\n        hostname: \"kinesis-fips.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-1\"\n      };\n      break;\n    case \"fips-us-east-2\":\n      regionInfo = {\n        hostname: \"kinesis-fips.us-east-2.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-2\"\n      };\n      break;\n    case \"fips-us-west-1\":\n      regionInfo = {\n        hostname: \"kinesis-fips.us-west-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-west-1\"\n      };\n      break;\n    case \"fips-us-west-2\":\n      regionInfo = {\n        hostname: \"kinesis-fips.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-west-2\"\n      };\n      break;\n    case \"me-south-1\":\n      regionInfo = {\n        hostname: \"kinesis.me-south-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"sa-east-1\":\n      regionInfo = {\n        hostname: \"kinesis.sa-east-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"us-east-1\":\n      regionInfo = {\n        hostname: \"kinesis.us-east-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"us-east-2\":\n      regionInfo = {\n        hostname: \"kinesis.us-east-2.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"us-gov-east-1\":\n      regionInfo = {\n        hostname: \"kinesis.us-gov-east-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n        signingRegion: \"us-gov-east-1\"\n      };\n      break;\n    case \"us-gov-west-1\":\n      regionInfo = {\n        hostname: \"kinesis.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n        signingRegion: \"us-gov-west-1\"\n      };\n      break;\n    case \"us-iso-east-1\":\n      regionInfo = {\n        hostname: \"kinesis.us-iso-east-1.c2s.ic.gov\",\n        partition: \"aws-iso\"\n      };\n      break;\n    case \"us-isob-east-1\":\n      regionInfo = {\n        hostname: \"kinesis.us-isob-east-1.sc2s.sgov.gov\",\n        partition: \"aws-iso-b\"\n      };\n      break;\n    case \"us-west-1\":\n      regionInfo = {\n        hostname: \"kinesis.us-west-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    case \"us-west-2\":\n      regionInfo = {\n        hostname: \"kinesis.us-west-2.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    // Next, try to match partition endpoints.\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\"\n        };\n      }\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\"\n        };\n      }\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\"\n        };\n      }\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\"\n        };\n      }\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\"\n        };\n      }\n      // Finally, assume it's an AWS partition endpoint.\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\"\n        };\n      }\n  }\n  return Promise.resolve(__assign({\n    signingService: \"kinesis\"\n  }, regionInfo));\n};","map":{"version":3,"sources":["../../endpoints.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\n// Partition default templates\nvar AWS_TEMPLATE = \"kinesis.{region}.amazonaws.com\";\nvar AWS_CN_TEMPLATE = \"kinesis.{region}.amazonaws.com.cn\";\nvar AWS_ISO_TEMPLATE = \"kinesis.{region}.c2s.ic.gov\";\nvar AWS_ISO_B_TEMPLATE = \"kinesis.{region}.sc2s.sgov.gov\";\nvar AWS_US_GOV_TEMPLATE = \"kinesis.{region}.amazonaws.com\";\n// Partition regions\nvar AWS_REGIONS = new Set([\n    \"af-south-1\",\n    \"ap-east-1\",\n    \"ap-northeast-1\",\n    \"ap-northeast-2\",\n    \"ap-south-1\",\n    \"ap-southeast-1\",\n    \"ap-southeast-2\",\n    \"ca-central-1\",\n    \"eu-central-1\",\n    \"eu-north-1\",\n    \"eu-south-1\",\n    \"eu-west-1\",\n    \"eu-west-2\",\n    \"eu-west-3\",\n    \"me-south-1\",\n    \"sa-east-1\",\n    \"us-east-1\",\n    \"us-east-2\",\n    \"us-west-1\",\n    \"us-west-2\",\n]);\nvar AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nvar AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nvar AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nvar AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\nexport var defaultRegionInfoProvider = function (region, options) {\n    var regionInfo = undefined;\n    switch (region) {\n        // First, try to match exact region names.\n        case \"af-south-1\":\n            regionInfo = {\n                hostname: \"kinesis.af-south-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"ap-east-1\":\n            regionInfo = {\n                hostname: \"kinesis.ap-east-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"ap-northeast-1\":\n            regionInfo = {\n                hostname: \"kinesis.ap-northeast-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"ap-northeast-2\":\n            regionInfo = {\n                hostname: \"kinesis.ap-northeast-2.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"ap-south-1\":\n            regionInfo = {\n                hostname: \"kinesis.ap-south-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"ap-southeast-1\":\n            regionInfo = {\n                hostname: \"kinesis.ap-southeast-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"ap-southeast-2\":\n            regionInfo = {\n                hostname: \"kinesis.ap-southeast-2.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"ca-central-1\":\n            regionInfo = {\n                hostname: \"kinesis.ca-central-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"cn-north-1\":\n            regionInfo = {\n                hostname: \"kinesis.cn-north-1.amazonaws.com.cn\",\n                partition: \"aws-cn\",\n            };\n            break;\n        case \"cn-northwest-1\":\n            regionInfo = {\n                hostname: \"kinesis.cn-northwest-1.amazonaws.com.cn\",\n                partition: \"aws-cn\",\n            };\n            break;\n        case \"eu-central-1\":\n            regionInfo = {\n                hostname: \"kinesis.eu-central-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"eu-north-1\":\n            regionInfo = {\n                hostname: \"kinesis.eu-north-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"eu-south-1\":\n            regionInfo = {\n                hostname: \"kinesis.eu-south-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"eu-west-1\":\n            regionInfo = {\n                hostname: \"kinesis.eu-west-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"eu-west-2\":\n            regionInfo = {\n                hostname: \"kinesis.eu-west-2.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"eu-west-3\":\n            regionInfo = {\n                hostname: \"kinesis.eu-west-3.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"fips-us-east-1\":\n            regionInfo = {\n                hostname: \"kinesis-fips.us-east-1.amazonaws.com\",\n                partition: \"aws\",\n                signingRegion: \"us-east-1\",\n            };\n            break;\n        case \"fips-us-east-2\":\n            regionInfo = {\n                hostname: \"kinesis-fips.us-east-2.amazonaws.com\",\n                partition: \"aws\",\n                signingRegion: \"us-east-2\",\n            };\n            break;\n        case \"fips-us-west-1\":\n            regionInfo = {\n                hostname: \"kinesis-fips.us-west-1.amazonaws.com\",\n                partition: \"aws\",\n                signingRegion: \"us-west-1\",\n            };\n            break;\n        case \"fips-us-west-2\":\n            regionInfo = {\n                hostname: \"kinesis-fips.us-west-2.amazonaws.com\",\n                partition: \"aws\",\n                signingRegion: \"us-west-2\",\n            };\n            break;\n        case \"me-south-1\":\n            regionInfo = {\n                hostname: \"kinesis.me-south-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"sa-east-1\":\n            regionInfo = {\n                hostname: \"kinesis.sa-east-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"us-east-1\":\n            regionInfo = {\n                hostname: \"kinesis.us-east-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"us-east-2\":\n            regionInfo = {\n                hostname: \"kinesis.us-east-2.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"us-gov-east-1\":\n            regionInfo = {\n                hostname: \"kinesis.us-gov-east-1.amazonaws.com\",\n                partition: \"aws-us-gov\",\n                signingRegion: \"us-gov-east-1\",\n            };\n            break;\n        case \"us-gov-west-1\":\n            regionInfo = {\n                hostname: \"kinesis.us-gov-west-1.amazonaws.com\",\n                partition: \"aws-us-gov\",\n                signingRegion: \"us-gov-west-1\",\n            };\n            break;\n        case \"us-iso-east-1\":\n            regionInfo = {\n                hostname: \"kinesis.us-iso-east-1.c2s.ic.gov\",\n                partition: \"aws-iso\",\n            };\n            break;\n        case \"us-isob-east-1\":\n            regionInfo = {\n                hostname: \"kinesis.us-isob-east-1.sc2s.sgov.gov\",\n                partition: \"aws-iso-b\",\n            };\n            break;\n        case \"us-west-1\":\n            regionInfo = {\n                hostname: \"kinesis.us-west-1.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        case \"us-west-2\":\n            regionInfo = {\n                hostname: \"kinesis.us-west-2.amazonaws.com\",\n                partition: \"aws\",\n            };\n            break;\n        // Next, try to match partition endpoints.\n        default:\n            if (AWS_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws\",\n                };\n            }\n            if (AWS_CN_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws-cn\",\n                };\n            }\n            if (AWS_ISO_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws-iso\",\n                };\n            }\n            if (AWS_ISO_B_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws-iso-b\",\n                };\n            }\n            if (AWS_US_GOV_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws-us-gov\",\n                };\n            }\n            // Finally, assume it's an AWS partition endpoint.\n            if (regionInfo === undefined) {\n                regionInfo = {\n                    hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws\",\n                };\n            }\n    }\n    return Promise.resolve(__assign({ signingService: \"kinesis\" }, regionInfo));\n};\n//# sourceMappingURL=endpoints.js.map"]},"metadata":{},"sourceType":"module"}