{"ast":null,"code":"import { __assign, __awaiter, __generator, __rest } from \"tslib\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\nvar S3RequestPresigner = /** @class */function () {\n  function S3RequestPresigner(options) {\n    var resolvedOptions = __assign({\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false\n    }, options);\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n  S3RequestPresigner.prototype.presign = function (requestToSign, _a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n    var _b = _a.unsignableHeaders,\n      unsignableHeaders = _b === void 0 ? new Set() : _b,\n      _c = _a.unhoistableHeaders,\n      unhoistableHeaders = _c === void 0 ? new Set() : _c,\n      options = __rest(_a, [\"unsignableHeaders\", \"unhoistableHeaders\"]);\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_d) {\n        unsignableHeaders.add(\"content-type\");\n        // S3 requires SSE headers to be signed in headers instead of query\n        // See: https://github.com/aws/aws-sdk-js-v3/issues/1576\n        Object.keys(requestToSign.headers).map(function (header) {\n          return header.toLowerCase();\n        }).filter(function (header) {\n          return header.startsWith(\"x-amz-server-side-encryption\");\n        }).forEach(function (header) {\n          unhoistableHeaders.add(header);\n        });\n        requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n        if (!requestToSign.headers[\"host\"]) {\n          requestToSign.headers.host = requestToSign.hostname;\n        }\n        return [2 /*return*/, this.signer.presign(requestToSign, __assign({\n          expiresIn: 900,\n          unsignableHeaders: unsignableHeaders,\n          unhoistableHeaders: unhoistableHeaders\n        }, options))];\n      });\n    });\n  };\n  return S3RequestPresigner;\n}();\nexport { S3RequestPresigner };","map":{"version":3,"sources":["../../src/presigner.ts"],"names":[],"mappings":";AAAA,SAAS,WAAW,QAAgD,uBAAuB;AAI3F,SAAS,aAAa,EAAE,gBAAgB,QAAQ,aAAa;AAc7D,IAAA,kBAAA,GAAA,aAAA,YAAA;EAEE,SAAA,kBAAA,CAAY,OAAkC,EAAA;IAC5C,IAAM,eAAe,GAAA,QAAA,CAAA;MACnB;MACA;MACA,OAAO,EAAE,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI;MACvD,aAAa,EAAE,OAAO,CAAC,aAAa,IAAI;IAAK,CAAA,EAC1C,OAAO,CACX;IACD,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,eAAe,CAAC;EAChD;EAEa,kBAAA,CAAA,SAAA,CAAA,OAAO,GAApB,UACE,aAA2B,EAC3B,EAA8G,EAAA;IAA9G,IAAA,EAAA,KAAA,KAAA,CAAA,EAAA;MAAA,EAAA,GAAA,CAAA,CAA8G;IAAA;IAA5G,IAAA,EAAA,GAAA,EAAA,CAAA,iBAA6B;MAA7B,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAG,EAAE,GAAA,EAAA;MAAE,EAAA,GAAA,EAAA,CAAA,kBAA8B;MAA9B,kBAAkB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAG,EAAE,GAAA,EAAA;MAAK,OAAO,GAAA,MAAA,CAAA,EAAA,EAA3E,CAAA,mBAAA,EAAA,oBAAA,CAA6E,CAAF;;;QAE3E,iBAAiB,CAAC,GAAG,CAAC,cAAc,CAAC;QACrC;QACA;QACA,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAC/B,GAAG,CAAC,UAAC,MAAM,EAAA;UAAK,OAAA,MAAM,CAAC,WAAW,EAAE;QAApB,CAAoB,CAAC,CACrC,MAAM,CAAC,UAAC,MAAM,EAAA;UAAK,OAAA,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC;QAAjD,CAAiD,CAAC,CACrE,OAAO,CAAC,UAAC,MAAM,EAAA;UACd,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC;QAChC,CAAC,CAAC;QACJ,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,gBAAgB;QACvD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;UAClC,aAAa,CAAC,OAAO,CAAC,IAAI,GAAG,aAAa,CAAC,QAAQ;QACpD;QACD,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,EAAA,QAAA,CAAA;UACtC,SAAS,EAAE,GAAG;UACd,iBAAiB,EAAA,iBAAA;UACjB,kBAAkB,EAAA;QAAA,CAAA,EACf,OAAO,CAAA,CACV,CAAA;;;GACH;EACH,OAAA,kBAAC;AAAD,CAAC,EAAA","sourcesContent":["import { SignatureV4, SignatureV4CryptoInit, SignatureV4Init } from \"@aws-sdk/signature-v4\";\nimport { RequestPresigner, RequestPresigningArguments } from \"@aws-sdk/types\";\nimport { HttpRequest as IHttpRequest } from \"@aws-sdk/types\";\n\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\n/**\n * PartialBy<T, K> makes properties specified in K optional in interface T\n * see: https://stackoverflow.com/questions/43159887/make-a-single-property-optional-in-typescript\n * */\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type S3RequestPresignerOptions = PartialBy<\n  SignatureV4Init & SignatureV4CryptoInit,\n  \"service\" | \"uriEscapePath\"\n> & { signingName?: string };\n\nexport class S3RequestPresigner implements RequestPresigner {\n  private readonly signer: SignatureV4;\n  constructor(options: S3RequestPresignerOptions) {\n    const resolvedOptions = {\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false,\n      ...options,\n    };\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n\n  public async presign(\n    requestToSign: IHttpRequest,\n    { unsignableHeaders = new Set(), unhoistableHeaders = new Set(), ...options }: RequestPresigningArguments = {}\n  ): Promise<IHttpRequest> {\n    unsignableHeaders.add(\"content-type\");\n    // S3 requires SSE headers to be signed in headers instead of query\n    // See: https://github.com/aws/aws-sdk-js-v3/issues/1576\n    Object.keys(requestToSign.headers)\n      .map((header) => header.toLowerCase())\n      .filter((header) => header.startsWith(\"x-amz-server-side-encryption\"))\n      .forEach((header) => {\n        unhoistableHeaders.add(header);\n      });\n    requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n    if (!requestToSign.headers[\"host\"]) {\n      requestToSign.headers.host = requestToSign.hostname;\n    }\n    return this.signer.presign(requestToSign, {\n      expiresIn: 900,\n      unsignableHeaders,\n      unhoistableHeaders,\n      ...options,\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}