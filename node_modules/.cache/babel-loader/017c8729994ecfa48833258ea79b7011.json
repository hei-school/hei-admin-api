{"ast":null,"code":"export function splitEvery(value, delimiter, numDelimiters) {\n  if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n    throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n  }\n  var segments = value.split(delimiter);\n  if (numDelimiters === 1) {\n    return segments;\n  }\n  var compoundSegments = [];\n  var currentSegment = \"\";\n  for (var i = 0; i < segments.length; i++) {\n    if (currentSegment === \"\") {\n      currentSegment = segments[i];\n    } else {\n      currentSegment += delimiter + segments[i];\n    }\n    if ((i + 1) % numDelimiters === 0) {\n      compoundSegments.push(currentSegment);\n      currentSegment = \"\";\n    }\n  }\n  if (currentSegment !== \"\") {\n    compoundSegments.push(currentSegment);\n  }\n  return compoundSegments;\n}","map":{"version":3,"names":["splitEvery","value","delimiter","numDelimiters","Number","isInteger","Error","segments","split","compoundSegments","currentSegment","i","length","push"],"sources":["F:/project/front-end/hei-admin-ui/node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/split-every.js"],"sourcesContent":["export function splitEvery(value, delimiter, numDelimiters) {\n    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n        throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n    }\n    var segments = value.split(delimiter);\n    if (numDelimiters === 1) {\n        return segments;\n    }\n    var compoundSegments = [];\n    var currentSegment = \"\";\n    for (var i = 0; i < segments.length; i++) {\n        if (currentSegment === \"\") {\n            currentSegment = segments[i];\n        }\n        else {\n            currentSegment += delimiter + segments[i];\n        }\n        if ((i + 1) % numDelimiters === 0) {\n            compoundSegments.push(currentSegment);\n            currentSegment = \"\";\n        }\n    }\n    if (currentSegment !== \"\") {\n        compoundSegments.push(currentSegment);\n    }\n    return compoundSegments;\n}\n"],"mappings":"AAAA,OAAO,SAASA,UAAU,CAACC,KAAK,EAAEC,SAAS,EAAEC,aAAa,EAAE;EACxD,IAAIA,aAAa,IAAI,CAAC,IAAI,CAACC,MAAM,CAACC,SAAS,CAACF,aAAa,CAAC,EAAE;IACxD,MAAM,IAAIG,KAAK,CAAC,gCAAgC,GAAGH,aAAa,GAAG,mBAAmB,CAAC;EAC3F;EACA,IAAII,QAAQ,GAAGN,KAAK,CAACO,KAAK,CAACN,SAAS,CAAC;EACrC,IAAIC,aAAa,KAAK,CAAC,EAAE;IACrB,OAAOI,QAAQ;EACnB;EACA,IAAIE,gBAAgB,GAAG,EAAE;EACzB,IAAIC,cAAc,GAAG,EAAE;EACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAID,cAAc,KAAK,EAAE,EAAE;MACvBA,cAAc,GAAGH,QAAQ,CAACI,CAAC,CAAC;IAChC,CAAC,MACI;MACDD,cAAc,IAAIR,SAAS,GAAGK,QAAQ,CAACI,CAAC,CAAC;IAC7C;IACA,IAAI,CAACA,CAAC,GAAG,CAAC,IAAIR,aAAa,KAAK,CAAC,EAAE;MAC/BM,gBAAgB,CAACI,IAAI,CAACH,cAAc,CAAC;MACrCA,cAAc,GAAG,EAAE;IACvB;EACJ;EACA,IAAIA,cAAc,KAAK,EAAE,EAAE;IACvBD,gBAAgB,CAACI,IAAI,CAACH,cAAc,CAAC;EACzC;EACA,OAAOD,gBAAgB;AAC3B"},"metadata":{},"sourceType":"module"}