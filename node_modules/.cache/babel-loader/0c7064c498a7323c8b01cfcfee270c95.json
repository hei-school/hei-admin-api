{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, indexNameFromKeys, monotonicUlidFactory } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\nvar DB_NAME = '@AmplifyDatastore';\nvar COLLECTION = 'Collection';\nvar DATA = 'Data';\nvar monotonicFactoriesMap = new Map();\nvar AsyncStorageDatabase = /** @class */function () {\n  function AsyncStorageDatabase() {\n    /**\n     * Maps storeNames to a map of ulid->id\n     */\n    this._collectionInMemoryIndex = new Map();\n    this.storage = createInMemoryStore();\n  }\n  /**\n   * Collection index is map of stores (i.e. sync, metadata, mutation event, and data)\n   * @param storeName {string} - Name of the store\n   * @returns Map of ulid->id\n   */\n  AsyncStorageDatabase.prototype.getCollectionIndex = function (storeName) {\n    if (!this._collectionInMemoryIndex.has(storeName)) {\n      this._collectionInMemoryIndex.set(storeName, new Map());\n    }\n    return this._collectionInMemoryIndex.get(storeName);\n  };\n  /**\n   * Return ULID for store if it exists, otherwise create a new one\n   * @param storeName {string} - Name of the store\n   * @returns ulid\n   */\n  AsyncStorageDatabase.prototype.getMonotonicFactory = function (storeName) {\n    if (!monotonicFactoriesMap.has(storeName)) {\n      monotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n    }\n    return monotonicFactoriesMap.get(storeName);\n  };\n  AsyncStorageDatabase.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid, id_1, newUlid, oldKey, newKey, item, e_1_1;\n      var e_1, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            this._collectionInMemoryIndex.clear();\n            return [4 /*yield*/, this.storage.getAllKeys()];\n          case 1:\n            allKeys = _c.sent();\n            keysForCollectionEntries = [];\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 12, 13, 14]);\n            allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();\n            _c.label = 3;\n          case 3:\n            if (!!allKeys_1_1.done) return [3 /*break*/, 11];\n            key = allKeys_1_1.value;\n            _a = __read(key.split('::'), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];\n            if (!(dbName === DB_NAME)) return [3 /*break*/, 10];\n            if (!(recordType === DATA)) return [3 /*break*/, 9];\n            ulid = void 0;\n            if (!(id === undefined)) return [3 /*break*/, 7];\n            id_1 = ulidOrId;\n            newUlid = this.getMonotonicFactory(storeName)();\n            oldKey = this.getLegacyKeyForItem(storeName, id_1);\n            newKey = this.getKeyForItem(storeName, id_1, newUlid);\n            return [4 /*yield*/, this.storage.getItem(oldKey)];\n          case 4:\n            item = _c.sent();\n            return [4 /*yield*/, this.storage.setItem(newKey, item)];\n          case 5:\n            _c.sent();\n            return [4 /*yield*/, this.storage.removeItem(oldKey)];\n          case 6:\n            _c.sent();\n            ulid = newUlid;\n            return [3 /*break*/, 8];\n          case 7:\n            ulid = ulidOrId;\n            _c.label = 8;\n          case 8:\n            this.getCollectionIndex(storeName).set(id, ulid);\n            return [3 /*break*/, 10];\n          case 9:\n            if (recordType === COLLECTION) {\n              keysForCollectionEntries.push(key);\n            }\n            _c.label = 10;\n          case 10:\n            allKeys_1_1 = allKeys_1.next();\n            return [3 /*break*/, 3];\n          case 11:\n            return [3 /*break*/, 14];\n          case 12:\n            e_1_1 = _c.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 14];\n          case 13:\n            try {\n              if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return)) _b.call(allKeys_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n            return [7 /*endfinally*/];\n          case 14:\n            if (!(keysForCollectionEntries.length > 0)) return [3 /*break*/, 16];\n            return [4 /*yield*/, this.storage.multiRemove(keysForCollectionEntries)];\n          case 15:\n            _c.sent();\n            _c.label = 16;\n          case 16:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.save = function (item, storeName, keys, keyValuesPath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idxName, ulid, itemKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            idxName = indexNameFromKeys(keys);\n            ulid = this.getCollectionIndex(storeName).get(idxName) || this.getMonotonicFactory(storeName)();\n            itemKey = this.getKeyForItem(storeName, keyValuesPath, ulid);\n            // Set key in collection index\n            this.getCollectionIndex(storeName).set(keyValuesPath, ulid);\n            // Save item in db\n            return [4 /*yield*/, this.storage.setItem(itemKey, JSON.stringify(item))];\n          case 1:\n            // Save item in db\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.batchSave = function (storeName, items, keys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, _loop_1, this_1, items_1, items_1_1, item, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;\n      var e_2, _a, e_3, _b;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2 /*return*/, []];\n            }\n            result = [];\n            collection = this.getCollectionIndex(storeName);\n            keysToDelete = new Set();\n            keysToSave = new Set();\n            allItemsKeys = [];\n            itemsMap = {};\n            _loop_1 = function (item) {\n              // Extract keys from concatenated key path, map to item values\n              var keyValues = keys.map(function (field) {\n                return item[field];\n              });\n              var _deleted = item._deleted;\n              // If id is in the store, retrieve, otherwise generate new ULID\n              var ulid = collection.get(keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)) || this_1.getMonotonicFactory(storeName)();\n              // Generate the \"longer key\" for the item\n              var key = this_1.getKeyForItem(storeName, keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR), ulid);\n              allItemsKeys.push(key);\n              itemsMap[key] = {\n                ulid: ulid,\n                model: item\n              };\n              if (_deleted) {\n                keysToDelete.add(key);\n              } else {\n                keysToSave.add(key);\n              }\n            };\n            this_1 = this;\n            try {\n              /* Populate allItemKeys, keysToDelete, and keysToSave */\n              for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                item = items_1_1.value;\n                _loop_1(item);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n            return [4 /*yield*/, this.storage.multiGet(allItemsKeys)];\n          case 1:\n            existingRecordsMap = _c.sent();\n            existingRecordsKeys = existingRecordsMap.filter(function (_a) {\n              var _b = __read(_a, 2),\n                v = _b[1];\n              return !!v;\n            }).reduce(function (set, _a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return set.add(k);\n            }, new Set());\n            // Delete\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              if (keysToDelete.size === 0) {\n                resolve();\n                return;\n              }\n              var keysToDeleteArray = Array.from(keysToDelete);\n              keysToDeleteArray.forEach(function (key) {\n                // key: full db key\n                // keys: PK and/or SK keys\n                var primaryKeyValues = keys.map(function (field) {\n                  return itemsMap[key].model[field];\n                }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                collection.delete(primaryKeyValues);\n              });\n              _this.storage.multiRemove(keysToDeleteArray, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n          case 2:\n            // Delete\n            _c.sent();\n            // Save\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              if (keysToSave.size === 0) {\n                resolve();\n                return;\n              }\n              var entriesToSet = Array.from(keysToSave).map(function (key) {\n                return [key, JSON.stringify(itemsMap[key].model)];\n              });\n              keysToSave.forEach(function (key) {\n                var _a = itemsMap[key],\n                  model = _a.model,\n                  ulid = _a.ulid;\n                // Retrieve values from model, use as key for collection index\n                var keyValues = keys.map(function (field) {\n                  return model[field];\n                }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                collection.set(keyValues, ulid);\n              });\n              _this.storage.multiSet(entriesToSet, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n          case 3:\n            // Save\n            _c.sent();\n            try {\n              for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {\n                key = allItemsKeys_1_1.value;\n                if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n                  result.push([itemsMap[key].model, OpType.DELETE]);\n                } else if (keysToSave.has(key)) {\n                  result.push([itemsMap[key].model, existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT]);\n                }\n              }\n            } catch (e_3_1) {\n              e_3 = {\n                error: e_3_1\n              };\n            } finally {\n              try {\n                if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return)) _b.call(allItemsKeys_1);\n              } finally {\n                if (e_3) throw e_3.error;\n              }\n            }\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.get = function (keyValuePath, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey, recordAsString, record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(keyValuePath);\n            itemKey = this.getKeyForItem(storeName, keyValuePath, ulid);\n            return [4 /*yield*/, this.storage.getItem(itemKey)];\n          case 1:\n            recordAsString = _a.sent();\n            record = recordAsString && JSON.parse(recordAsString);\n            return [2 /*return*/, record];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.getOne = function (firstOrLast, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, itemId, ulid, itemKey, itemString, _b, result;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = __read(firstOrLast === QueryOne.FIRST ? function () {\n              var e_4, _a, _b;\n              var id, ulid;\n              try {\n                for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {\n                  _b = __read(collection_1_1.value, 2), id = _b[0], ulid = _b[1];\n                  break;\n                } // Get first element of the set\n              } catch (e_4_1) {\n                e_4 = {\n                  error: e_4_1\n                };\n              } finally {\n                try {\n                  if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);\n                } finally {\n                  if (e_4) throw e_4.error;\n                }\n              }\n              return [id, ulid];\n            }() : function () {\n              var e_5, _a, _b;\n              var id, ulid;\n              try {\n                for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {\n                  _b = __read(collection_2_1.value, 2), id = _b[0], ulid = _b[1];\n                  ;\n                } // Get last element of the set\n              } catch (e_5_1) {\n                e_5 = {\n                  error: e_5_1\n                };\n              } finally {\n                try {\n                  if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);\n                } finally {\n                  if (e_5) throw e_5.error;\n                }\n              }\n              return [id, ulid];\n            }(), 2), itemId = _a[0], ulid = _a[1];\n            itemKey = this.getKeyForItem(storeName, itemId, ulid);\n            _b = itemKey;\n            if (!_b) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.storage.getItem(itemKey)];\n          case 1:\n            _b = _c.sent();\n            _c.label = 2;\n          case 2:\n            itemString = _b;\n            result = itemString ? JSON.parse(itemString) || undefined : undefined;\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  /**\n   * This function gets all the records stored in async storage for a particular storeName\n   * It then loads all the records for that filtered set of keys using multiGet()\n   */\n  AsyncStorageDatabase.prototype.getAll = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid, storeRecordStrings, records;\n      var e_6, _e;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;\n            start = Math.max(0, page * limit) || 0;\n            end = limit > 0 ? start + limit : undefined;\n            keysForStore = [];\n            count = 0;\n            try {\n              for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {\n                _d = __read(collection_3_1.value, 2), id = _d[0], ulid = _d[1];\n                count++;\n                if (count <= start) {\n                  continue;\n                }\n                keysForStore.push(this.getKeyForItem(storeName, id, ulid));\n                if (count === end) {\n                  break;\n                }\n              }\n            } catch (e_6_1) {\n              e_6 = {\n                error: e_6_1\n              };\n            } finally {\n              try {\n                if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return)) _e.call(collection_3);\n              } finally {\n                if (e_6) throw e_6.error;\n              }\n            }\n            return [4 /*yield*/, this.storage.multiGet(keysForStore)];\n          case 1:\n            storeRecordStrings = _f.sent();\n            records = storeRecordStrings.filter(function (_a) {\n              var _b = __read(_a, 2),\n                value = _b[1];\n              return value;\n            }).map(function (_a) {\n              var _b = __read(_a, 2),\n                value = _b[1];\n              return JSON.parse(value);\n            });\n            return [2 /*return*/, records];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.delete = function (key, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(key);\n            itemKey = this.getKeyForItem(storeName, key, ulid);\n            this.getCollectionIndex(storeName).delete(key);\n            return [4 /*yield*/, this.storage.removeItem(itemKey)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Clear the AsyncStorage of all DataStore entries\n   */\n  AsyncStorageDatabase.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, allDataStoreKeys;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.storage.getAllKeys()];\n          case 1:\n            allKeys = _a.sent();\n            allDataStoreKeys = allKeys.filter(function (key) {\n              return key.startsWith(DB_NAME);\n            });\n            return [4 /*yield*/, this.storage.multiRemove(allDataStoreKeys)];\n          case 2:\n            _a.sent();\n            this._collectionInMemoryIndex.clear();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.getKeyForItem = function (storeName, id, ulid) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + ulid + \"::\" + id;\n  };\n  AsyncStorageDatabase.prototype.getLegacyKeyForItem = function (storeName, id) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + id;\n  };\n  AsyncStorageDatabase.prototype.getKeyPrefixForStoreItems = function (storeName) {\n    return DB_NAME + \"::\" + storeName + \"::\" + DATA;\n  };\n  return AsyncStorageDatabase;\n}();\nexport default AsyncStorageDatabase;","map":{"version":3,"sources":["../../../src/storage/adapter/AsyncStorageDatabase.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { OpType, QueryOne, } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, indexNameFromKeys, monotonicUlidFactory, } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\nvar DB_NAME = '@AmplifyDatastore';\nvar COLLECTION = 'Collection';\nvar DATA = 'Data';\nvar monotonicFactoriesMap = new Map();\nvar AsyncStorageDatabase = /** @class */ (function () {\n    function AsyncStorageDatabase() {\n        /**\n         * Maps storeNames to a map of ulid->id\n         */\n        this._collectionInMemoryIndex = new Map();\n        this.storage = createInMemoryStore();\n    }\n    /**\n     * Collection index is map of stores (i.e. sync, metadata, mutation event, and data)\n     * @param storeName {string} - Name of the store\n     * @returns Map of ulid->id\n     */\n    AsyncStorageDatabase.prototype.getCollectionIndex = function (storeName) {\n        if (!this._collectionInMemoryIndex.has(storeName)) {\n            this._collectionInMemoryIndex.set(storeName, new Map());\n        }\n        return this._collectionInMemoryIndex.get(storeName);\n    };\n    /**\n     * Return ULID for store if it exists, otherwise create a new one\n     * @param storeName {string} - Name of the store\n     * @returns ulid\n     */\n    AsyncStorageDatabase.prototype.getMonotonicFactory = function (storeName) {\n        if (!monotonicFactoriesMap.has(storeName)) {\n            monotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n        }\n        return monotonicFactoriesMap.get(storeName);\n    };\n    AsyncStorageDatabase.prototype.init = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid, id_1, newUlid, oldKey, newKey, item, e_1_1;\n            var e_1, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        this._collectionInMemoryIndex.clear();\n                        return [4 /*yield*/, this.storage.getAllKeys()];\n                    case 1:\n                        allKeys = _c.sent();\n                        keysForCollectionEntries = [];\n                        _c.label = 2;\n                    case 2:\n                        _c.trys.push([2, 12, 13, 14]);\n                        allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();\n                        _c.label = 3;\n                    case 3:\n                        if (!!allKeys_1_1.done) return [3 /*break*/, 11];\n                        key = allKeys_1_1.value;\n                        _a = __read(key.split('::'), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];\n                        if (!(dbName === DB_NAME)) return [3 /*break*/, 10];\n                        if (!(recordType === DATA)) return [3 /*break*/, 9];\n                        ulid = void 0;\n                        if (!(id === undefined)) return [3 /*break*/, 7];\n                        id_1 = ulidOrId;\n                        newUlid = this.getMonotonicFactory(storeName)();\n                        oldKey = this.getLegacyKeyForItem(storeName, id_1);\n                        newKey = this.getKeyForItem(storeName, id_1, newUlid);\n                        return [4 /*yield*/, this.storage.getItem(oldKey)];\n                    case 4:\n                        item = _c.sent();\n                        return [4 /*yield*/, this.storage.setItem(newKey, item)];\n                    case 5:\n                        _c.sent();\n                        return [4 /*yield*/, this.storage.removeItem(oldKey)];\n                    case 6:\n                        _c.sent();\n                        ulid = newUlid;\n                        return [3 /*break*/, 8];\n                    case 7:\n                        ulid = ulidOrId;\n                        _c.label = 8;\n                    case 8:\n                        this.getCollectionIndex(storeName).set(id, ulid);\n                        return [3 /*break*/, 10];\n                    case 9:\n                        if (recordType === COLLECTION) {\n                            keysForCollectionEntries.push(key);\n                        }\n                        _c.label = 10;\n                    case 10:\n                        allKeys_1_1 = allKeys_1.next();\n                        return [3 /*break*/, 3];\n                    case 11: return [3 /*break*/, 14];\n                    case 12:\n                        e_1_1 = _c.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 14];\n                    case 13:\n                        try {\n                            if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return)) _b.call(allKeys_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                        return [7 /*endfinally*/];\n                    case 14:\n                        if (!(keysForCollectionEntries.length > 0)) return [3 /*break*/, 16];\n                        return [4 /*yield*/, this.storage.multiRemove(keysForCollectionEntries)];\n                    case 15:\n                        _c.sent();\n                        _c.label = 16;\n                    case 16: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.save = function (item, storeName, keys, keyValuesPath) {\n        return __awaiter(this, void 0, void 0, function () {\n            var idxName, ulid, itemKey;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        idxName = indexNameFromKeys(keys);\n                        ulid = this.getCollectionIndex(storeName).get(idxName) ||\n                            this.getMonotonicFactory(storeName)();\n                        itemKey = this.getKeyForItem(storeName, keyValuesPath, ulid);\n                        // Set key in collection index\n                        this.getCollectionIndex(storeName).set(keyValuesPath, ulid);\n                        // Save item in db\n                        return [4 /*yield*/, this.storage.setItem(itemKey, JSON.stringify(item))];\n                    case 1:\n                        // Save item in db\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.batchSave = function (storeName, items, keys) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, _loop_1, this_1, items_1, items_1_1, item, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;\n            var e_2, _a, e_3, _b;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (items.length === 0) {\n                            return [2 /*return*/, []];\n                        }\n                        result = [];\n                        collection = this.getCollectionIndex(storeName);\n                        keysToDelete = new Set();\n                        keysToSave = new Set();\n                        allItemsKeys = [];\n                        itemsMap = {};\n                        _loop_1 = function (item) {\n                            // Extract keys from concatenated key path, map to item values\n                            var keyValues = keys.map(function (field) { return item[field]; });\n                            var _deleted = item._deleted;\n                            // If id is in the store, retrieve, otherwise generate new ULID\n                            var ulid = collection.get(keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)) ||\n                                this_1.getMonotonicFactory(storeName)();\n                            // Generate the \"longer key\" for the item\n                            var key = this_1.getKeyForItem(storeName, keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR), ulid);\n                            allItemsKeys.push(key);\n                            itemsMap[key] = { ulid: ulid, model: item };\n                            if (_deleted) {\n                                keysToDelete.add(key);\n                            }\n                            else {\n                                keysToSave.add(key);\n                            }\n                        };\n                        this_1 = this;\n                        try {\n                            /* Populate allItemKeys, keysToDelete, and keysToSave */\n                            for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                                item = items_1_1.value;\n                                _loop_1(item);\n                            }\n                        }\n                        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                        finally {\n                            try {\n                                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                        }\n                        return [4 /*yield*/, this.storage.multiGet(allItemsKeys)];\n                    case 1:\n                        existingRecordsMap = _c.sent();\n                        existingRecordsKeys = existingRecordsMap\n                            .filter(function (_a) {\n                            var _b = __read(_a, 2), v = _b[1];\n                            return !!v;\n                        })\n                            .reduce(function (set, _a) {\n                            var _b = __read(_a, 1), k = _b[0];\n                            return set.add(k);\n                        }, new Set());\n                        // Delete\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                if (keysToDelete.size === 0) {\n                                    resolve();\n                                    return;\n                                }\n                                var keysToDeleteArray = Array.from(keysToDelete);\n                                keysToDeleteArray.forEach(function (key) {\n                                    // key: full db key\n                                    // keys: PK and/or SK keys\n                                    var primaryKeyValues = keys\n                                        .map(function (field) { return itemsMap[key].model[field]; })\n                                        .join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                                    collection.delete(primaryKeyValues);\n                                });\n                                _this.storage.multiRemove(keysToDeleteArray, function (errors) {\n                                    if (errors && errors.length > 0) {\n                                        reject(errors);\n                                    }\n                                    else {\n                                        resolve();\n                                    }\n                                });\n                            })];\n                    case 2:\n                        // Delete\n                        _c.sent();\n                        // Save\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                if (keysToSave.size === 0) {\n                                    resolve();\n                                    return;\n                                }\n                                var entriesToSet = Array.from(keysToSave).map(function (key) { return [\n                                    key,\n                                    JSON.stringify(itemsMap[key].model),\n                                ]; });\n                                keysToSave.forEach(function (key) {\n                                    var _a = itemsMap[key], model = _a.model, ulid = _a.ulid;\n                                    // Retrieve values from model, use as key for collection index\n                                    var keyValues = keys\n                                        .map(function (field) { return model[field]; })\n                                        .join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                                    collection.set(keyValues, ulid);\n                                });\n                                _this.storage.multiSet(entriesToSet, function (errors) {\n                                    if (errors && errors.length > 0) {\n                                        reject(errors);\n                                    }\n                                    else {\n                                        resolve();\n                                    }\n                                });\n                            })];\n                    case 3:\n                        // Save\n                        _c.sent();\n                        try {\n                            for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {\n                                key = allItemsKeys_1_1.value;\n                                if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n                                    result.push([itemsMap[key].model, OpType.DELETE]);\n                                }\n                                else if (keysToSave.has(key)) {\n                                    result.push([\n                                        itemsMap[key].model,\n                                        existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT,\n                                    ]);\n                                }\n                            }\n                        }\n                        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                        finally {\n                            try {\n                                if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return)) _b.call(allItemsKeys_1);\n                            }\n                            finally { if (e_3) throw e_3.error; }\n                        }\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.get = function (keyValuePath, storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ulid, itemKey, recordAsString, record;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ulid = this.getCollectionIndex(storeName).get(keyValuePath);\n                        itemKey = this.getKeyForItem(storeName, keyValuePath, ulid);\n                        return [4 /*yield*/, this.storage.getItem(itemKey)];\n                    case 1:\n                        recordAsString = _a.sent();\n                        record = recordAsString && JSON.parse(recordAsString);\n                        return [2 /*return*/, record];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.getOne = function (firstOrLast, storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var collection, _a, itemId, ulid, itemKey, itemString, _b, result;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        collection = this.getCollectionIndex(storeName);\n                        _a = __read(firstOrLast === QueryOne.FIRST\n                            ? (function () {\n                                var e_4, _a, _b;\n                                var id, ulid;\n                                try {\n                                    for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {\n                                        _b = __read(collection_1_1.value, 2), id = _b[0], ulid = _b[1];\n                                        break;\n                                    } // Get first element of the set\n                                }\n                                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                                finally {\n                                    try {\n                                        if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);\n                                    }\n                                    finally { if (e_4) throw e_4.error; }\n                                }\n                                return [id, ulid];\n                            })()\n                            : (function () {\n                                var e_5, _a, _b;\n                                var id, ulid;\n                                try {\n                                    for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {\n                                        _b = __read(collection_2_1.value, 2), id = _b[0], ulid = _b[1];\n                                        ;\n                                    } // Get last element of the set\n                                }\n                                catch (e_5_1) { e_5 = { error: e_5_1 }; }\n                                finally {\n                                    try {\n                                        if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);\n                                    }\n                                    finally { if (e_5) throw e_5.error; }\n                                }\n                                return [id, ulid];\n                            })(), 2), itemId = _a[0], ulid = _a[1];\n                        itemKey = this.getKeyForItem(storeName, itemId, ulid);\n                        _b = itemKey;\n                        if (!_b) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.storage.getItem(itemKey)];\n                    case 1:\n                        _b = (_c.sent());\n                        _c.label = 2;\n                    case 2:\n                        itemString = _b;\n                        result = itemString ? JSON.parse(itemString) || undefined : undefined;\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * This function gets all the records stored in async storage for a particular storeName\n     * It then loads all the records for that filtered set of keys using multiGet()\n     */\n    AsyncStorageDatabase.prototype.getAll = function (storeName, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid, storeRecordStrings, records;\n            var e_6, _e;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        collection = this.getCollectionIndex(storeName);\n                        _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;\n                        start = Math.max(0, page * limit) || 0;\n                        end = limit > 0 ? start + limit : undefined;\n                        keysForStore = [];\n                        count = 0;\n                        try {\n                            for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {\n                                _d = __read(collection_3_1.value, 2), id = _d[0], ulid = _d[1];\n                                count++;\n                                if (count <= start) {\n                                    continue;\n                                }\n                                keysForStore.push(this.getKeyForItem(storeName, id, ulid));\n                                if (count === end) {\n                                    break;\n                                }\n                            }\n                        }\n                        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n                        finally {\n                            try {\n                                if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return)) _e.call(collection_3);\n                            }\n                            finally { if (e_6) throw e_6.error; }\n                        }\n                        return [4 /*yield*/, this.storage.multiGet(keysForStore)];\n                    case 1:\n                        storeRecordStrings = _f.sent();\n                        records = storeRecordStrings\n                            .filter(function (_a) {\n                            var _b = __read(_a, 2), value = _b[1];\n                            return value;\n                        })\n                            .map(function (_a) {\n                            var _b = __read(_a, 2), value = _b[1];\n                            return JSON.parse(value);\n                        });\n                        return [2 /*return*/, records];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.delete = function (key, storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ulid, itemKey;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ulid = this.getCollectionIndex(storeName).get(key);\n                        itemKey = this.getKeyForItem(storeName, key, ulid);\n                        this.getCollectionIndex(storeName).delete(key);\n                        return [4 /*yield*/, this.storage.removeItem(itemKey)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clear the AsyncStorage of all DataStore entries\n     */\n    AsyncStorageDatabase.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var allKeys, allDataStoreKeys;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.storage.getAllKeys()];\n                    case 1:\n                        allKeys = _a.sent();\n                        allDataStoreKeys = allKeys.filter(function (key) { return key.startsWith(DB_NAME); });\n                        return [4 /*yield*/, this.storage.multiRemove(allDataStoreKeys)];\n                    case 2:\n                        _a.sent();\n                        this._collectionInMemoryIndex.clear();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.getKeyForItem = function (storeName, id, ulid) {\n        return this.getKeyPrefixForStoreItems(storeName) + \"::\" + ulid + \"::\" + id;\n    };\n    AsyncStorageDatabase.prototype.getLegacyKeyForItem = function (storeName, id) {\n        return this.getKeyPrefixForStoreItems(storeName) + \"::\" + id;\n    };\n    AsyncStorageDatabase.prototype.getKeyPrefixForStoreItems = function (storeName) {\n        return DB_NAME + \"::\" + storeName + \"::\" + DATA;\n    };\n    return AsyncStorageDatabase;\n}());\nexport default AsyncStorageDatabase;\n//# sourceMappingURL=AsyncStorageDatabase.js.map"]},"metadata":{},"sourceType":"module"}