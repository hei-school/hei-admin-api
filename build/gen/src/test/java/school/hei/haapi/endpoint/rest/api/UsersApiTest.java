/*
 * HEI Admin API
 * _Programmatically connect to a computer programming [school](https://hei.school)._ After [joining us](mailto:contact@hei.school), you can get an identification token from our [dev](https://dev-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=5s8cg50doahmu855rlc8fr6qmp&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-dev.hei.school%2Fwhoami) or [prod](https://prod-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=i8bg538jpfu6mqmqb61m26trd&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-prod.hei.school%2Fwhoami) authentication service. Then, start playing with our system!  The implementation of our API is [publicly disclosed](https://github.com/hei-school/hei-admin-api). You are welcome to try and compromise it. Happy hacking! 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package school.hei.haapi.endpoint.rest.api;

import school.hei.haapi.endpoint.rest.client.ApiException;
import school.hei.haapi.endpoint.rest.model.BadRequestException;
import school.hei.haapi.endpoint.rest.model.InternalServerException;
import school.hei.haapi.endpoint.rest.model.Manager;
import school.hei.haapi.endpoint.rest.model.NotAuthorizedException;
import school.hei.haapi.endpoint.rest.model.ResourceNotFoundException;
import school.hei.haapi.endpoint.rest.model.Student;
import school.hei.haapi.endpoint.rest.model.Teacher;
import school.hei.haapi.endpoint.rest.model.TooManyRequestsException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Create new students or update existing students
     *
     * Update students when &#x60;id&#x60; are provided, create them otherwise.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateStudentsTest() throws ApiException {
        List<Student> student = null;
        List<Student> response = 
        api.createOrUpdateStudents(student);
        
        // TODO: test validations
    }
    
    /**
     * Create new teachers or update existing teachers
     *
     * Update teachers when &#x60;id&#x60; are provided, create them otherwise.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateTeachersTest() throws ApiException {
        List<Teacher> teacher = null;
        List<Teacher> response = 
        api.createOrUpdateTeachers(teacher);
        
        // TODO: test validations
    }
    
    /**
     * Get manager by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getManagerByIdTest() throws ApiException {
        String id = null;
        Manager response = 
        api.getManagerById(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all managers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getManagersTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        List<Manager> response = 
        api.getManagers(page, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Get student by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStudentByIdTest() throws ApiException {
        String id = null;
        Student response = 
        api.getStudentById(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all students
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStudentsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String ref = null;
        String firstName = null;
        String lastName = null;
        List<Student> response = 
        api.getStudents(page, pageSize, ref, firstName, lastName);
        
        // TODO: test validations
    }
    
    /**
     * Get teacher by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeacherByIdTest() throws ApiException {
        String id = null;
        Teacher response = 
        api.getTeacherById(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all teachers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeachersTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String ref = null;
        String firstName = null;
        String lastName = null;
        List<Teacher> response = 
        api.getTeachers(page, pageSize, ref, firstName, lastName);
        
        // TODO: test validations
    }
    
}
