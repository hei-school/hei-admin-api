/*
 * HEI Admin API
 * _Programmatically connect to a computer programming [school](https://hei.school)._ After [joining us](mailto:contact@hei.school), you can get an identification token from our [dev](https://dev-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=5s8cg50doahmu855rlc8fr6qmp&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-dev.hei.school%2Fwhoami) or [prod](https://prod-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=i8bg538jpfu6mqmqb61m26trd&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-prod.hei.school%2Fwhoami) authentication service. Then, start playing with our system!  The implementation of our API is [publicly disclosed](https://github.com/hei-school/hei-admin-api). You are welcome to try and compromise it. Happy hacking! 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package school.hei.haapi.endpoint.rest.api;

import school.hei.haapi.endpoint.rest.client.ApiException;
import school.hei.haapi.endpoint.rest.model.BadRequestException;
import school.hei.haapi.endpoint.rest.model.CreateDelayPenaltyChange;
import school.hei.haapi.endpoint.rest.model.CreateFee;
import school.hei.haapi.endpoint.rest.model.CreatePayment;
import school.hei.haapi.endpoint.rest.model.DelayPenalty;
import school.hei.haapi.endpoint.rest.model.Fee;
import school.hei.haapi.endpoint.rest.model.InternalServerException;
import school.hei.haapi.endpoint.rest.model.NotAuthorizedException;
import school.hei.haapi.endpoint.rest.model.Payment;
import school.hei.haapi.endpoint.rest.model.ResourceNotFoundException;
import school.hei.haapi.endpoint.rest.model.TooManyRequestsException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for PayingApi
 */
@Ignore
public class PayingApiTest {

    private final PayingApi api = new PayingApi();

    
    /**
     * Change current delay penalty configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDelayPenaltyChangeTest() throws ApiException {
        CreateDelayPenaltyChange createDelayPenaltyChange = null;
        DelayPenalty response = 
        api.createDelayPenaltyChange(createDelayPenaltyChange);
        
        // TODO: test validations
    }
    
    /**
     * Create student fees
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStudentFeesTest() throws ApiException {
        String studentId = null;
        List<CreateFee> createFee = null;
        List<Fee> response = 
        api.createStudentFees(studentId, createFee);
        
        // TODO: test validations
    }
    
    /**
     * Create student payments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStudentPaymentsTest() throws ApiException {
        String studentId = null;
        String feeId = null;
        List<CreatePayment> createPayment = null;
        List<Payment> response = 
        api.createStudentPayments(studentId, feeId, createPayment);
        
        // TODO: test validations
    }
    
    /**
     * Get current delay penalty
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDelayPenaltyTest() throws ApiException {
        DelayPenalty response = 
        api.getDelayPenalty();
        
        // TODO: test validations
    }
    
    /**
     * Get all student fees filtered by status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeesTest() throws ApiException {
        String status = null;
        Integer page = null;
        Integer pageSize = null;
        List<Fee> response = 
        api.getFees(status, page, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Get student fee by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStudentFeeByIdTest() throws ApiException {
        String studentId = null;
        String feeId = null;
        Fee response = 
        api.getStudentFeeById(studentId, feeId);
        
        // TODO: test validations
    }
    
    /**
     * Get all student fees ordered by due datetime desc
     *
     * Fees can be filtered with an optional payment status parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStudentFeesTest() throws ApiException {
        String studentId = null;
        Integer page = null;
        Integer pageSize = null;
        String status = null;
        List<Fee> response = 
        api.getStudentFees(studentId, page, pageSize, status);
        
        // TODO: test validations
    }
    
    /**
     * Get all student payments of a specific fee. Resulting list is ordered by creation datetime desc.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStudentPaymentsTest() throws ApiException {
        String studentId = null;
        String feeId = null;
        Integer page = null;
        Integer pageSize = null;
        List<Payment> response = 
        api.getStudentPayments(studentId, feeId, page, pageSize);
        
        // TODO: test validations
    }
    
}
