/*
 * HEI Admin API
 * _Programmatically connect to a computer programming [school](https://hei.school)._ After [joining us](mailto:contact@hei.school), you can get an identification token from our [dev](https://dev-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=5s8cg50doahmu855rlc8fr6qmp&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-dev.hei.school%2Fwhoami) or [prod](https://prod-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=i8bg538jpfu6mqmqb61m26trd&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-prod.hei.school%2Fwhoami) authentication service. Then, start playing with our system! The implementation of our API is [publicly disclosed](https://github.com/hei-school/hei-admin-api). You are welcome to try and compromise it. Happy hacking! 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package school.hei.haapi.endpoint.rest.api;

import school.hei.haapi.endpoint.rest.client.ApiClient;
import school.hei.haapi.endpoint.rest.client.ApiException;
import school.hei.haapi.endpoint.rest.client.ApiResponse;
import school.hei.haapi.endpoint.rest.client.Pair;

import school.hei.haapi.endpoint.rest.model.BadRequestException;
import school.hei.haapi.endpoint.rest.model.CreateDelayPenaltyChange;
import school.hei.haapi.endpoint.rest.model.CreateFee;
import school.hei.haapi.endpoint.rest.model.CreatePayment;
import school.hei.haapi.endpoint.rest.model.DelayPenalty;
import school.hei.haapi.endpoint.rest.model.Fee;
import school.hei.haapi.endpoint.rest.model.InternalServerException;
import school.hei.haapi.endpoint.rest.model.NotAuthorizedException;
import school.hei.haapi.endpoint.rest.model.Payment;
import school.hei.haapi.endpoint.rest.model.ResourceNotFoundException;
import school.hei.haapi.endpoint.rest.model.TooManyRequestsException;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-21T08:52:25.860936900+03:00[Africa/Nairobi]")
public class PayingApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public PayingApi() {
    this(new ApiClient());
  }

  public PayingApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Change current delay penalty configuration
   * 
   * @param createDelayPenaltyChange Delay penalties to create (required)
   * @return DelayPenalty
   * @throws ApiException if fails to make API call
   */
  public DelayPenalty createDelayPenaltyChange(CreateDelayPenaltyChange createDelayPenaltyChange) throws ApiException {
    ApiResponse<DelayPenalty> localVarResponse = createDelayPenaltyChangeWithHttpInfo(createDelayPenaltyChange);
    return localVarResponse.getData();
  }

  /**
   * Change current delay penalty configuration
   * 
   * @param createDelayPenaltyChange Delay penalties to create (required)
   * @return ApiResponse&lt;DelayPenalty&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DelayPenalty> createDelayPenaltyChangeWithHttpInfo(CreateDelayPenaltyChange createDelayPenaltyChange) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDelayPenaltyChangeRequestBuilder(createDelayPenaltyChange);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createDelayPenaltyChange", localVarResponse);
      }
      return new ApiResponse<DelayPenalty>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DelayPenalty>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDelayPenaltyChangeRequestBuilder(CreateDelayPenaltyChange createDelayPenaltyChange) throws ApiException {
    // verify the required parameter 'createDelayPenaltyChange' is set
    if (createDelayPenaltyChange == null) {
      throw new ApiException(400, "Missing the required parameter 'createDelayPenaltyChange' when calling createDelayPenaltyChange");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delay_penalty_change";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDelayPenaltyChange);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create student fees
   * 
   * @param studentId  (required)
   * @param createFee Student fees to create (required)
   * @return List&lt;Fee&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Fee> createStudentFees(String studentId, List<CreateFee> createFee) throws ApiException {
    ApiResponse<List<Fee>> localVarResponse = createStudentFeesWithHttpInfo(studentId, createFee);
    return localVarResponse.getData();
  }

  /**
   * Create student fees
   * 
   * @param studentId  (required)
   * @param createFee Student fees to create (required)
   * @return ApiResponse&lt;List&lt;Fee&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Fee>> createStudentFeesWithHttpInfo(String studentId, List<CreateFee> createFee) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createStudentFeesRequestBuilder(studentId, createFee);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createStudentFees", localVarResponse);
      }
      return new ApiResponse<List<Fee>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Fee>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createStudentFeesRequestBuilder(String studentId, List<CreateFee> createFee) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling createStudentFees");
    }
    // verify the required parameter 'createFee' is set
    if (createFee == null) {
      throw new ApiException(400, "Missing the required parameter 'createFee' when calling createStudentFees");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/fees"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createFee);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create student payments
   * 
   * @param studentId  (required)
   * @param feeId  (required)
   * @param createPayment Student payments to create (required)
   * @return List&lt;Payment&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Payment> createStudentPayments(String studentId, String feeId, List<CreatePayment> createPayment) throws ApiException {
    ApiResponse<List<Payment>> localVarResponse = createStudentPaymentsWithHttpInfo(studentId, feeId, createPayment);
    return localVarResponse.getData();
  }

  /**
   * Create student payments
   * 
   * @param studentId  (required)
   * @param feeId  (required)
   * @param createPayment Student payments to create (required)
   * @return ApiResponse&lt;List&lt;Payment&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Payment>> createStudentPaymentsWithHttpInfo(String studentId, String feeId, List<CreatePayment> createPayment) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createStudentPaymentsRequestBuilder(studentId, feeId, createPayment);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createStudentPayments", localVarResponse);
      }
      return new ApiResponse<List<Payment>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Payment>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createStudentPaymentsRequestBuilder(String studentId, String feeId, List<CreatePayment> createPayment) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling createStudentPayments");
    }
    // verify the required parameter 'feeId' is set
    if (feeId == null) {
      throw new ApiException(400, "Missing the required parameter 'feeId' when calling createStudentPayments");
    }
    // verify the required parameter 'createPayment' is set
    if (createPayment == null) {
      throw new ApiException(400, "Missing the required parameter 'createPayment' when calling createStudentPayments");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/fees/{fee_id}/payments"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()))
        .replace("{fee_id}", ApiClient.urlEncode(feeId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createPayment);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get current delay penalty
   * 
   * @return DelayPenalty
   * @throws ApiException if fails to make API call
   */
  public DelayPenalty getDelayPenalty() throws ApiException {
    ApiResponse<DelayPenalty> localVarResponse = getDelayPenaltyWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get current delay penalty
   * 
   * @return ApiResponse&lt;DelayPenalty&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DelayPenalty> getDelayPenaltyWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDelayPenaltyRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getDelayPenalty", localVarResponse);
      }
      return new ApiResponse<DelayPenalty>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DelayPenalty>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDelayPenaltyRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delay_penalty";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all student fees filtered by status
   * 
   * @param status See the PaymentStatus object for its value. (optional, default to LATE)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return List&lt;Fee&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Fee> getFees(String status, Integer page, Integer pageSize) throws ApiException {
    ApiResponse<List<Fee>> localVarResponse = getFeesWithHttpInfo(status, page, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Get all student fees filtered by status
   * 
   * @param status See the PaymentStatus object for its value. (optional, default to LATE)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return ApiResponse&lt;List&lt;Fee&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Fee>> getFeesWithHttpInfo(String status, Integer page, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getFeesRequestBuilder(status, page, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getFees", localVarResponse);
      }
      return new ApiResponse<List<Fee>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Fee>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getFeesRequestBuilder(String status, Integer page, Integer pageSize) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/fees";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get student fee by identifier
   * 
   * @param studentId  (required)
   * @param feeId  (required)
   * @return Fee
   * @throws ApiException if fails to make API call
   */
  public Fee getStudentFeeById(String studentId, String feeId) throws ApiException {
    ApiResponse<Fee> localVarResponse = getStudentFeeByIdWithHttpInfo(studentId, feeId);
    return localVarResponse.getData();
  }

  /**
   * Get student fee by identifier
   * 
   * @param studentId  (required)
   * @param feeId  (required)
   * @return ApiResponse&lt;Fee&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Fee> getStudentFeeByIdWithHttpInfo(String studentId, String feeId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudentFeeByIdRequestBuilder(studentId, feeId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getStudentFeeById", localVarResponse);
      }
      return new ApiResponse<Fee>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Fee>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudentFeeByIdRequestBuilder(String studentId, String feeId) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling getStudentFeeById");
    }
    // verify the required parameter 'feeId' is set
    if (feeId == null) {
      throw new ApiException(400, "Missing the required parameter 'feeId' when calling getStudentFeeById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/fees/{fee_id}"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()))
        .replace("{fee_id}", ApiClient.urlEncode(feeId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all student fees ordered by due datetime desc
   * Fees can be filtered with an optional payment status parameter.
   * @param studentId  (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @param status  (optional)
   * @return List&lt;Fee&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Fee> getStudentFees(String studentId, Integer page, Integer pageSize, String status) throws ApiException {
    ApiResponse<List<Fee>> localVarResponse = getStudentFeesWithHttpInfo(studentId, page, pageSize, status);
    return localVarResponse.getData();
  }

  /**
   * Get all student fees ordered by due datetime desc
   * Fees can be filtered with an optional payment status parameter.
   * @param studentId  (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @param status  (optional)
   * @return ApiResponse&lt;List&lt;Fee&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Fee>> getStudentFeesWithHttpInfo(String studentId, Integer page, Integer pageSize, String status) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudentFeesRequestBuilder(studentId, page, pageSize, status);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getStudentFees", localVarResponse);
      }
      return new ApiResponse<List<Fee>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Fee>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudentFeesRequestBuilder(String studentId, Integer page, Integer pageSize, String status) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling getStudentFees");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/fees"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all student payments of a specific fee. Resulting list is ordered by creation datetime desc.
   * 
   * @param studentId  (required)
   * @param feeId  (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return List&lt;Payment&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Payment> getStudentPayments(String studentId, String feeId, Integer page, Integer pageSize) throws ApiException {
    ApiResponse<List<Payment>> localVarResponse = getStudentPaymentsWithHttpInfo(studentId, feeId, page, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Get all student payments of a specific fee. Resulting list is ordered by creation datetime desc.
   * 
   * @param studentId  (required)
   * @param feeId  (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return ApiResponse&lt;List&lt;Payment&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Payment>> getStudentPaymentsWithHttpInfo(String studentId, String feeId, Integer page, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudentPaymentsRequestBuilder(studentId, feeId, page, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getStudentPayments", localVarResponse);
      }
      return new ApiResponse<List<Payment>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Payment>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudentPaymentsRequestBuilder(String studentId, String feeId, Integer page, Integer pageSize) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling getStudentPayments");
    }
    // verify the required parameter 'feeId' is set
    if (feeId == null) {
      throw new ApiException(400, "Missing the required parameter 'feeId' when calling getStudentPayments");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/fees/{fee_id}/payments"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()))
        .replace("{fee_id}", ApiClient.urlEncode(feeId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
