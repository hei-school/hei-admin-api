/*
 * HEI Admin API
 * _Programmatically connect to a computer programming [school](https://hei.school)._ After [joining us](mailto:contact@hei.school), you can get an identification token from our [dev](https://dev-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=5s8cg50doahmu855rlc8fr6qmp&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-dev.hei.school%2Fwhoami) or [prod](https://prod-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=i8bg538jpfu6mqmqb61m26trd&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-prod.hei.school%2Fwhoami) authentication service. Then, start playing with our system! The implementation of our API is [publicly disclosed](https://github.com/hei-school/hei-admin-api). You are welcome to try and compromise it. Happy hacking! 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package school.hei.haapi.endpoint.rest.api;

import school.hei.haapi.endpoint.rest.client.ApiClient;
import school.hei.haapi.endpoint.rest.client.ApiException;
import school.hei.haapi.endpoint.rest.client.ApiResponse;
import school.hei.haapi.endpoint.rest.client.Pair;

import school.hei.haapi.endpoint.rest.model.BadRequestException;
import school.hei.haapi.endpoint.rest.model.InternalServerException;
import school.hei.haapi.endpoint.rest.model.Manager;
import school.hei.haapi.endpoint.rest.model.NotAuthorizedException;
import school.hei.haapi.endpoint.rest.model.ResourceNotFoundException;
import school.hei.haapi.endpoint.rest.model.Student;
import school.hei.haapi.endpoint.rest.model.Teacher;
import school.hei.haapi.endpoint.rest.model.TooManyRequestsException;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-21T08:52:25.860936900+03:00[Africa/Nairobi]")
public class UsersApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public UsersApi() {
    this(new ApiClient());
  }

  public UsersApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create new students or update existing students
   * Update students when &#x60;id&#x60; are provided, create them otherwise.
   * @param student  (required)
   * @return List&lt;Student&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Student> createOrUpdateStudents(List<Student> student) throws ApiException {
    ApiResponse<List<Student>> localVarResponse = createOrUpdateStudentsWithHttpInfo(student);
    return localVarResponse.getData();
  }

  /**
   * Create new students or update existing students
   * Update students when &#x60;id&#x60; are provided, create them otherwise.
   * @param student  (required)
   * @return ApiResponse&lt;List&lt;Student&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Student>> createOrUpdateStudentsWithHttpInfo(List<Student> student) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrUpdateStudentsRequestBuilder(student);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createOrUpdateStudents", localVarResponse);
      }
      return new ApiResponse<List<Student>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Student>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrUpdateStudentsRequestBuilder(List<Student> student) throws ApiException {
    // verify the required parameter 'student' is set
    if (student == null) {
      throw new ApiException(400, "Missing the required parameter 'student' when calling createOrUpdateStudents");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(student);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create new teachers or update existing teachers
   * Update teachers when &#x60;id&#x60; are provided, create them otherwise.
   * @param teacher  (required)
   * @return List&lt;Teacher&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Teacher> createOrUpdateTeachers(List<Teacher> teacher) throws ApiException {
    ApiResponse<List<Teacher>> localVarResponse = createOrUpdateTeachersWithHttpInfo(teacher);
    return localVarResponse.getData();
  }

  /**
   * Create new teachers or update existing teachers
   * Update teachers when &#x60;id&#x60; are provided, create them otherwise.
   * @param teacher  (required)
   * @return ApiResponse&lt;List&lt;Teacher&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Teacher>> createOrUpdateTeachersWithHttpInfo(List<Teacher> teacher) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrUpdateTeachersRequestBuilder(teacher);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createOrUpdateTeachers", localVarResponse);
      }
      return new ApiResponse<List<Teacher>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Teacher>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrUpdateTeachersRequestBuilder(List<Teacher> teacher) throws ApiException {
    // verify the required parameter 'teacher' is set
    if (teacher == null) {
      throw new ApiException(400, "Missing the required parameter 'teacher' when calling createOrUpdateTeachers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/teachers";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(teacher);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get manager by identifier
   * 
   * @param id  (required)
   * @return Manager
   * @throws ApiException if fails to make API call
   */
  public Manager getManagerById(String id) throws ApiException {
    ApiResponse<Manager> localVarResponse = getManagerByIdWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get manager by identifier
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Manager&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Manager> getManagerByIdWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getManagerByIdRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getManagerById", localVarResponse);
      }
      return new ApiResponse<Manager>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Manager>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getManagerByIdRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getManagerById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/managers/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all managers
   * 
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return List&lt;Manager&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Manager> getManagers(Integer page, Integer pageSize) throws ApiException {
    ApiResponse<List<Manager>> localVarResponse = getManagersWithHttpInfo(page, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Get all managers
   * 
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return ApiResponse&lt;List&lt;Manager&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Manager>> getManagersWithHttpInfo(Integer page, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getManagersRequestBuilder(page, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getManagers", localVarResponse);
      }
      return new ApiResponse<List<Manager>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Manager>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getManagersRequestBuilder(Integer page, Integer pageSize) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/managers";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get student by identifier
   * 
   * @param id  (required)
   * @return Student
   * @throws ApiException if fails to make API call
   */
  public Student getStudentById(String id) throws ApiException {
    ApiResponse<Student> localVarResponse = getStudentByIdWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get student by identifier
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Student&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Student> getStudentByIdWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudentByIdRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getStudentById", localVarResponse);
      }
      return new ApiResponse<Student>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Student>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudentByIdRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getStudentById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all students
   * 
   * @param page  (optional)
   * @param pageSize  (optional)
   * @param ref Filter students by ref, case is ignored (optional)
   * @param firstName Filter students by first name, case is ignored (optional)
   * @param lastName Filter students by last name, case is ignored (optional)
   * @return List&lt;Student&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Student> getStudents(Integer page, Integer pageSize, String ref, String firstName, String lastName) throws ApiException {
    ApiResponse<List<Student>> localVarResponse = getStudentsWithHttpInfo(page, pageSize, ref, firstName, lastName);
    return localVarResponse.getData();
  }

  /**
   * Get all students
   * 
   * @param page  (optional)
   * @param pageSize  (optional)
   * @param ref Filter students by ref, case is ignored (optional)
   * @param firstName Filter students by first name, case is ignored (optional)
   * @param lastName Filter students by last name, case is ignored (optional)
   * @return ApiResponse&lt;List&lt;Student&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Student>> getStudentsWithHttpInfo(Integer page, Integer pageSize, String ref, String firstName, String lastName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudentsRequestBuilder(page, pageSize, ref, firstName, lastName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getStudents", localVarResponse);
      }
      return new ApiResponse<List<Student>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Student>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudentsRequestBuilder(Integer page, Integer pageSize, String ref, String firstName, String lastName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ref", ref));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name", firstName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name", lastName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get teacher by identifier
   * 
   * @param id  (required)
   * @return Teacher
   * @throws ApiException if fails to make API call
   */
  public Teacher getTeacherById(String id) throws ApiException {
    ApiResponse<Teacher> localVarResponse = getTeacherByIdWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get teacher by identifier
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Teacher&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Teacher> getTeacherByIdWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getTeacherByIdRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getTeacherById", localVarResponse);
      }
      return new ApiResponse<Teacher>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Teacher>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getTeacherByIdRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getTeacherById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/teachers/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all teachers
   * 
   * @param page  (optional)
   * @param pageSize  (optional)
   * @param ref Filter teachers by ref, case is ignored (optional)
   * @param firstName Filter teachers by first name, case is ignored (optional)
   * @param lastName Filter teachers by last name, case is ignored (optional)
   * @return List&lt;Teacher&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Teacher> getTeachers(Integer page, Integer pageSize, String ref, String firstName, String lastName) throws ApiException {
    ApiResponse<List<Teacher>> localVarResponse = getTeachersWithHttpInfo(page, pageSize, ref, firstName, lastName);
    return localVarResponse.getData();
  }

  /**
   * Get all teachers
   * 
   * @param page  (optional)
   * @param pageSize  (optional)
   * @param ref Filter teachers by ref, case is ignored (optional)
   * @param firstName Filter teachers by first name, case is ignored (optional)
   * @param lastName Filter teachers by last name, case is ignored (optional)
   * @return ApiResponse&lt;List&lt;Teacher&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Teacher>> getTeachersWithHttpInfo(Integer page, Integer pageSize, String ref, String firstName, String lastName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getTeachersRequestBuilder(page, pageSize, ref, firstName, lastName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getTeachers", localVarResponse);
      }
      return new ApiResponse<List<Teacher>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Teacher>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getTeachersRequestBuilder(Integer page, Integer pageSize, String ref, String firstName, String lastName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/teachers";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ref", ref));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name", firstName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name", lastName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
