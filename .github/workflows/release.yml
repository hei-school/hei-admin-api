name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-3
      ECR_PUBLIC_REGISTRY: public.ecr.aws/q6i6y5o4
      ECR_REPOSITORY: hei-admin-api

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # secrets.GITHUB_TOKEN is not enough for releasing on protected branch
          # Use a Personal Access Token from someone who has sufficient privileges
          token: ${{ secrets.GH_TOKEN_FOR_CONVENTIONAL_CHANGELOG }}


      #############################################################################
      ####### DETERMINE NEXT VERSION AND BUILD WITH APPROPRIATE VERSION ###########
      #############################################################################

      # We will use conventional-changelog which only supports yaml, yml and toml version file
      - name: From gradle.properties to version.yml
        run: |
          cp gradle.properties version.yml
          sed -i 's/=/: /g' version.yml
          git status

      # conventional-ch increments the patch version even when
      # it skipped commiting due to empty changelog. In such a case,
      # we have to retrieve the old (unchanged) version using our own means.
      # https://github.com/conventional-changelog/standard-version/issues/730

      - name: Read old version file
        id: read-old-version
        uses: CumulusDS/get-yaml-paths-action@v0.1.0
        with:
          file: version.yml
          version: version
      - name: Conventional changelog
        id: conventional-ch
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GH_TOKEN_FOR_CONVENTIONAL_CHANGELOG }}
          git-message: 'release: {version}'
          release-count: '10'
          version-file: './version.yml'
          version-path: 'version'
          skip-on-empty: 'true'
          skip-version-file: 'false'
          skip-commit: 'false'
      - name: Read new version file
        id: read-new-version
        uses: CumulusDS/get-yaml-paths-action@v0.1.0
        with:
          file: version.yml
          version: version
      - name: Put correct version into GITHUB_ENV
        run: |
          if ${{ steps.conventional-ch.outputs.skipped == 'false' }}; then
            echo "image_version=${{ steps.read-new-version.outputs.version }}" >> $GITHUB_ENV
          else
            echo "image_version=${{ steps.read-old-version.outputs.version }}" >> $GITHUB_ENV
          fi

      - name: If version incremented then go from version.yml to gradle.properties
        if: ${{ steps.conventional-ch.outputs.skipped == 'false' }} 
        run: |
          cp version.yml gradle.properties
          sed -i 's/: /=/g' gradle.properties
          rm version.yml

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build Gradle project
        run: |
          export TEST_AWS_COGNITO_IDTOKEN=${{ secrets.TEST_COGNITO_IDTOKEN }}
          ./gradlew build

      - name: If version incremented then commit
        if: ${{ steps.conventional-ch.outputs.skipped == 'false' }} 
        run: |
          git rm version.yml
          git add gradle.properties
          git commit --amend --no-edit
          git push -f
          # Also update tag since commit was amended
          git tag -d v${{ env.image_version }}
          git tag v${{ env.image_version }}
          git push --delete origin v${{ env.image_version }}
          git push --tags


      #######################################################
      ################ RELEASE TO AWS ECR ###################
      #######################################################

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Push to the private repository first before pushing to the public one.
      # Indeed (1) only private repositories benefit from tag immutability (2) public ones are all in us-east-1
      # Pushing to private repo will
      # (a) prevent publishing to public one in case of mutation attempt
      # (b) be more efficient for internal use as private repo can be put in our desired region
      - name: Set up crendetials for private ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      - name: Build, tag and push Docker image to AWS private ECR
        # do NOT skip step based on conventional-ch output
        # because we want to be able to re-publish image
        # when previous release attempt succeeded commiting but failed publishing
        # if: ${{ steps.conventional-ch.outputs.skipped }}
        env:
          ECR_PRIVATE_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.image_version }}
        run: |
          docker build --build-arg version=$IMAGE_TAG -t $ECR_PRIVATE_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_PRIVATE_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_PRIVATE_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Set up crendetials for public ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_PUBLIC_REGISTRY
      - name: Re-tag and push Docker image to AWS public ECR
        env:
          ECR_PRIVATE_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.image_version }}
        run: |
          docker tag $ECR_PRIVATE_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
          docker push $ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
