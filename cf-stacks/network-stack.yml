AWSTemplateFormatVersion: 2010-09-09
Description: VPC Cloudformation stack for Hei Admin

Parameters:
  Env:
    Type: String
    Default: prod
  IPv4CIDR:
    Type: String
    Default: 172.31.0.0/16
  VPCName:
    Type: String
    Default: "hei-admin"
  PublicSubnetAZ:
    Type: String
    Default: eu-west-3a
  PublicSubnetIPv4CIDR:
    Type: String
    Default: 172.31.0.0/20
  PrivateSubnet1AZ:
    Type: String
    Default: eu-west-3b
  PrivateSubnet1IPv4CIDR:
    Type: String
    Default: 172.31.16.0/20
  PrivateSubnet2AZ:
    Type: String
    Default: eu-west-3c
  PrivateSubnet2IPv4CIDR:
    Type: String
    Default: 172.31.32.0/20
  ALBName:
    Type: String
    Default: hei-admin-api-alb
  ListenerPortNumber:
    Type: Number
    Default: 80
    Description: The default listener port number
  RepositoryName:
    Type: String
    Default: hei-admin-api-latest
    Description: The name to be given to the private ECR repository

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref IPv4CIDR
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VPCName

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join [ '' , [Security Group for , !Ref VPCName] ]
      GroupName: !Join [ '' , [!Ref VPCName, -sg] ]
      VpcId: !Ref VPC

  SecurityGroupHTTPSRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt SecurityGroup.GroupId

  SecurityGroupHTTPRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      GroupId: !GetAtt SecurityGroup.GroupId

  SecurityGroupSSHRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      GroupId: !GetAtt SecurityGroup.GroupId

  SecurityGroupPostgresqlRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      GroupId: !GetAtt SecurityGroup.GroupId

  SecurityGroupSelfRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId
      GroupId: !GetAtt SecurityGroup.GroupId

  ######## Public subnet configuration section start ########

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PublicSubnetAZ
      CidrBlock: !Ref PublicSubnetIPv4CIDR
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-route-table

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  ######## End of public subnet configuration ########

  ####### Private subnet configuration section ########

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PrivateSubnet1AZ
      CidrBlock: !Ref PrivateSubnet1IPv4CIDR
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PrivateSubnet2AZ
      CidrBlock: !Ref PrivateSubnet2IPv4CIDR
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC

  NATElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: nat-eip

  PublicNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATElasticIp.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: public-nat-gw

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-route-table

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicNatGateway
      RouteTableId: !Ref PrivateRouteTable

  ######## End of private subnet configuration ########

  ######## Application Load Balancer configuration section ########

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: 'false'
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.desync_mitigation_mode
          Value: defensive
        - Key: routing.http.xff_header_processing.mode
          Value: append
        - Key: routing.http2.enabled
          Value: 'true'
      Name: !Ref ALBName
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 400
            MessageBody: "{ \"type\": \"BadRequestException\", \"message\": \"Host may be invalid\", \"source\": \"alb\" }"
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !Ref ListenerPortNumber
      Protocol: HTTP

  ######## End of Application Load Balancer configuration ########

  #### ECR Provisioning ####

  PrivateRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepositoryName
      ImageScanningConfiguration:
        ScanOnPush: 'true'

  #### End of ECR Provisioning ####

  ######## SSM storage section ########
  VPCIdSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /hei-admin-api/vpc
      Type: String
      Value: !Ref VPC

  SecurityGroupIdSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /hei-admin-api/sg
      Type: String
      Value: !GetAtt SecurityGroup.GroupId

  PublicSubnetSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /hei-admin-api/public/subnet
      Type: String
      Value: !Ref PublicSubnet

  PrivateSubnet1SSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /hei-admin-api/private/subnet1
      Type: String
      Value: !Ref PrivateSubnet1

  PrivateSubnet2SSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /hei-admin-api/private/subnet2
      Type: String
      Value: !Ref PrivateSubnet2

  ListenerArnSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join [ '' , [ /hei-admin-api/alb-https-listener-arn ] ]
      Type: String
      Value: !GetAtt Listener.ListenerArn